
c:/Users/warf9/OneDrive/Documentos/10IoT/VisualStudio/stepperL298N/target/2.0.1/argon/stepperL298N.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00008420  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000dc440  000dc440  0000c440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000dc448  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001fc  2003e26c  000dc44c  0001e26c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000388  2003e468  2003e468  0002e468  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000dc648  000dc648  0002c648  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000dc670  000dc670  0002c670  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   001f6472  00000000  00000000  0002c674  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0001fa48  00000000  00000000  00222ae6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0003547c  00000000  00000000  0024252e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002f38  00000000  00000000  002779aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000090b8  00000000  00000000  0027a8e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  000422b2  00000000  00000000  0028399a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0004d568  00000000  00000000  002c5c4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0011eed3  00000000  00000000  003131b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00008cb4  00000000  00000000  00432088  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f005 fca9 	bl	d9988 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f005 fcb1 	bl	d99a4 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e26c 	.word	0x2003e26c
   d404c:	000dc44c 	.word	0x000dc44c
   d4050:	2003e468 	.word	0x2003e468
   d4054:	2003e468 	.word	0x2003e468
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f003 fae1 	bl	d7628 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000dc404 	.word	0x000dc404
   d4080:	000dc43c 	.word	0x000dc43c

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b8c8 	b.w	d4218 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fb73 	bl	d4774 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f003 ba8b 	b.w	d75ac <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f002 bc5d 	b.w	d6954 <malloc>

000d409a <_Znaj>:
   d409a:	f002 bc5b 	b.w	d6954 <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f002 bc61 	b.w	d6964 <free>

000d40a2 <_ZdaPv>:
   d40a2:	f002 bc5f 	b.w	d6964 <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr
	...

000d40b8 <_Z17interruptFunTouchv>:
  initupdate=false;
}

void interruptFunTouch()//funcion de interrupcion
{   
  reminderAlarm=false;
   d40b8:	4b01      	ldr	r3, [pc, #4]	; (d40c0 <_Z17interruptFunTouchv+0x8>)
   d40ba:	2200      	movs	r2, #0
   d40bc:	701a      	strb	r2, [r3, #0]
   d40be:	4770      	bx	lr
   d40c0:	2003e47d 	.word	0x2003e47d

000d40c4 <_Z15UbidotsMessagesPKcS0_>:
{
   d40c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  String datastring= String(data);
   d40c6:	4668      	mov	r0, sp
   d40c8:	f003 f8b7 	bl	d723a <_ZN6StringC1EPKc>
  Serial.println("RECIBIENDO DATOS ..."); 
   d40cc:	f003 fe68 	bl	d7da0 <_Z16_fetch_usbserialv>
   d40d0:	493b      	ldr	r1, [pc, #236]	; (d41c0 <_Z15UbidotsMessagesPKcS0_+0xfc>)
   d40d2:	f003 f9e4 	bl	d749e <_ZN5Print7printlnEPKc>
  if(datastring.equals("iniciar") or datastring.equals("Calendarstart")){
   d40d6:	493b      	ldr	r1, [pc, #236]	; (d41c4 <_Z15UbidotsMessagesPKcS0_+0x100>)
   d40d8:	4668      	mov	r0, sp
   d40da:	f003 f953 	bl	d7384 <_ZNK6String6equalsEPKc>
   d40de:	2800      	cmp	r0, #0
   d40e0:	d066      	beq.n	d41b0 <_Z15UbidotsMessagesPKcS0_+0xec>
    pill_blue=(bool) ubidotsGET.get("proyecto","azul");
   d40e2:	4a39      	ldr	r2, [pc, #228]	; (d41c8 <_Z15UbidotsMessagesPKcS0_+0x104>)
   d40e4:	4939      	ldr	r1, [pc, #228]	; (d41cc <_Z15UbidotsMessagesPKcS0_+0x108>)
   d40e6:	483a      	ldr	r0, [pc, #232]	; (d41d0 <_Z15UbidotsMessagesPKcS0_+0x10c>)
   d40e8:	f001 fba1 	bl	d582e <_ZN7Ubidots3getEPKcS1_>
   d40ec:	eeb5 0a40 	vcmp.f32	s0, #0.0
   d40f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d40f4:	4b37      	ldr	r3, [pc, #220]	; (d41d4 <_Z15UbidotsMessagesPKcS0_+0x110>)
    pill_orange=(bool) ubidotsGET.get("proyecto","naranja");
   d40f6:	4935      	ldr	r1, [pc, #212]	; (d41cc <_Z15UbidotsMessagesPKcS0_+0x108>)
   d40f8:	4835      	ldr	r0, [pc, #212]	; (d41d0 <_Z15UbidotsMessagesPKcS0_+0x10c>)
    pill_blue=(bool) ubidotsGET.get("proyecto","azul");
   d40fa:	bf14      	ite	ne
   d40fc:	2201      	movne	r2, #1
   d40fe:	2200      	moveq	r2, #0
   d4100:	701a      	strb	r2, [r3, #0]
    pill_orange=(bool) ubidotsGET.get("proyecto","naranja");
   d4102:	4a35      	ldr	r2, [pc, #212]	; (d41d8 <_Z15UbidotsMessagesPKcS0_+0x114>)
   d4104:	f001 fb93 	bl	d582e <_ZN7Ubidots3getEPKcS1_>
   d4108:	eeb5 0a40 	vcmp.f32	s0, #0.0
   d410c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4110:	4b32      	ldr	r3, [pc, #200]	; (d41dc <_Z15UbidotsMessagesPKcS0_+0x118>)
    pill_white=(bool) ubidotsGET.get("proyecto","blanca");
   d4112:	492e      	ldr	r1, [pc, #184]	; (d41cc <_Z15UbidotsMessagesPKcS0_+0x108>)
   d4114:	482e      	ldr	r0, [pc, #184]	; (d41d0 <_Z15UbidotsMessagesPKcS0_+0x10c>)
    pill_orange=(bool) ubidotsGET.get("proyecto","naranja");
   d4116:	bf14      	ite	ne
   d4118:	2201      	movne	r2, #1
   d411a:	2200      	moveq	r2, #0
   d411c:	701a      	strb	r2, [r3, #0]
    pill_white=(bool) ubidotsGET.get("proyecto","blanca");
   d411e:	4a30      	ldr	r2, [pc, #192]	; (d41e0 <_Z15UbidotsMessagesPKcS0_+0x11c>)
   d4120:	f001 fb85 	bl	d582e <_ZN7Ubidots3getEPKcS1_>
   d4124:	eeb5 0a40 	vcmp.f32	s0, #0.0
   d4128:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d412c:	4b2d      	ldr	r3, [pc, #180]	; (d41e4 <_Z15UbidotsMessagesPKcS0_+0x120>)
    pill_yellow=(bool) ubidotsGET.get("proyecto","amarilla");
   d412e:	4927      	ldr	r1, [pc, #156]	; (d41cc <_Z15UbidotsMessagesPKcS0_+0x108>)
   d4130:	4827      	ldr	r0, [pc, #156]	; (d41d0 <_Z15UbidotsMessagesPKcS0_+0x10c>)
    pill_white=(bool) ubidotsGET.get("proyecto","blanca");
   d4132:	bf14      	ite	ne
   d4134:	2201      	movne	r2, #1
   d4136:	2200      	moveq	r2, #0
   d4138:	701a      	strb	r2, [r3, #0]
    pill_yellow=(bool) ubidotsGET.get("proyecto","amarilla");
   d413a:	4a2b      	ldr	r2, [pc, #172]	; (d41e8 <_Z15UbidotsMessagesPKcS0_+0x124>)
   d413c:	f001 fb77 	bl	d582e <_ZN7Ubidots3getEPKcS1_>
   d4140:	eeb5 0a40 	vcmp.f32	s0, #0.0
   d4144:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4148:	4b28      	ldr	r3, [pc, #160]	; (d41ec <_Z15UbidotsMessagesPKcS0_+0x128>)
    water_var=(int) ubidotsGET.get("proyecto","agua");
   d414a:	4920      	ldr	r1, [pc, #128]	; (d41cc <_Z15UbidotsMessagesPKcS0_+0x108>)
   d414c:	4820      	ldr	r0, [pc, #128]	; (d41d0 <_Z15UbidotsMessagesPKcS0_+0x10c>)
    pill_yellow=(bool) ubidotsGET.get("proyecto","amarilla");
   d414e:	bf14      	ite	ne
   d4150:	2201      	movne	r2, #1
   d4152:	2200      	moveq	r2, #0
   d4154:	701a      	strb	r2, [r3, #0]
    water_var=(int) ubidotsGET.get("proyecto","agua");
   d4156:	4a26      	ldr	r2, [pc, #152]	; (d41f0 <_Z15UbidotsMessagesPKcS0_+0x12c>)
   d4158:	f001 fb69 	bl	d582e <_ZN7Ubidots3getEPKcS1_>
   d415c:	4b25      	ldr	r3, [pc, #148]	; (d41f4 <_Z15UbidotsMessagesPKcS0_+0x130>)
    coffee_teaspoons=(int) ubidotsGET.get("proyecto","cafe");
   d415e:	4a26      	ldr	r2, [pc, #152]	; (d41f8 <_Z15UbidotsMessagesPKcS0_+0x134>)
   d4160:	491a      	ldr	r1, [pc, #104]	; (d41cc <_Z15UbidotsMessagesPKcS0_+0x108>)
   d4162:	481b      	ldr	r0, [pc, #108]	; (d41d0 <_Z15UbidotsMessagesPKcS0_+0x10c>)
    water_var=(int) ubidotsGET.get("proyecto","agua");
   d4164:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   d4168:	ed83 0a00 	vstr	s0, [r3]
    coffee_teaspoons=(int) ubidotsGET.get("proyecto","cafe");
   d416c:	f001 fb5f 	bl	d582e <_ZN7Ubidots3getEPKcS1_>
   d4170:	4b22      	ldr	r3, [pc, #136]	; (d41fc <_Z15UbidotsMessagesPKcS0_+0x138>)
    sugar_teaspoons=(int) ubidotsGET.get("proyecto","azucar");
   d4172:	4a23      	ldr	r2, [pc, #140]	; (d4200 <_Z15UbidotsMessagesPKcS0_+0x13c>)
   d4174:	4915      	ldr	r1, [pc, #84]	; (d41cc <_Z15UbidotsMessagesPKcS0_+0x108>)
   d4176:	4816      	ldr	r0, [pc, #88]	; (d41d0 <_Z15UbidotsMessagesPKcS0_+0x10c>)
    coffee_teaspoons=(int) ubidotsGET.get("proyecto","cafe");
   d4178:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   d417c:	ed83 0a00 	vstr	s0, [r3]
    sugar_teaspoons=(int) ubidotsGET.get("proyecto","azucar");
   d4180:	f001 fb55 	bl	d582e <_ZN7Ubidots3getEPKcS1_>
   d4184:	4b1f      	ldr	r3, [pc, #124]	; (d4204 <_Z15UbidotsMessagesPKcS0_+0x140>)
    batir_variable=(float) ubidotsGET.get("proyecto","batir");
   d4186:	4a20      	ldr	r2, [pc, #128]	; (d4208 <_Z15UbidotsMessagesPKcS0_+0x144>)
   d4188:	4910      	ldr	r1, [pc, #64]	; (d41cc <_Z15UbidotsMessagesPKcS0_+0x108>)
   d418a:	4811      	ldr	r0, [pc, #68]	; (d41d0 <_Z15UbidotsMessagesPKcS0_+0x10c>)
    sugar_teaspoons=(int) ubidotsGET.get("proyecto","azucar");
   d418c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   d4190:	ed83 0a00 	vstr	s0, [r3]
    batir_variable=(float) ubidotsGET.get("proyecto","batir");
   d4194:	f001 fb4b 	bl	d582e <_ZN7Ubidots3getEPKcS1_>
   d4198:	4b1c      	ldr	r3, [pc, #112]	; (d420c <_Z15UbidotsMessagesPKcS0_+0x148>)
   d419a:	ed83 0a00 	vstr	s0, [r3]
    iniciar=true;
   d419e:	4b1c      	ldr	r3, [pc, #112]	; (d4210 <_Z15UbidotsMessagesPKcS0_+0x14c>)
   d41a0:	2201      	movs	r2, #1
   d41a2:	701a      	strb	r2, [r3, #0]
  String datastring= String(data);
   d41a4:	4668      	mov	r0, sp
   d41a6:	f002 fffd 	bl	d71a4 <_ZN6StringD1Ev>
}
   d41aa:	b005      	add	sp, #20
   d41ac:	f85d fb04 	ldr.w	pc, [sp], #4
  if(datastring.equals("iniciar") or datastring.equals("Calendarstart")){
   d41b0:	4918      	ldr	r1, [pc, #96]	; (d4214 <_Z15UbidotsMessagesPKcS0_+0x150>)
   d41b2:	4668      	mov	r0, sp
   d41b4:	f003 f8e6 	bl	d7384 <_ZNK6String6equalsEPKc>
   d41b8:	2800      	cmp	r0, #0
   d41ba:	d192      	bne.n	d40e2 <_Z15UbidotsMessagesPKcS0_+0x1e>
   d41bc:	e7f2      	b.n	d41a4 <_Z15UbidotsMessagesPKcS0_+0xe0>
   d41be:	bf00      	nop
   d41c0:	000db7f8 	.word	0x000db7f8
   d41c4:	000db80d 	.word	0x000db80d
   d41c8:	000db87c 	.word	0x000db87c
   d41cc:	000db815 	.word	0x000db815
   d41d0:	2003e494 	.word	0x2003e494
   d41d4:	2003e479 	.word	0x2003e479
   d41d8:	000db89a 	.word	0x000db89a
   d41dc:	2003e47a 	.word	0x2003e47a
   d41e0:	000db88a 	.word	0x000db88a
   d41e4:	2003e47b 	.word	0x2003e47b
   d41e8:	000db86a 	.word	0x000db86a
   d41ec:	2003e47c 	.word	0x2003e47c
   d41f0:	000db846 	.word	0x000db846
   d41f4:	2003e4a8 	.word	0x2003e4a8
   d41f8:	000db850 	.word	0x000db850
   d41fc:	2003e474 	.word	0x2003e474
   d4200:	000db85a 	.word	0x000db85a
   d4204:	2003e480 	.word	0x2003e480
   d4208:	000db81e 	.word	0x000db81e
   d420c:	2003e470 	.word	0x2003e470
   d4210:	2003e478 	.word	0x2003e478
   d4214:	000db824 	.word	0x000db824

000d4218 <setup>:
void setup(){ //----------------------------------------Setup
   d4218:	b513      	push	{r0, r1, r4, lr}
  pinMode(STEPPIN,OUTPUT);
   d421a:	2101      	movs	r1, #1
   d421c:	200b      	movs	r0, #11
   d421e:	f004 facd 	bl	d87bc <pinMode>
  pinMode(DIRPIN,OUTPUT);
   d4222:	2101      	movs	r1, #1
   d4224:	200c      	movs	r0, #12
   d4226:	f004 fac9 	bl	d87bc <pinMode>
  pinMode(ENAPIN,OUTPUT);
   d422a:	2101      	movs	r1, #1
   d422c:	200d      	movs	r0, #13
   d422e:	f004 fac5 	bl	d87bc <pinMode>
  pinMode(ServoAN1,OUTPUT);
   d4232:	2101      	movs	r1, #1
   d4234:	2004      	movs	r0, #4
   d4236:	f004 fac1 	bl	d87bc <pinMode>
  pinMode(ServoAN2,OUTPUT);
   d423a:	2101      	movs	r1, #1
   d423c:	2005      	movs	r0, #5
   d423e:	f004 fabd 	bl	d87bc <pinMode>
  pinMode(ServoBY1,OUTPUT);
   d4242:	2101      	movs	r1, #1
   d4244:	2002      	movs	r0, #2
   d4246:	f004 fab9 	bl	d87bc <pinMode>
  pinMode(ServoBY2,OUTPUT);
   d424a:	2101      	movs	r1, #1
   d424c:	2003      	movs	r0, #3
   d424e:	f004 fab5 	bl	d87bc <pinMode>
  pinMode(DCmotor,OUTPUT);
   d4252:	2101      	movs	r1, #1
   d4254:	2006      	movs	r0, #6
   d4256:	f004 fab1 	bl	d87bc <pinMode>
  pinMode(ChangeNema,OUTPUT);
   d425a:	2101      	movs	r1, #1
   d425c:	200a      	movs	r0, #10
   d425e:	f004 faad 	bl	d87bc <pinMode>
  pinMode(SwitchWater,INPUT);
   d4262:	2100      	movs	r1, #0
   d4264:	4608      	mov	r0, r1
   d4266:	f004 faa9 	bl	d87bc <pinMode>
  pinMode(BombaWater,OUTPUT); 
   d426a:	2101      	movs	r1, #1
   d426c:	4608      	mov	r0, r1
   d426e:	f004 faa5 	bl	d87bc <pinMode>
  pinMode(AlarmPin,OUTPUT);
   d4272:	2101      	movs	r1, #1
   d4274:	2007      	movs	r0, #7
   d4276:	f004 faa1 	bl	d87bc <pinMode>
  attachInterrupt(touchbutton, interruptFunTouch, CHANGE);
   d427a:	2400      	movs	r4, #0
  pinMode(touchbutton,INPUT);
   d427c:	2100      	movs	r1, #0
   d427e:	2008      	movs	r0, #8
   d4280:	f004 fa9c 	bl	d87bc <pinMode>
  attachInterrupt(touchbutton, interruptFunTouch, CHANGE);
   d4284:	4622      	mov	r2, r4
   d4286:	4908      	ldr	r1, [pc, #32]	; (d42a8 <setup+0x90>)
   d4288:	9400      	str	r4, [sp, #0]
   d428a:	f04f 33ff 	mov.w	r3, #4294967295
   d428e:	2008      	movs	r0, #8
   d4290:	f003 fdb2 	bl	d7df8 <_Z15attachInterrupttPFvvE13InterruptModeah>
    int publishVitals(system_tick_t period_s = particle::NOW);
    inline int publishVitals(std::chrono::seconds s) { return publishVitals(s.count()); }

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   d4294:	e9cd 4400 	strd	r4, r4, [sp]
   d4298:	4904      	ldr	r1, [pc, #16]	; (d42ac <setup+0x94>)
   d429a:	4805      	ldr	r0, [pc, #20]	; (d42b0 <setup+0x98>)
   d429c:	2301      	movs	r3, #1
   d429e:	4622      	mov	r2, r4
   d42a0:	f002 fb48 	bl	d6934 <spark_subscribe>
}
   d42a4:	b002      	add	sp, #8
   d42a6:	bd10      	pop	{r4, pc}
   d42a8:	000d40b9 	.word	0x000d40b9
   d42ac:	000d40c5 	.word	0x000d40c5
   d42b0:	000db832 	.word	0x000db832

000d42b4 <_Z8PillsFunv>:
void PillsFun() {//---------------------------------------------------------------------------PillsFun
   d42b4:	b510      	push	{r4, lr}
  if(pill_yellow){//---------------------------------yellow
   d42b6:	4c58      	ldr	r4, [pc, #352]	; (d4418 <_Z8PillsFunv+0x164>)
   d42b8:	7823      	ldrb	r3, [r4, #0]
   d42ba:	b343      	cbz	r3, d430e <_Z8PillsFunv+0x5a>
    analogWrite(ServoAN2, 50);
   d42bc:	2132      	movs	r1, #50	; 0x32
   d42be:	2005      	movs	r0, #5
   d42c0:	f004 fab9 	bl	d8836 <_Z11analogWritetm>
    delay(t1servos);
   d42c4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d42c8:	f003 f924 	bl	d7514 <delay>
    analogWrite(ServoAN2, 130);
   d42cc:	2182      	movs	r1, #130	; 0x82
   d42ce:	2005      	movs	r0, #5
   d42d0:	f004 fab1 	bl	d8836 <_Z11analogWritetm>
    delay(t2servos);
   d42d4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d42d8:	f003 f91c 	bl	d7514 <delay>
    analogWrite(ServoAN1, 70);
   d42dc:	2146      	movs	r1, #70	; 0x46
   d42de:	2004      	movs	r0, #4
   d42e0:	f004 faa9 	bl	d8836 <_Z11analogWritetm>
    delay(t1servos);
   d42e4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d42e8:	f003 f914 	bl	d7514 <delay>
    analogWrite(ServoAN1, 130);
   d42ec:	2182      	movs	r1, #130	; 0x82
   d42ee:	2004      	movs	r0, #4
   d42f0:	f004 faa1 	bl	d8836 <_Z11analogWritetm>
    delay(t2servos);
   d42f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d42f8:	f003 f90c 	bl	d7514 <delay>
    pill_yellow=false;
   d42fc:	2300      	movs	r3, #0
   d42fe:	7023      	strb	r3, [r4, #0]
    upyellow=true;
   d4300:	4b46      	ldr	r3, [pc, #280]	; (d441c <_Z8PillsFunv+0x168>)
   d4302:	2201      	movs	r2, #1
   d4304:	701a      	strb	r2, [r3, #0]
    cantamarillo--;
   d4306:	4a46      	ldr	r2, [pc, #280]	; (d4420 <_Z8PillsFunv+0x16c>)
   d4308:	6813      	ldr	r3, [r2, #0]
   d430a:	3b01      	subs	r3, #1
   d430c:	6013      	str	r3, [r2, #0]
  if(pill_blue){//---------------------------------Blue
   d430e:	4c45      	ldr	r4, [pc, #276]	; (d4424 <_Z8PillsFunv+0x170>)
   d4310:	7823      	ldrb	r3, [r4, #0]
   d4312:	b343      	cbz	r3, d4366 <_Z8PillsFunv+0xb2>
    analogWrite(ServoBY2, 50);
   d4314:	2132      	movs	r1, #50	; 0x32
   d4316:	2003      	movs	r0, #3
   d4318:	f004 fa8d 	bl	d8836 <_Z11analogWritetm>
    delay(t1servos);
   d431c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d4320:	f003 f8f8 	bl	d7514 <delay>
    analogWrite(ServoBY2, 130);
   d4324:	2182      	movs	r1, #130	; 0x82
   d4326:	2003      	movs	r0, #3
   d4328:	f004 fa85 	bl	d8836 <_Z11analogWritetm>
    delay(t2servos);
   d432c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d4330:	f003 f8f0 	bl	d7514 <delay>
    analogWrite(ServoBY1, 50);
   d4334:	2132      	movs	r1, #50	; 0x32
   d4336:	2002      	movs	r0, #2
   d4338:	f004 fa7d 	bl	d8836 <_Z11analogWritetm>
    delay(t1servos);
   d433c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d4340:	f003 f8e8 	bl	d7514 <delay>
    analogWrite(ServoBY1, 130);
   d4344:	2182      	movs	r1, #130	; 0x82
   d4346:	2002      	movs	r0, #2
   d4348:	f004 fa75 	bl	d8836 <_Z11analogWritetm>
    delay(t2servos);
   d434c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d4350:	f003 f8e0 	bl	d7514 <delay>
    pill_blue=false;
   d4354:	2300      	movs	r3, #0
   d4356:	7023      	strb	r3, [r4, #0]
    upblue=true;
   d4358:	4b33      	ldr	r3, [pc, #204]	; (d4428 <_Z8PillsFunv+0x174>)
   d435a:	2201      	movs	r2, #1
   d435c:	701a      	strb	r2, [r3, #0]
    cantazul--;
   d435e:	4a33      	ldr	r2, [pc, #204]	; (d442c <_Z8PillsFunv+0x178>)
   d4360:	6813      	ldr	r3, [r2, #0]
   d4362:	3b01      	subs	r3, #1
   d4364:	6013      	str	r3, [r2, #0]
  if(pill_white){//---------------------------------white
   d4366:	4c32      	ldr	r4, [pc, #200]	; (d4430 <_Z8PillsFunv+0x17c>)
   d4368:	7823      	ldrb	r3, [r4, #0]
   d436a:	b343      	cbz	r3, d43be <_Z8PillsFunv+0x10a>
    analogWrite(ServoAN2, 180);
   d436c:	21b4      	movs	r1, #180	; 0xb4
   d436e:	2005      	movs	r0, #5
   d4370:	f004 fa61 	bl	d8836 <_Z11analogWritetm>
    delay(t1servos);
   d4374:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d4378:	f003 f8cc 	bl	d7514 <delay>
    analogWrite(ServoAN2, 130);
   d437c:	2182      	movs	r1, #130	; 0x82
   d437e:	2005      	movs	r0, #5
   d4380:	f004 fa59 	bl	d8836 <_Z11analogWritetm>
    delay(t2servos);
   d4384:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d4388:	f003 f8c4 	bl	d7514 <delay>
    analogWrite(ServoAN1, 190);
   d438c:	21be      	movs	r1, #190	; 0xbe
   d438e:	2004      	movs	r0, #4
   d4390:	f004 fa51 	bl	d8836 <_Z11analogWritetm>
    delay(t1servos);
   d4394:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d4398:	f003 f8bc 	bl	d7514 <delay>
    analogWrite(ServoAN1, 130);
   d439c:	2182      	movs	r1, #130	; 0x82
   d439e:	2004      	movs	r0, #4
   d43a0:	f004 fa49 	bl	d8836 <_Z11analogWritetm>
    delay(t2servos);
   d43a4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d43a8:	f003 f8b4 	bl	d7514 <delay>
    pill_white=false;
   d43ac:	2300      	movs	r3, #0
   d43ae:	7023      	strb	r3, [r4, #0]
    upwhite=true;
   d43b0:	4b20      	ldr	r3, [pc, #128]	; (d4434 <_Z8PillsFunv+0x180>)
   d43b2:	2201      	movs	r2, #1
   d43b4:	701a      	strb	r2, [r3, #0]
    cantblanco--;
   d43b6:	4a20      	ldr	r2, [pc, #128]	; (d4438 <_Z8PillsFunv+0x184>)
   d43b8:	6813      	ldr	r3, [r2, #0]
   d43ba:	3b01      	subs	r3, #1
   d43bc:	6013      	str	r3, [r2, #0]
  if(pill_orange){//---------------------------------orange
   d43be:	4c1f      	ldr	r4, [pc, #124]	; (d443c <_Z8PillsFunv+0x188>)
   d43c0:	7823      	ldrb	r3, [r4, #0]
   d43c2:	b343      	cbz	r3, d4416 <_Z8PillsFunv+0x162>
    analogWrite(ServoBY2, 170);
   d43c4:	21aa      	movs	r1, #170	; 0xaa
   d43c6:	2003      	movs	r0, #3
   d43c8:	f004 fa35 	bl	d8836 <_Z11analogWritetm>
    delay(t1servos);
   d43cc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d43d0:	f003 f8a0 	bl	d7514 <delay>
    analogWrite(ServoBY2, 130);
   d43d4:	2182      	movs	r1, #130	; 0x82
   d43d6:	2003      	movs	r0, #3
   d43d8:	f004 fa2d 	bl	d8836 <_Z11analogWritetm>
    delay(t2servos);
   d43dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d43e0:	f003 f898 	bl	d7514 <delay>
    analogWrite(ServoBY1, 220);
   d43e4:	21dc      	movs	r1, #220	; 0xdc
   d43e6:	2002      	movs	r0, #2
   d43e8:	f004 fa25 	bl	d8836 <_Z11analogWritetm>
    delay(t1servos);
   d43ec:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d43f0:	f003 f890 	bl	d7514 <delay>
    analogWrite(ServoBY1, 130);
   d43f4:	2182      	movs	r1, #130	; 0x82
   d43f6:	2002      	movs	r0, #2
   d43f8:	f004 fa1d 	bl	d8836 <_Z11analogWritetm>
    delay(t2servos);
   d43fc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d4400:	f003 f888 	bl	d7514 <delay>
    pill_orange=false;
   d4404:	2300      	movs	r3, #0
   d4406:	7023      	strb	r3, [r4, #0]
    uporange=true;
   d4408:	4b0d      	ldr	r3, [pc, #52]	; (d4440 <_Z8PillsFunv+0x18c>)
   d440a:	2201      	movs	r2, #1
   d440c:	701a      	strb	r2, [r3, #0]
    cantnaranja--;    
   d440e:	4a0d      	ldr	r2, [pc, #52]	; (d4444 <_Z8PillsFunv+0x190>)
   d4410:	6813      	ldr	r3, [r2, #0]
   d4412:	3b01      	subs	r3, #1
   d4414:	6013      	str	r3, [r2, #0]
}
   d4416:	bd10      	pop	{r4, pc}
   d4418:	2003e47c 	.word	0x2003e47c
   d441c:	2003e4a6 	.word	0x2003e4a6
   d4420:	2003e270 	.word	0x2003e270
   d4424:	2003e479 	.word	0x2003e479
   d4428:	2003e4a0 	.word	0x2003e4a0
   d442c:	2003e274 	.word	0x2003e274
   d4430:	2003e47b 	.word	0x2003e47b
   d4434:	2003e4a5 	.word	0x2003e4a5
   d4438:	2003e278 	.word	0x2003e278
   d443c:	2003e47a 	.word	0x2003e47a
   d4440:	2003e4a2 	.word	0x2003e4a2
   d4444:	2003e27c 	.word	0x2003e27c

000d4448 <_Z8batirFunv>:
void batirFun(){
   d4448:	b508      	push	{r3, lr}
  analogWrite(DCmotor, 250); //activar batidor
   d444a:	21fa      	movs	r1, #250	; 0xfa
   d444c:	2006      	movs	r0, #6
   d444e:	f004 f9f2 	bl	d8836 <_Z11analogWritetm>
  delay(tbatir*batir_variable);
   d4452:	4b09      	ldr	r3, [pc, #36]	; (d4478 <_Z8batirFunv+0x30>)
   d4454:	ed9f 7a09 	vldr	s14, [pc, #36]	; d447c <_Z8batirFunv+0x34>
   d4458:	edd3 7a00 	vldr	s15, [r3]
   d445c:	ee67 7a87 	vmul.f32	s15, s15, s14
   d4460:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   d4464:	ee17 0a90 	vmov	r0, s15
   d4468:	f003 f854 	bl	d7514 <delay>
}
   d446c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  analogWrite(DCmotor, 0);
   d4470:	2100      	movs	r1, #0
   d4472:	2006      	movs	r0, #6
   d4474:	f004 b9df 	b.w	d8836 <_Z11analogWritetm>
   d4478:	2003e470 	.word	0x2003e470
   d447c:	476a6000 	.word	0x476a6000

000d4480 <_Z7forwardi>:
void forward(int steps){ //---------------------------------------------------------------------forward
   d4480:	b538      	push	{r3, r4, r5, lr}
  digitalWrite(ENAPIN,LOW);
   d4482:	2100      	movs	r1, #0
void forward(int steps){ //---------------------------------------------------------------------forward
   d4484:	4605      	mov	r5, r0
  digitalWrite(ENAPIN,LOW);
   d4486:	200d      	movs	r0, #13
   d4488:	f004 f9a9 	bl	d87de <digitalWrite>
  digitalWrite(DIRPIN,HIGH);//SET DIRECTION 
   d448c:	2101      	movs	r1, #1
   d448e:	200c      	movs	r0, #12
   d4490:	f004 f9a5 	bl	d87de <digitalWrite>
  for(i=0;i<steps;i++){
   d4494:	2400      	movs	r4, #0
   d4496:	42ac      	cmp	r4, r5
  digitalWrite(ENAPIN,HIGH);//DISABLE STEPPER
   d4498:	f04f 0101 	mov.w	r1, #1
  for(i=0;i<steps;i++){
   d449c:	da0e      	bge.n	d44bc <_Z7forwardi+0x3c>
    digitalWrite(STEPPIN,HIGH);
   d449e:	200b      	movs	r0, #11
   d44a0:	f004 f99d 	bl	d87de <digitalWrite>
    delay(STEPTIME);
   d44a4:	2002      	movs	r0, #2
   d44a6:	f003 f835 	bl	d7514 <delay>
    digitalWrite(STEPPIN,LOW);
   d44aa:	2100      	movs	r1, #0
   d44ac:	200b      	movs	r0, #11
   d44ae:	f004 f996 	bl	d87de <digitalWrite>
    delay(STEPTIME);  
   d44b2:	2002      	movs	r0, #2
   d44b4:	f003 f82e 	bl	d7514 <delay>
  for(i=0;i<steps;i++){
   d44b8:	3401      	adds	r4, #1
   d44ba:	e7ec      	b.n	d4496 <_Z7forwardi+0x16>
}
   d44bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  digitalWrite(ENAPIN,HIGH);//DISABLE STEPPER
   d44c0:	200d      	movs	r0, #13
   d44c2:	f004 b98c 	b.w	d87de <digitalWrite>
	...

000d44c8 <_Z6WCSFunv>:
void WCSFun(){//------------------------------------------------------------------water+coffee+sugar  
   d44c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(water_var>0 and !switchStatus){
   d44cc:	4d43      	ldr	r5, [pc, #268]	; (d45dc <_Z6WCSFunv+0x114>)
   d44ce:	682b      	ldr	r3, [r5, #0]
   d44d0:	2b00      	cmp	r3, #0
   d44d2:	dd0d      	ble.n	d44f0 <_Z6WCSFunv+0x28>
   d44d4:	4b42      	ldr	r3, [pc, #264]	; (d45e0 <_Z6WCSFunv+0x118>)
   d44d6:	781b      	ldrb	r3, [r3, #0]
   d44d8:	b953      	cbnz	r3, d44f0 <_Z6WCSFunv+0x28>
    digitalWrite(BombaWater, true); //activar bomba
   d44da:	2101      	movs	r1, #1
   d44dc:	4608      	mov	r0, r1
   d44de:	f004 f97e 	bl	d87de <digitalWrite>
    nivelagua=nivelagua-5;
   d44e2:	4a40      	ldr	r2, [pc, #256]	; (d45e4 <_Z6WCSFunv+0x11c>)
   d44e4:	6813      	ldr	r3, [r2, #0]
   d44e6:	3b05      	subs	r3, #5
   d44e8:	6013      	str	r3, [r2, #0]
    upwater=true;
   d44ea:	4b3f      	ldr	r3, [pc, #252]	; (d45e8 <_Z6WCSFunv+0x120>)
   d44ec:	2201      	movs	r2, #1
   d44ee:	701a      	strb	r2, [r3, #0]
  digitalWrite(ChangeNema, false); //nema change
   d44f0:	2100      	movs	r1, #0
   d44f2:	200a      	movs	r0, #10
   d44f4:	f004 f973 	bl	d87de <digitalWrite>
  delay((twater*water_var)/100);
   d44f8:	682b      	ldr	r3, [r5, #0]
  while(sugar_teaspoons>0){ //activar azucar
   d44fa:	4c3c      	ldr	r4, [pc, #240]	; (d45ec <_Z6WCSFunv+0x124>)
   d44fc:	4e3c      	ldr	r6, [pc, #240]	; (d45f0 <_Z6WCSFunv+0x128>)
  delay((twater*water_var)/100);
   d44fe:	203c      	movs	r0, #60	; 0x3c
   d4500:	4358      	muls	r0, r3
   d4502:	f003 f807 	bl	d7514 <delay>
  digitalWrite(BombaWater, false); //apagar bomba  
   d4506:	2100      	movs	r1, #0
   d4508:	2001      	movs	r0, #1
   d450a:	f004 f968 	bl	d87de <digitalWrite>
   d450e:	4627      	mov	r7, r4
  while(sugar_teaspoons>0){ //activar azucar
   d4510:	6823      	ldr	r3, [r4, #0]
   d4512:	2b00      	cmp	r3, #0
   d4514:	dd12      	ble.n	d453c <_Z6WCSFunv+0x74>
    forward(200);
   d4516:	20c8      	movs	r0, #200	; 0xc8
   d4518:	f7ff ffb2 	bl	d4480 <_Z7forwardi>
    sugar_teaspoons--;
   d451c:	6823      	ldr	r3, [r4, #0]
    nivelazucar=nivelazucar-2;
   d451e:	4935      	ldr	r1, [pc, #212]	; (d45f4 <_Z6WCSFunv+0x12c>)
    sugar_teaspoons--;
   d4520:	3b01      	subs	r3, #1
   d4522:	6023      	str	r3, [r4, #0]
    nivelazucar=nivelazucar-2;
   d4524:	680b      	ldr	r3, [r1, #0]
   d4526:	3b02      	subs	r3, #2
   d4528:	600b      	str	r3, [r1, #0]
    upsugar=true;
   d452a:	4b33      	ldr	r3, [pc, #204]	; (d45f8 <_Z6WCSFunv+0x130>)
    batir=true;
   d452c:	2201      	movs	r2, #1
    delay(tchangenema);    
   d452e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
    batir=true;
   d4532:	7032      	strb	r2, [r6, #0]
    upsugar=true;
   d4534:	701a      	strb	r2, [r3, #0]
    delay(tchangenema);    
   d4536:	f002 ffed 	bl	d7514 <delay>
  while(sugar_teaspoons>0){ //activar azucar
   d453a:	e7e9      	b.n	d4510 <_Z6WCSFunv+0x48>
  delay(tchangenema);
   d453c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d4540:	f002 ffe8 	bl	d7514 <delay>
  digitalWrite(ChangeNema, true); //nema change  
   d4544:	2101      	movs	r1, #1
   d4546:	200a      	movs	r0, #10
   d4548:	f004 f949 	bl	d87de <digitalWrite>
  delay(tchangenema);
   d454c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
  while(coffee_teaspoons>0){ //activar cafe
   d4550:	4c2a      	ldr	r4, [pc, #168]	; (d45fc <_Z6WCSFunv+0x134>)
    nivelcafe=nivelcafe-2;
   d4552:	f8df 90b8 	ldr.w	r9, [pc, #184]	; d460c <_Z6WCSFunv+0x144>
  delay(tchangenema);
   d4556:	f002 ffdd 	bl	d7514 <delay>
   d455a:	46a0      	mov	r8, r4
  while(coffee_teaspoons>0){ //activar cafe
   d455c:	6823      	ldr	r3, [r4, #0]
   d455e:	2b00      	cmp	r3, #0
   d4560:	dd13      	ble.n	d458a <_Z6WCSFunv+0xc2>
    forward(200);
   d4562:	20c8      	movs	r0, #200	; 0xc8
   d4564:	f7ff ff8c 	bl	d4480 <_Z7forwardi>
    coffee_teaspoons--;
   d4568:	6823      	ldr	r3, [r4, #0]
   d456a:	3b01      	subs	r3, #1
   d456c:	6023      	str	r3, [r4, #0]
    nivelcafe=nivelcafe-2;
   d456e:	f8d9 3000 	ldr.w	r3, [r9]
   d4572:	3b02      	subs	r3, #2
   d4574:	f8c9 3000 	str.w	r3, [r9]
    upcoffee=true;
   d4578:	4b21      	ldr	r3, [pc, #132]	; (d4600 <_Z6WCSFunv+0x138>)
    batir=true;
   d457a:	2201      	movs	r2, #1
    delay(tchangenema);
   d457c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
    batir=true;
   d4580:	7032      	strb	r2, [r6, #0]
    upcoffee=true;
   d4582:	701a      	strb	r2, [r3, #0]
    delay(tchangenema);
   d4584:	f002 ffc6 	bl	d7514 <delay>
  while(coffee_teaspoons>0){ //activar cafe
   d4588:	e7e8      	b.n	d455c <_Z6WCSFunv+0x94>
  if(batir_variable){
   d458a:	4c1e      	ldr	r4, [pc, #120]	; (d4604 <_Z6WCSFunv+0x13c>)
  digitalWrite(ChangeNema, false); //nema change
   d458c:	2100      	movs	r1, #0
   d458e:	200a      	movs	r0, #10
   d4590:	f004 f925 	bl	d87de <digitalWrite>
  if(batir_variable){
   d4594:	edd4 7a00 	vldr	s15, [r4]
   d4598:	eef5 7a40 	vcmp.f32	s15, #0.0
   d459c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d45a0:	d00f      	beq.n	d45c2 <_Z6WCSFunv+0xfa>
    digitalWrite(DCmotor, 1); //activar batidor
   d45a2:	2006      	movs	r0, #6
   d45a4:	2101      	movs	r1, #1
   d45a6:	f004 f91a 	bl	d87de <digitalWrite>
    delay(tbatir*batir_variable);
   d45aa:	edd4 7a00 	vldr	s15, [r4]
   d45ae:	ed9f 7a16 	vldr	s14, [pc, #88]	; d4608 <_Z6WCSFunv+0x140>
   d45b2:	ee67 7a87 	vmul.f32	s15, s15, s14
   d45b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   d45ba:	ee17 0a90 	vmov	r0, s15
   d45be:	f002 ffa9 	bl	d7514 <delay>
  batir=false;
   d45c2:	2400      	movs	r4, #0
  analogWrite(DCmotor, 0); //apagar batidor
   d45c4:	4621      	mov	r1, r4
   d45c6:	2006      	movs	r0, #6
  batir=false;
   d45c8:	7034      	strb	r4, [r6, #0]
  analogWrite(DCmotor, 0); //apagar batidor
   d45ca:	f004 f934 	bl	d8836 <_Z11analogWritetm>
  sugar_teaspoons=0;
   d45ce:	603c      	str	r4, [r7, #0]
  coffee_teaspoons=0;     
   d45d0:	f8c8 4000 	str.w	r4, [r8]
  water_var=0;
   d45d4:	602c      	str	r4, [r5, #0]
}
   d45d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d45da:	bf00      	nop
   d45dc:	2003e4a8 	.word	0x2003e4a8
   d45e0:	2003e484 	.word	0x2003e484
   d45e4:	2003e284 	.word	0x2003e284
   d45e8:	2003e4a4 	.word	0x2003e4a4
   d45ec:	2003e480 	.word	0x2003e480
   d45f0:	2003e46d 	.word	0x2003e46d
   d45f4:	2003e288 	.word	0x2003e288
   d45f8:	2003e4a3 	.word	0x2003e4a3
   d45fc:	2003e474 	.word	0x2003e474
   d4600:	2003e4a1 	.word	0x2003e4a1
   d4604:	2003e470 	.word	0x2003e470
   d4608:	476a6000 	.word	0x476a6000
   d460c:	2003e28c 	.word	0x2003e28c

000d4610 <_Z9updateFunv>:
void updateFun(){ //----------------------------------------------------------------------update ubidots
   d4610:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if(upwater or initupdate) ubidots.add("nivelagua", (float) nivelagua);
   d4614:	4f3e      	ldr	r7, [pc, #248]	; (d4710 <_Z9updateFunv+0x100>)
   d4616:	4c3f      	ldr	r4, [pc, #252]	; (d4714 <_Z9updateFunv+0x104>)
   d4618:	783b      	ldrb	r3, [r7, #0]
   d461a:	b90b      	cbnz	r3, d4620 <_Z9updateFunv+0x10>
   d461c:	7823      	ldrb	r3, [r4, #0]
   d461e:	b143      	cbz	r3, d4632 <_Z9updateFunv+0x22>
   d4620:	4b3d      	ldr	r3, [pc, #244]	; (d4718 <_Z9updateFunv+0x108>)
   d4622:	493e      	ldr	r1, [pc, #248]	; (d471c <_Z9updateFunv+0x10c>)
   d4624:	ed93 0a00 	vldr	s0, [r3]
   d4628:	483d      	ldr	r0, [pc, #244]	; (d4720 <_Z9updateFunv+0x110>)
   d462a:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
   d462e:	f001 f8f2 	bl	d5816 <_ZN7Ubidots3addEPcf>
  if(upcoffee or initupdate) ubidots.add("nivelcafe", (int) nivelcafe);
   d4632:	4e3c      	ldr	r6, [pc, #240]	; (d4724 <_Z9updateFunv+0x114>)
   d4634:	7833      	ldrb	r3, [r6, #0]
   d4636:	b90b      	cbnz	r3, d463c <_Z9updateFunv+0x2c>
   d4638:	7823      	ldrb	r3, [r4, #0]
   d463a:	b143      	cbz	r3, d464e <_Z9updateFunv+0x3e>
   d463c:	4b3a      	ldr	r3, [pc, #232]	; (d4728 <_Z9updateFunv+0x118>)
   d463e:	493b      	ldr	r1, [pc, #236]	; (d472c <_Z9updateFunv+0x11c>)
   d4640:	ed93 0a00 	vldr	s0, [r3]
   d4644:	4836      	ldr	r0, [pc, #216]	; (d4720 <_Z9updateFunv+0x110>)
   d4646:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
   d464a:	f001 f8e4 	bl	d5816 <_ZN7Ubidots3addEPcf>
  if(upsugar or initupdate) ubidots.add("nivelazucar", (int) nivelazucar);
   d464e:	4d38      	ldr	r5, [pc, #224]	; (d4730 <_Z9updateFunv+0x120>)
   d4650:	782b      	ldrb	r3, [r5, #0]
   d4652:	b90b      	cbnz	r3, d4658 <_Z9updateFunv+0x48>
   d4654:	7823      	ldrb	r3, [r4, #0]
   d4656:	b143      	cbz	r3, d466a <_Z9updateFunv+0x5a>
   d4658:	4b36      	ldr	r3, [pc, #216]	; (d4734 <_Z9updateFunv+0x124>)
   d465a:	4937      	ldr	r1, [pc, #220]	; (d4738 <_Z9updateFunv+0x128>)
   d465c:	ed93 0a00 	vldr	s0, [r3]
   d4660:	482f      	ldr	r0, [pc, #188]	; (d4720 <_Z9updateFunv+0x110>)
   d4662:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
   d4666:	f001 f8d6 	bl	d5816 <_ZN7Ubidots3addEPcf>
  if(upyellow or initupdate) ubidots.add("pastilla amarilla",(float) cantamarillo);
   d466a:	4b34      	ldr	r3, [pc, #208]	; (d473c <_Z9updateFunv+0x12c>)
   d466c:	781a      	ldrb	r2, [r3, #0]
   d466e:	469a      	mov	sl, r3
   d4670:	b90a      	cbnz	r2, d4676 <_Z9updateFunv+0x66>
   d4672:	7823      	ldrb	r3, [r4, #0]
   d4674:	b143      	cbz	r3, d4688 <_Z9updateFunv+0x78>
   d4676:	4b32      	ldr	r3, [pc, #200]	; (d4740 <_Z9updateFunv+0x130>)
   d4678:	4932      	ldr	r1, [pc, #200]	; (d4744 <_Z9updateFunv+0x134>)
   d467a:	ed93 0a00 	vldr	s0, [r3]
   d467e:	4828      	ldr	r0, [pc, #160]	; (d4720 <_Z9updateFunv+0x110>)
   d4680:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
   d4684:	f001 f8c7 	bl	d5816 <_ZN7Ubidots3addEPcf>
  if(upblue or initupdate) ubidots.add("pastilla azul", (int) cantazul);
   d4688:	4b2f      	ldr	r3, [pc, #188]	; (d4748 <_Z9updateFunv+0x138>)
   d468a:	781a      	ldrb	r2, [r3, #0]
   d468c:	469b      	mov	fp, r3
   d468e:	b90a      	cbnz	r2, d4694 <_Z9updateFunv+0x84>
   d4690:	7823      	ldrb	r3, [r4, #0]
   d4692:	b143      	cbz	r3, d46a6 <_Z9updateFunv+0x96>
   d4694:	4b2d      	ldr	r3, [pc, #180]	; (d474c <_Z9updateFunv+0x13c>)
   d4696:	492e      	ldr	r1, [pc, #184]	; (d4750 <_Z9updateFunv+0x140>)
   d4698:	ed93 0a00 	vldr	s0, [r3]
   d469c:	4820      	ldr	r0, [pc, #128]	; (d4720 <_Z9updateFunv+0x110>)
   d469e:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
   d46a2:	f001 f8b8 	bl	d5816 <_ZN7Ubidots3addEPcf>
  if(upwhite or initupdate) ubidots.add("pastilla blanca", (int) cantblanco);
   d46a6:	4b2b      	ldr	r3, [pc, #172]	; (d4754 <_Z9updateFunv+0x144>)
   d46a8:	781a      	ldrb	r2, [r3, #0]
   d46aa:	4698      	mov	r8, r3
   d46ac:	b90a      	cbnz	r2, d46b2 <_Z9updateFunv+0xa2>
   d46ae:	7823      	ldrb	r3, [r4, #0]
   d46b0:	b143      	cbz	r3, d46c4 <_Z9updateFunv+0xb4>
   d46b2:	4b29      	ldr	r3, [pc, #164]	; (d4758 <_Z9updateFunv+0x148>)
   d46b4:	4929      	ldr	r1, [pc, #164]	; (d475c <_Z9updateFunv+0x14c>)
   d46b6:	ed93 0a00 	vldr	s0, [r3]
   d46ba:	4819      	ldr	r0, [pc, #100]	; (d4720 <_Z9updateFunv+0x110>)
   d46bc:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
   d46c0:	f001 f8a9 	bl	d5816 <_ZN7Ubidots3addEPcf>
  if(uporange or initupdate) ubidots.add("pastilla naranja", (int) cantnaranja);
   d46c4:	4b26      	ldr	r3, [pc, #152]	; (d4760 <_Z9updateFunv+0x150>)
   d46c6:	781a      	ldrb	r2, [r3, #0]
   d46c8:	4699      	mov	r9, r3
   d46ca:	b90a      	cbnz	r2, d46d0 <_Z9updateFunv+0xc0>
   d46cc:	7823      	ldrb	r3, [r4, #0]
   d46ce:	b143      	cbz	r3, d46e2 <_Z9updateFunv+0xd2>
   d46d0:	4b24      	ldr	r3, [pc, #144]	; (d4764 <_Z9updateFunv+0x154>)
   d46d2:	4925      	ldr	r1, [pc, #148]	; (d4768 <_Z9updateFunv+0x158>)
   d46d4:	ed93 0a00 	vldr	s0, [r3]
   d46d8:	4811      	ldr	r0, [pc, #68]	; (d4720 <_Z9updateFunv+0x110>)
   d46da:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
   d46de:	f001 f89a 	bl	d5816 <_ZN7Ubidots3addEPcf>
  ubidots.send(WEBHOOK_NAME, PUBLIC);
   d46e2:	4b22      	ldr	r3, [pc, #136]	; (d476c <_Z9updateFunv+0x15c>)
   d46e4:	480e      	ldr	r0, [pc, #56]	; (d4720 <_Z9updateFunv+0x110>)
   d46e6:	781a      	ldrb	r2, [r3, #0]
   d46e8:	4b21      	ldr	r3, [pc, #132]	; (d4770 <_Z9updateFunv+0x160>)
   d46ea:	6819      	ldr	r1, [r3, #0]
   d46ec:	f001 f89c 	bl	d5828 <_ZN7Ubidots4sendEPKcN8particle5FlagsI15PublishFlagTypehEE>
  upblue=false;
   d46f0:	2300      	movs	r3, #0
   d46f2:	f88b 3000 	strb.w	r3, [fp]
  upyellow=false;
   d46f6:	f88a 3000 	strb.w	r3, [sl]
  uporange=false;
   d46fa:	f889 3000 	strb.w	r3, [r9]
  upwhite=false;
   d46fe:	f888 3000 	strb.w	r3, [r8]
  upwater=false;
   d4702:	703b      	strb	r3, [r7, #0]
  upcoffee=false;
   d4704:	7033      	strb	r3, [r6, #0]
  upsugar=false;
   d4706:	702b      	strb	r3, [r5, #0]
  initupdate=false;
   d4708:	7023      	strb	r3, [r4, #0]
}
   d470a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d470e:	bf00      	nop
   d4710:	2003e4a4 	.word	0x2003e4a4
   d4714:	2003e280 	.word	0x2003e280
   d4718:	2003e284 	.word	0x2003e284
   d471c:	000db841 	.word	0x000db841
   d4720:	2003e488 	.word	0x2003e488
   d4724:	2003e4a1 	.word	0x2003e4a1
   d4728:	2003e28c 	.word	0x2003e28c
   d472c:	000db84b 	.word	0x000db84b
   d4730:	2003e4a3 	.word	0x2003e4a3
   d4734:	2003e288 	.word	0x2003e288
   d4738:	000db855 	.word	0x000db855
   d473c:	2003e4a6 	.word	0x2003e4a6
   d4740:	2003e270 	.word	0x2003e270
   d4744:	000db861 	.word	0x000db861
   d4748:	2003e4a0 	.word	0x2003e4a0
   d474c:	2003e274 	.word	0x2003e274
   d4750:	000db873 	.word	0x000db873
   d4754:	2003e4a5 	.word	0x2003e4a5
   d4758:	2003e278 	.word	0x2003e278
   d475c:	000db881 	.word	0x000db881
   d4760:	2003e4a2 	.word	0x2003e4a2
   d4764:	2003e27c 	.word	0x2003e27c
   d4768:	000db891 	.word	0x000db891
   d476c:	2003e46c 	.word	0x2003e46c
   d4770:	2003e26c 	.word	0x2003e26c

000d4774 <loop>:
void loop() { //------------------------------------------------------------------------------Loop
   d4774:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if(initupdate) updateFun();
   d4778:	4b9f      	ldr	r3, [pc, #636]	; (d49f8 <loop+0x284>)
   d477a:	781b      	ldrb	r3, [r3, #0]
void loop() { //------------------------------------------------------------------------------Loop
   d477c:	b0b2      	sub	sp, #200	; 0xc8
  if(initupdate) updateFun();
   d477e:	b10b      	cbz	r3, d4784 <loop+0x10>
   d4780:	f7ff ff46 	bl	d4610 <_Z9updateFunv>
  String mssg = "Iniciar: "+String(iniciar) + " Amarillo:"+String(pill_yellow)+" Azul:"+String(pill_blue)+" Blanco:"+String(pill_white)+" Naranja:"+String(pill_orange)+" %Agua:"+String(water_var)+" #Cafe:"+String(coffee_teaspoons)+" #Azucar:"+String(sugar_teaspoons)+" Batir:"+String(batir_variable)+" Alarm:"+String(reminderAlarm);
   d4784:	4e9d      	ldr	r6, [pc, #628]	; (d49fc <loop+0x288>)

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d4786:	499e      	ldr	r1, [pc, #632]	; (d4a00 <loop+0x28c>)
   d4788:	4f9e      	ldr	r7, [pc, #632]	; (d4a04 <loop+0x290>)
   d478a:	f8df a2c4 	ldr.w	sl, [pc, #708]	; d4a50 <loop+0x2dc>
   d478e:	f8df 92c4 	ldr.w	r9, [pc, #708]	; d4a54 <loop+0x2e0>
   d4792:	f8df 82c4 	ldr.w	r8, [pc, #708]	; d4a58 <loop+0x2e4>
   d4796:	4d9c      	ldr	r5, [pc, #624]	; (d4a08 <loop+0x294>)
   d4798:	a80a      	add	r0, sp, #40	; 0x28
   d479a:	f002 fd4e 	bl	d723a <_ZN6StringC1EPKc>
   d479e:	220a      	movs	r2, #10
   d47a0:	7831      	ldrb	r1, [r6, #0]
   d47a2:	a806      	add	r0, sp, #24
   d47a4:	f002 fd89 	bl	d72ba <_ZN6StringC1Eih>
   d47a8:	a906      	add	r1, sp, #24
   d47aa:	a80a      	add	r0, sp, #40	; 0x28
   d47ac:	f002 fdc9 	bl	d7342 <_ZplRK15StringSumHelperRK6String>
   d47b0:	4996      	ldr	r1, [pc, #600]	; (d4a0c <loop+0x298>)
   d47b2:	f002 fdd2 	bl	d735a <_ZplRK15StringSumHelperPKc>
   d47b6:	4b96      	ldr	r3, [pc, #600]	; (d4a10 <loop+0x29c>)
   d47b8:	220a      	movs	r2, #10
   d47ba:	7819      	ldrb	r1, [r3, #0]
   d47bc:	4604      	mov	r4, r0
   d47be:	a80e      	add	r0, sp, #56	; 0x38
   d47c0:	f002 fd7b 	bl	d72ba <_ZN6StringC1Eih>
   d47c4:	a90e      	add	r1, sp, #56	; 0x38
   d47c6:	4620      	mov	r0, r4
   d47c8:	f002 fdbb 	bl	d7342 <_ZplRK15StringSumHelperRK6String>
   d47cc:	4991      	ldr	r1, [pc, #580]	; (d4a14 <loop+0x2a0>)
   d47ce:	f002 fdc4 	bl	d735a <_ZplRK15StringSumHelperPKc>
   d47d2:	4b91      	ldr	r3, [pc, #580]	; (d4a18 <loop+0x2a4>)
   d47d4:	220a      	movs	r2, #10
   d47d6:	7819      	ldrb	r1, [r3, #0]
   d47d8:	4604      	mov	r4, r0
   d47da:	a812      	add	r0, sp, #72	; 0x48
   d47dc:	f002 fd6d 	bl	d72ba <_ZN6StringC1Eih>
   d47e0:	a912      	add	r1, sp, #72	; 0x48
   d47e2:	4620      	mov	r0, r4
   d47e4:	f002 fdad 	bl	d7342 <_ZplRK15StringSumHelperRK6String>
   d47e8:	498c      	ldr	r1, [pc, #560]	; (d4a1c <loop+0x2a8>)
   d47ea:	f002 fdb6 	bl	d735a <_ZplRK15StringSumHelperPKc>
   d47ee:	4b8c      	ldr	r3, [pc, #560]	; (d4a20 <loop+0x2ac>)
   d47f0:	220a      	movs	r2, #10
   d47f2:	7819      	ldrb	r1, [r3, #0]
   d47f4:	4604      	mov	r4, r0
   d47f6:	a816      	add	r0, sp, #88	; 0x58
   d47f8:	f002 fd5f 	bl	d72ba <_ZN6StringC1Eih>
   d47fc:	a916      	add	r1, sp, #88	; 0x58
   d47fe:	4620      	mov	r0, r4
   d4800:	f002 fd9f 	bl	d7342 <_ZplRK15StringSumHelperRK6String>
   d4804:	4987      	ldr	r1, [pc, #540]	; (d4a24 <loop+0x2b0>)
   d4806:	f002 fda8 	bl	d735a <_ZplRK15StringSumHelperPKc>
   d480a:	4b87      	ldr	r3, [pc, #540]	; (d4a28 <loop+0x2b4>)
   d480c:	220a      	movs	r2, #10
   d480e:	7819      	ldrb	r1, [r3, #0]
   d4810:	4604      	mov	r4, r0
   d4812:	a81a      	add	r0, sp, #104	; 0x68
   d4814:	f002 fd51 	bl	d72ba <_ZN6StringC1Eih>
   d4818:	a91a      	add	r1, sp, #104	; 0x68
   d481a:	4620      	mov	r0, r4
   d481c:	f002 fd91 	bl	d7342 <_ZplRK15StringSumHelperRK6String>
   d4820:	4982      	ldr	r1, [pc, #520]	; (d4a2c <loop+0x2b8>)
   d4822:	f002 fd9a 	bl	d735a <_ZplRK15StringSumHelperPKc>
   d4826:	220a      	movs	r2, #10
   d4828:	4604      	mov	r4, r0
   d482a:	6839      	ldr	r1, [r7, #0]
   d482c:	a81e      	add	r0, sp, #120	; 0x78
   d482e:	f002 fd44 	bl	d72ba <_ZN6StringC1Eih>
   d4832:	a91e      	add	r1, sp, #120	; 0x78
   d4834:	4620      	mov	r0, r4
   d4836:	f002 fd84 	bl	d7342 <_ZplRK15StringSumHelperRK6String>
   d483a:	497d      	ldr	r1, [pc, #500]	; (d4a30 <loop+0x2bc>)
   d483c:	f002 fd8d 	bl	d735a <_ZplRK15StringSumHelperPKc>
   d4840:	220a      	movs	r2, #10
   d4842:	4604      	mov	r4, r0
   d4844:	f8da 1000 	ldr.w	r1, [sl]
   d4848:	a822      	add	r0, sp, #136	; 0x88
   d484a:	f002 fd36 	bl	d72ba <_ZN6StringC1Eih>
   d484e:	a922      	add	r1, sp, #136	; 0x88
   d4850:	4620      	mov	r0, r4
   d4852:	f002 fd76 	bl	d7342 <_ZplRK15StringSumHelperRK6String>
   d4856:	4977      	ldr	r1, [pc, #476]	; (d4a34 <loop+0x2c0>)
   d4858:	f002 fd7f 	bl	d735a <_ZplRK15StringSumHelperPKc>
   d485c:	220a      	movs	r2, #10
   d485e:	4604      	mov	r4, r0
   d4860:	f8d9 1000 	ldr.w	r1, [r9]
   d4864:	a826      	add	r0, sp, #152	; 0x98
   d4866:	f002 fd28 	bl	d72ba <_ZN6StringC1Eih>
   d486a:	a926      	add	r1, sp, #152	; 0x98
   d486c:	4620      	mov	r0, r4
   d486e:	f002 fd68 	bl	d7342 <_ZplRK15StringSumHelperRK6String>
   d4872:	4971      	ldr	r1, [pc, #452]	; (d4a38 <loop+0x2c4>)
   d4874:	f002 fd71 	bl	d735a <_ZplRK15StringSumHelperPKc>
   d4878:	ed98 0a00 	vldr	s0, [r8]
   d487c:	4604      	mov	r4, r0
   d487e:	2106      	movs	r1, #6
   d4880:	a82a      	add	r0, sp, #168	; 0xa8
   d4882:	f002 fd2d 	bl	d72e0 <_ZN6StringC1Efi>
   d4886:	a92a      	add	r1, sp, #168	; 0xa8
   d4888:	4620      	mov	r0, r4
   d488a:	f002 fd5a 	bl	d7342 <_ZplRK15StringSumHelperRK6String>
   d488e:	496b      	ldr	r1, [pc, #428]	; (d4a3c <loop+0x2c8>)
   d4890:	f002 fd63 	bl	d735a <_ZplRK15StringSumHelperPKc>
   d4894:	220a      	movs	r2, #10
   d4896:	7829      	ldrb	r1, [r5, #0]
   d4898:	4604      	mov	r4, r0
   d489a:	a82e      	add	r0, sp, #184	; 0xb8
   d489c:	f002 fd0d 	bl	d72ba <_ZN6StringC1Eih>
   d48a0:	a92e      	add	r1, sp, #184	; 0xb8
   d48a2:	4620      	mov	r0, r4
   d48a4:	f002 fd4d 	bl	d7342 <_ZplRK15StringSumHelperRK6String>
   d48a8:	4601      	mov	r1, r0
   d48aa:	a802      	add	r0, sp, #8
   d48ac:	f002 fce8 	bl	d7280 <_ZN6StringC1ERKS_>
   d48b0:	a82e      	add	r0, sp, #184	; 0xb8
   d48b2:	f002 fc77 	bl	d71a4 <_ZN6StringD1Ev>
   d48b6:	a82a      	add	r0, sp, #168	; 0xa8
   d48b8:	f002 fc74 	bl	d71a4 <_ZN6StringD1Ev>
   d48bc:	a826      	add	r0, sp, #152	; 0x98
   d48be:	f002 fc71 	bl	d71a4 <_ZN6StringD1Ev>
   d48c2:	a822      	add	r0, sp, #136	; 0x88
   d48c4:	f002 fc6e 	bl	d71a4 <_ZN6StringD1Ev>
   d48c8:	a81e      	add	r0, sp, #120	; 0x78
   d48ca:	f002 fc6b 	bl	d71a4 <_ZN6StringD1Ev>
   d48ce:	a81a      	add	r0, sp, #104	; 0x68
   d48d0:	f002 fc68 	bl	d71a4 <_ZN6StringD1Ev>
   d48d4:	a816      	add	r0, sp, #88	; 0x58
   d48d6:	f002 fc65 	bl	d71a4 <_ZN6StringD1Ev>
   d48da:	a812      	add	r0, sp, #72	; 0x48
   d48dc:	f002 fc62 	bl	d71a4 <_ZN6StringD1Ev>
   d48e0:	a80e      	add	r0, sp, #56	; 0x38
   d48e2:	f002 fc5f 	bl	d71a4 <_ZN6StringD1Ev>
   d48e6:	a806      	add	r0, sp, #24
   d48e8:	f002 fc5c 	bl	d71a4 <_ZN6StringD1Ev>
class StringSumHelper : public String
   d48ec:	a80a      	add	r0, sp, #40	; 0x28
   d48ee:	f002 fc59 	bl	d71a4 <_ZN6StringD1Ev>
  Serial.println(mssg);  
   d48f2:	f003 fa55 	bl	d7da0 <_Z16_fetch_usbserialv>
   d48f6:	9902      	ldr	r1, [sp, #8]
   d48f8:	f002 fdd1 	bl	d749e <_ZN5Print7printlnEPKc>
  if(iniciar and !reminderAlarm){
   d48fc:	7833      	ldrb	r3, [r6, #0]
   d48fe:	2b00      	cmp	r3, #0
   d4900:	d062      	beq.n	d49c8 <loop+0x254>
   d4902:	7828      	ldrb	r0, [r5, #0]
   d4904:	b198      	cbz	r0, d492e <loop+0x1ba>
      iniciar=0;
   d4906:	2403      	movs	r4, #3
      analogWrite(AlarmPin, 150);
   d4908:	2196      	movs	r1, #150	; 0x96
   d490a:	2007      	movs	r0, #7
   d490c:	f003 ff93 	bl	d8836 <_Z11analogWritetm>
      delay(600); 
   d4910:	f44f 7016 	mov.w	r0, #600	; 0x258
   d4914:	f002 fdfe 	bl	d7514 <delay>
      analogWrite(AlarmPin, 0);
   d4918:	2100      	movs	r1, #0
   d491a:	2007      	movs	r0, #7
   d491c:	f003 ff8b 	bl	d8836 <_Z11analogWritetm>
      delay(600);
   d4920:	f44f 7016 	mov.w	r0, #600	; 0x258
   d4924:	f002 fdf6 	bl	d7514 <delay>
    for(int i=0;i<3;i++){
   d4928:	3c01      	subs	r4, #1
   d492a:	d1ed      	bne.n	d4908 <loop+0x194>
   d492c:	e04f      	b.n	d49ce <loop+0x25a>
    reminderAlarm=true;
   d492e:	2301      	movs	r3, #1
   d4930:	702b      	strb	r3, [r5, #0]
    switchStatus=digitalRead(SwitchWater);
   d4932:	f003 ff6d 	bl	d8810 <digitalRead>
   d4936:	4b42      	ldr	r3, [pc, #264]	; (d4a40 <loop+0x2cc>)
   d4938:	2800      	cmp	r0, #0
   d493a:	bf14      	ite	ne
   d493c:	2201      	movne	r2, #1
   d493e:	2200      	moveq	r2, #0
   d4940:	701a      	strb	r2, [r3, #0]
    if(switchStatus){
   d4942:	d031      	beq.n	d49a8 <loop+0x234>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d4944:	4b3f      	ldr	r3, [pc, #252]	; (d4a44 <loop+0x2d0>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4946:	4a40      	ldr	r2, [pc, #256]	; (d4a48 <loop+0x2d4>)
   d4948:	781b      	ldrb	r3, [r3, #0]
   d494a:	f88d 3000 	strb.w	r3, [sp]
   d494e:	493f      	ldr	r1, [pc, #252]	; (d4a4c <loop+0x2d8>)
   d4950:	233c      	movs	r3, #60	; 0x3c
   d4952:	a82e      	add	r0, sp, #184	; 0xb8
   d4954:	f002 ffc0 	bl	d78d8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d4958:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
   d495a:	b17c      	cbz	r4, d497c <loop+0x208>
      if (--_M_use_count == 0)
   d495c:	6863      	ldr	r3, [r4, #4]
   d495e:	3b01      	subs	r3, #1
   d4960:	6063      	str	r3, [r4, #4]
   d4962:	b95b      	cbnz	r3, d497c <loop+0x208>
          _M_dispose();
   d4964:	6823      	ldr	r3, [r4, #0]
   d4966:	4620      	mov	r0, r4
   d4968:	689b      	ldr	r3, [r3, #8]
   d496a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d496c:	68a3      	ldr	r3, [r4, #8]
   d496e:	3b01      	subs	r3, #1
   d4970:	60a3      	str	r3, [r4, #8]
   d4972:	b91b      	cbnz	r3, d497c <loop+0x208>
            _M_destroy();
   d4974:	6823      	ldr	r3, [r4, #0]
   d4976:	4620      	mov	r0, r4
   d4978:	68db      	ldr	r3, [r3, #12]
   d497a:	4798      	blx	r3
      water_var=0;
   d497c:	2300      	movs	r3, #0
   d497e:	603b      	str	r3, [r7, #0]
      iniciar=0;
   d4980:	7033      	strb	r3, [r6, #0]
   d4982:	2406      	movs	r4, #6
        analogWrite(AlarmPin, 100);
   d4984:	2164      	movs	r1, #100	; 0x64
   d4986:	2007      	movs	r0, #7
   d4988:	f003 ff55 	bl	d8836 <_Z11analogWritetm>
        delay(300); 
   d498c:	f44f 7096 	mov.w	r0, #300	; 0x12c
   d4990:	f002 fdc0 	bl	d7514 <delay>
        analogWrite(AlarmPin, 0);
   d4994:	2100      	movs	r1, #0
   d4996:	2007      	movs	r0, #7
   d4998:	f003 ff4d 	bl	d8836 <_Z11analogWritetm>
        delay(300);
   d499c:	f44f 7096 	mov.w	r0, #300	; 0x12c
   d49a0:	f002 fdb8 	bl	d7514 <delay>
      for(int i=0;i<6;i++){
   d49a4:	3c01      	subs	r4, #1
   d49a6:	d1ed      	bne.n	d4984 <loop+0x210>
    if(water_var or coffee_teaspoons or sugar_teaspoons) WCSFun();
   d49a8:	f8da 2000 	ldr.w	r2, [sl]
   d49ac:	683b      	ldr	r3, [r7, #0]
   d49ae:	4313      	orrs	r3, r2
   d49b0:	f8d9 2000 	ldr.w	r2, [r9]
   d49b4:	4313      	orrs	r3, r2
   d49b6:	d014      	beq.n	d49e2 <loop+0x26e>
   d49b8:	f7ff fd86 	bl	d44c8 <_Z6WCSFunv>
    PillsFun();
   d49bc:	f7ff fc7a 	bl	d42b4 <_Z8PillsFunv>
    iniciar=false;
   d49c0:	2300      	movs	r3, #0
   d49c2:	7033      	strb	r3, [r6, #0]
    updateFun();
   d49c4:	f7ff fe24 	bl	d4610 <_Z9updateFunv>
  if(reminderAlarm){
   d49c8:	782b      	ldrb	r3, [r5, #0]
   d49ca:	2b00      	cmp	r3, #0
   d49cc:	d19b      	bne.n	d4906 <loop+0x192>
  delay(1000);
   d49ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d49d2:	f002 fd9f 	bl	d7514 <delay>
  String mssg = "Iniciar: "+String(iniciar) + " Amarillo:"+String(pill_yellow)+" Azul:"+String(pill_blue)+" Blanco:"+String(pill_white)+" Naranja:"+String(pill_orange)+" %Agua:"+String(water_var)+" #Cafe:"+String(coffee_teaspoons)+" #Azucar:"+String(sugar_teaspoons)+" Batir:"+String(batir_variable)+" Alarm:"+String(reminderAlarm);
   d49d6:	a802      	add	r0, sp, #8
   d49d8:	f002 fbe4 	bl	d71a4 <_ZN6StringD1Ev>
}
   d49dc:	b032      	add	sp, #200	; 0xc8
   d49de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else  if(batir_variable) batirFun();
   d49e2:	edd8 7a00 	vldr	s15, [r8]
   d49e6:	eef5 7a40 	vcmp.f32	s15, #0.0
   d49ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d49ee:	d0e5      	beq.n	d49bc <loop+0x248>
   d49f0:	f7ff fd2a 	bl	d4448 <_Z8batirFunv>
   d49f4:	e7e2      	b.n	d49bc <loop+0x248>
   d49f6:	bf00      	nop
   d49f8:	2003e280 	.word	0x2003e280
   d49fc:	2003e478 	.word	0x2003e478
   d4a00:	000db8a2 	.word	0x000db8a2
   d4a04:	2003e4a8 	.word	0x2003e4a8
   d4a08:	2003e47d 	.word	0x2003e47d
   d4a0c:	000db8ac 	.word	0x000db8ac
   d4a10:	2003e47c 	.word	0x2003e47c
   d4a14:	000db8b7 	.word	0x000db8b7
   d4a18:	2003e479 	.word	0x2003e479
   d4a1c:	000db8be 	.word	0x000db8be
   d4a20:	2003e47b 	.word	0x2003e47b
   d4a24:	000db8c7 	.word	0x000db8c7
   d4a28:	2003e47a 	.word	0x2003e47a
   d4a2c:	000db8d1 	.word	0x000db8d1
   d4a30:	000db8d9 	.word	0x000db8d9
   d4a34:	000db8e1 	.word	0x000db8e1
   d4a38:	000db8eb 	.word	0x000db8eb
   d4a3c:	000db8f3 	.word	0x000db8f3
   d4a40:	2003e484 	.word	0x2003e484
   d4a44:	2003e46c 	.word	0x2003e46c
   d4a48:	000db8fb 	.word	0x000db8fb
   d4a4c:	000db8fd 	.word	0x000db8fd
   d4a50:	2003e474 	.word	0x2003e474
   d4a54:	2003e480 	.word	0x2003e480
   d4a58:	2003e470 	.word	0x2003e470

000d4a5c <_GLOBAL__sub_I_WEBHOOK_NAME>:
   d4a5c:	b570      	push	{r4, r5, r6, lr}
        val_(val) {
   d4a5e:	4b0e      	ldr	r3, [pc, #56]	; (d4a98 <_GLOBAL__sub_I_WEBHOOK_NAME+0x3c>)
Ubidots ubidots("webhook", UBI_PARTICLE);
   d4a60:	4c0e      	ldr	r4, [pc, #56]	; (d4a9c <_GLOBAL__sub_I_WEBHOOK_NAME+0x40>)
   d4a62:	4e0f      	ldr	r6, [pc, #60]	; (d4aa0 <_GLOBAL__sub_I_WEBHOOK_NAME+0x44>)
   d4a64:	4d0f      	ldr	r5, [pc, #60]	; (d4aa4 <_GLOBAL__sub_I_WEBHOOK_NAME+0x48>)
   d4a66:	4910      	ldr	r1, [pc, #64]	; (d4aa8 <_GLOBAL__sub_I_WEBHOOK_NAME+0x4c>)
   d4a68:	2200      	movs	r2, #0
   d4a6a:	701a      	strb	r2, [r3, #0]
   d4a6c:	4620      	mov	r0, r4
   d4a6e:	2203      	movs	r2, #3
   d4a70:	f000 feb0 	bl	d57d4 <_ZN7UbidotsC1EPc11IotProtocol>
   d4a74:	4620      	mov	r0, r4
Ubidots ubidotsGET("BBFF-scd8n8yDi9om9Vxg650ESuM26GeLQ9",UBI_TCP);
   d4a76:	4c0d      	ldr	r4, [pc, #52]	; (d4aac <_GLOBAL__sub_I_WEBHOOK_NAME+0x50>)
Ubidots ubidots("webhook", UBI_PARTICLE);
   d4a78:	4632      	mov	r2, r6
   d4a7a:	4629      	mov	r1, r5
   d4a7c:	f003 ff42 	bl	d8904 <__aeabi_atexit>
Ubidots ubidotsGET("BBFF-scd8n8yDi9om9Vxg650ESuM26GeLQ9",UBI_TCP);
   d4a80:	490b      	ldr	r1, [pc, #44]	; (d4ab0 <_GLOBAL__sub_I_WEBHOOK_NAME+0x54>)
   d4a82:	2201      	movs	r2, #1
   d4a84:	4620      	mov	r0, r4
   d4a86:	f000 fea5 	bl	d57d4 <_ZN7UbidotsC1EPc11IotProtocol>
   d4a8a:	4632      	mov	r2, r6
   d4a8c:	4629      	mov	r1, r5
   d4a8e:	4620      	mov	r0, r4
   d4a90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
Ubidots ubidotsGET("BBFF-scd8n8yDi9om9Vxg650ESuM26GeLQ9",UBI_TCP);
   d4a94:	f003 bf36 	b.w	d8904 <__aeabi_atexit>
   d4a98:	2003e46c 	.word	0x2003e46c
   d4a9c:	2003e488 	.word	0x2003e488
   d4aa0:	2003e468 	.word	0x2003e468
   d4aa4:	000d57f1 	.word	0x000d57f1
   d4aa8:	000db905 	.word	0x000db905
   d4aac:	2003e494 	.word	0x2003e494
   d4ab0:	000db90d 	.word	0x000db90d

000d4ab4 <_ZN6UbiTCP8setDebugEb>:

/**
 * Makes available debug traces
 */

void UbiTCP::setDebug(bool debug) { _debug = debug; }
   d4ab4:	7501      	strb	r1, [r0, #20]
   d4ab6:	4770      	bx	lr

000d4ab8 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d4ab8:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   d4aba:	6984      	ldr	r4, [r0, #24]
   d4abc:	4b0a      	ldr	r3, [pc, #40]	; (d4ae8 <_ZN9TCPClientD1Ev+0x30>)
   d4abe:	6003      	str	r3, [r0, #0]
   d4ac0:	4605      	mov	r5, r0
   d4ac2:	b17c      	cbz	r4, d4ae4 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   d4ac4:	6863      	ldr	r3, [r4, #4]
   d4ac6:	3b01      	subs	r3, #1
   d4ac8:	6063      	str	r3, [r4, #4]
   d4aca:	b95b      	cbnz	r3, d4ae4 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   d4acc:	6823      	ldr	r3, [r4, #0]
   d4ace:	4620      	mov	r0, r4
   d4ad0:	689b      	ldr	r3, [r3, #8]
   d4ad2:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4ad4:	68a3      	ldr	r3, [r4, #8]
   d4ad6:	3b01      	subs	r3, #1
   d4ad8:	60a3      	str	r3, [r4, #8]
   d4ada:	b91b      	cbnz	r3, d4ae4 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   d4adc:	6823      	ldr	r3, [r4, #0]
   d4ade:	4620      	mov	r0, r4
   d4ae0:	68db      	ldr	r3, [r3, #12]
   d4ae2:	4798      	blx	r3
   d4ae4:	4628      	mov	r0, r5
   d4ae6:	bd38      	pop	{r3, r4, r5, pc}
   d4ae8:	000dbfec 	.word	0x000dbfec

000d4aec <_ZN9TCPClientD0Ev>:
   d4aec:	b510      	push	{r4, lr}
   d4aee:	4604      	mov	r4, r0
   d4af0:	f7ff ffe2 	bl	d4ab8 <_ZN9TCPClientD1Ev>
   d4af4:	4620      	mov	r0, r4
   d4af6:	211c      	movs	r1, #28
   d4af8:	f003 ff09 	bl	d890e <_ZdlPvj>
   d4afc:	4620      	mov	r0, r4
   d4afe:	bd10      	pop	{r4, pc}

000d4b00 <_ZN6UbiTCPC1EPKciS1_S1_>:
UbiTCP::UbiTCP(const char* host, const int port, const char* user_agent, const char* token) {
   d4b00:	b530      	push	{r4, r5, lr}
   d4b02:	4d06      	ldr	r5, [pc, #24]	; (d4b1c <_ZN6UbiTCPC1EPKciS1_S1_+0x1c>)
   d4b04:	6005      	str	r5, [r0, #0]
  _user_agent = user_agent;
   d4b06:	e9c0 1301 	strd	r1, r3, [r0, #4]
UbiTCP::UbiTCP(const char* host, const int port, const char* user_agent, const char* token) {
   d4b0a:	2500      	movs	r5, #0
  _token = token;
   d4b0c:	9b03      	ldr	r3, [sp, #12]
UbiTCP::UbiTCP(const char* host, const int port, const char* user_agent, const char* token) {
   d4b0e:	7505      	strb	r5, [r0, #20]
   d4b10:	f241 3588 	movw	r5, #5000	; 0x1388
  _port = port;
   d4b14:	e9c0 3203 	strd	r3, r2, [r0, #12]
UbiTCP::UbiTCP(const char* host, const int port, const char* user_agent, const char* token) {
   d4b18:	6185      	str	r5, [r0, #24]
}
   d4b1a:	bd30      	pop	{r4, r5, pc}
   d4b1c:	000dba58 	.word	0x000dba58

000d4b20 <_ZN6UbiTCP9reconnectEPKci>:
void UbiTCP::reconnect(const char* host, const int port) {
   d4b20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4b24:	460d      	mov	r5, r1
   d4b26:	4617      	mov	r7, r2
   d4b28:	4680      	mov	r8, r0
  Serial.println("Attempting to reconnect");
   d4b2a:	f003 f939 	bl	d7da0 <_Z16_fetch_usbserialv>
   d4b2e:	491e      	ldr	r1, [pc, #120]	; (d4ba8 <_ZN6UbiTCP9reconnectEPKci+0x88>)
  while (!_client_tcp_ubi.status() && attempts < 5) {
   d4b30:	4e1e      	ldr	r6, [pc, #120]	; (d4bac <_ZN6UbiTCP9reconnectEPKci+0x8c>)
      Serial.print("Trying to connect to ");
   d4b32:	f8df a07c 	ldr.w	sl, [pc, #124]	; d4bb0 <_ZN6UbiTCP9reconnectEPKci+0x90>
      Serial.print(" , attempt number: ");
   d4b36:	f8df b07c 	ldr.w	fp, [pc, #124]	; d4bb4 <_ZN6UbiTCP9reconnectEPKci+0x94>
  Serial.println("Attempting to reconnect");
   d4b3a:	f002 fcb0 	bl	d749e <_ZN5Print7printlnEPKc>
   d4b3e:	2400      	movs	r4, #0
  while (!_client_tcp_ubi.status() && attempts < 5) {
   d4b40:	4630      	mov	r0, r6
   d4b42:	f003 fcca 	bl	d84da <_ZN9TCPClient6statusEv>
   d4b46:	bb60      	cbnz	r0, d4ba2 <_ZN6UbiTCP9reconnectEPKci+0x82>
   d4b48:	2c05      	cmp	r4, #5
   d4b4a:	d02a      	beq.n	d4ba2 <_ZN6UbiTCP9reconnectEPKci+0x82>
    if (_debug) {
   d4b4c:	f898 3014 	ldrb.w	r3, [r8, #20]
   d4b50:	b1c3      	cbz	r3, d4b84 <_ZN6UbiTCP9reconnectEPKci+0x64>
      Serial.print("Trying to connect to ");
   d4b52:	f003 f925 	bl	d7da0 <_Z16_fetch_usbserialv>
   d4b56:	4651      	mov	r1, sl
   d4b58:	f002 fc8e 	bl	d7478 <_ZN5Print5printEPKc>
      Serial.print(host);
   d4b5c:	f003 f920 	bl	d7da0 <_Z16_fetch_usbserialv>
   d4b60:	4629      	mov	r1, r5
   d4b62:	f002 fc89 	bl	d7478 <_ZN5Print5printEPKc>
      Serial.print(" , attempt number: ");
   d4b66:	f003 f91b 	bl	d7da0 <_Z16_fetch_usbserialv>
   d4b6a:	4659      	mov	r1, fp
   d4b6c:	f002 fc84 	bl	d7478 <_ZN5Print5printEPKc>
      Serial.println(attempts);
   d4b70:	f003 f916 	bl	d7da0 <_Z16_fetch_usbserialv>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d4b74:	220a      	movs	r2, #10
   d4b76:	4681      	mov	r9, r0
   d4b78:	4621      	mov	r1, r4
   d4b7a:	f002 fc9a 	bl	d74b2 <_ZN5Print11printNumberEmh>
        n += println();
   d4b7e:	4648      	mov	r0, r9
   d4b80:	f002 fc81 	bl	d7486 <_ZN5Print7printlnEv>
    _client_tcp_ubi.stop();
   d4b84:	4630      	mov	r0, r6
   d4b86:	f003 fc91 	bl	d84ac <_ZN9TCPClient4stopEv>
    _client_tcp_ubi.connect(host, port);
   d4b8a:	2300      	movs	r3, #0
   d4b8c:	b2ba      	uxth	r2, r7
   d4b8e:	4629      	mov	r1, r5
   d4b90:	4630      	mov	r0, r6
   d4b92:	f003 fb2f 	bl	d81f4 <_ZN9TCPClient7connectEPKctm>
    delay(1000);
   d4b96:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4b9a:	f002 fcbb 	bl	d7514 <delay>
   d4b9e:	3401      	adds	r4, #1
  while (!_client_tcp_ubi.status() && attempts < 5) {
   d4ba0:	e7ce      	b.n	d4b40 <_ZN6UbiTCP9reconnectEPKci+0x20>
}
   d4ba2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4ba6:	bf00      	nop
   d4ba8:	000db940 	.word	0x000db940
   d4bac:	2003e4ac 	.word	0x2003e4ac
   d4bb0:	000db958 	.word	0x000db958
   d4bb4:	000db96e 	.word	0x000db96e

000d4bb8 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_>:
void UbiTCP::buildAndSendGetPacket(const char* device_label, const char* variable_labels) {
   d4bb8:	b570      	push	{r4, r5, r6, lr}
   d4bba:	4604      	mov	r4, r0
   d4bbc:	460e      	mov	r6, r1
  _client_tcp_ubi.print(_user_agent);
   d4bbe:	6881      	ldr	r1, [r0, #8]
   d4bc0:	482e      	ldr	r0, [pc, #184]	; (d4c7c <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc4>)
void UbiTCP::buildAndSendGetPacket(const char* device_label, const char* variable_labels) {
   d4bc2:	4615      	mov	r5, r2
  _client_tcp_ubi.print(_user_agent);
   d4bc4:	f002 fc58 	bl	d7478 <_ZN5Print5printEPKc>
  _client_tcp_ubi.print("|LV|");
   d4bc8:	492d      	ldr	r1, [pc, #180]	; (d4c80 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc8>)
   d4bca:	482c      	ldr	r0, [pc, #176]	; (d4c7c <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc4>)
   d4bcc:	f002 fc54 	bl	d7478 <_ZN5Print5printEPKc>
  _client_tcp_ubi.print(_token);
   d4bd0:	68e1      	ldr	r1, [r4, #12]
   d4bd2:	482a      	ldr	r0, [pc, #168]	; (d4c7c <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc4>)
   d4bd4:	f002 fc50 	bl	d7478 <_ZN5Print5printEPKc>
  _client_tcp_ubi.print("|");
   d4bd8:	492a      	ldr	r1, [pc, #168]	; (d4c84 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xcc>)
   d4bda:	4828      	ldr	r0, [pc, #160]	; (d4c7c <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc4>)
   d4bdc:	f002 fc4c 	bl	d7478 <_ZN5Print5printEPKc>
  _client_tcp_ubi.print(device_label);
   d4be0:	4631      	mov	r1, r6
   d4be2:	4826      	ldr	r0, [pc, #152]	; (d4c7c <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc4>)
   d4be4:	f002 fc48 	bl	d7478 <_ZN5Print5printEPKc>
  _client_tcp_ubi.print(":");
   d4be8:	4927      	ldr	r1, [pc, #156]	; (d4c88 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xd0>)
   d4bea:	4824      	ldr	r0, [pc, #144]	; (d4c7c <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc4>)
   d4bec:	f002 fc44 	bl	d7478 <_ZN5Print5printEPKc>
  _client_tcp_ubi.print(variable_labels);
   d4bf0:	4629      	mov	r1, r5
   d4bf2:	4822      	ldr	r0, [pc, #136]	; (d4c7c <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc4>)
   d4bf4:	f002 fc40 	bl	d7478 <_ZN5Print5printEPKc>
  _client_tcp_ubi.print("|end");
   d4bf8:	4924      	ldr	r1, [pc, #144]	; (d4c8c <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xd4>)
   d4bfa:	4820      	ldr	r0, [pc, #128]	; (d4c7c <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc4>)
   d4bfc:	f002 fc3c 	bl	d7478 <_ZN5Print5printEPKc>
  if (_debug) {
   d4c00:	7d23      	ldrb	r3, [r4, #20]
   d4c02:	2b00      	cmp	r3, #0
   d4c04:	d038      	beq.n	d4c78 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc0>
    Serial.println("----");
   d4c06:	f003 f8cb 	bl	d7da0 <_Z16_fetch_usbserialv>
   d4c0a:	4921      	ldr	r1, [pc, #132]	; (d4c90 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xd8>)
   d4c0c:	f002 fc47 	bl	d749e <_ZN5Print7printlnEPKc>
    Serial.println("Payload for request:");
   d4c10:	f003 f8c6 	bl	d7da0 <_Z16_fetch_usbserialv>
   d4c14:	491f      	ldr	r1, [pc, #124]	; (d4c94 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xdc>)
   d4c16:	f002 fc42 	bl	d749e <_ZN5Print7printlnEPKc>
    Serial.print(_user_agent);
   d4c1a:	f003 f8c1 	bl	d7da0 <_Z16_fetch_usbserialv>
   d4c1e:	68a1      	ldr	r1, [r4, #8]
   d4c20:	f002 fc2a 	bl	d7478 <_ZN5Print5printEPKc>
    Serial.print("|LV|");
   d4c24:	f003 f8bc 	bl	d7da0 <_Z16_fetch_usbserialv>
   d4c28:	4915      	ldr	r1, [pc, #84]	; (d4c80 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc8>)
   d4c2a:	f002 fc25 	bl	d7478 <_ZN5Print5printEPKc>
    Serial.print(_token);
   d4c2e:	f003 f8b7 	bl	d7da0 <_Z16_fetch_usbserialv>
   d4c32:	68e1      	ldr	r1, [r4, #12]
   d4c34:	f002 fc20 	bl	d7478 <_ZN5Print5printEPKc>
    Serial.print("|");
   d4c38:	f003 f8b2 	bl	d7da0 <_Z16_fetch_usbserialv>
   d4c3c:	4911      	ldr	r1, [pc, #68]	; (d4c84 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xcc>)
   d4c3e:	f002 fc1b 	bl	d7478 <_ZN5Print5printEPKc>
    Serial.print(device_label);
   d4c42:	f003 f8ad 	bl	d7da0 <_Z16_fetch_usbserialv>
   d4c46:	4631      	mov	r1, r6
   d4c48:	f002 fc16 	bl	d7478 <_ZN5Print5printEPKc>
    Serial.print(":");
   d4c4c:	f003 f8a8 	bl	d7da0 <_Z16_fetch_usbserialv>
   d4c50:	490d      	ldr	r1, [pc, #52]	; (d4c88 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xd0>)
   d4c52:	f002 fc11 	bl	d7478 <_ZN5Print5printEPKc>
    Serial.print(variable_labels);
   d4c56:	f003 f8a3 	bl	d7da0 <_Z16_fetch_usbserialv>
   d4c5a:	4629      	mov	r1, r5
   d4c5c:	f002 fc0c 	bl	d7478 <_ZN5Print5printEPKc>
    Serial.print("|end");
   d4c60:	f003 f89e 	bl	d7da0 <_Z16_fetch_usbserialv>
   d4c64:	4909      	ldr	r1, [pc, #36]	; (d4c8c <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xd4>)
   d4c66:	f002 fc07 	bl	d7478 <_ZN5Print5printEPKc>
    Serial.println("\n----");
   d4c6a:	f003 f899 	bl	d7da0 <_Z16_fetch_usbserialv>
}
   d4c6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Serial.println("\n----");
   d4c72:	4909      	ldr	r1, [pc, #36]	; (d4c98 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xe0>)
   d4c74:	f002 bc13 	b.w	d749e <_ZN5Print7printlnEPKc>
}
   d4c78:	bd70      	pop	{r4, r5, r6, pc}
   d4c7a:	bf00      	nop
   d4c7c:	2003e4ac 	.word	0x2003e4ac
   d4c80:	000db982 	.word	0x000db982
   d4c84:	000db985 	.word	0x000db985
   d4c88:	000db8cf 	.word	0x000db8cf
   d4c8c:	000dbb86 	.word	0x000dbb86
   d4c90:	000db99d 	.word	0x000db99d
   d4c94:	000db987 	.word	0x000db987
   d4c98:	000db99c 	.word	0x000db99c

000d4c9c <_ZN6UbiTCP16waitServerAnswerEv>:
bool UbiTCP::waitServerAnswer() {
   d4c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  while (!_client_tcp_ubi.available() && timeout < _timeout) {
   d4c9e:	4f0e      	ldr	r7, [pc, #56]	; (d4cd8 <_ZN6UbiTCP16waitServerAnswerEv+0x3c>)
bool UbiTCP::waitServerAnswer() {
   d4ca0:	4604      	mov	r4, r0
  int timeout = 0;
   d4ca2:	2600      	movs	r6, #0
  while (!_client_tcp_ubi.available() && timeout < _timeout) {
   d4ca4:	4638      	mov	r0, r7
   d4ca6:	f003 fba7 	bl	d83f8 <_ZN9TCPClient9availableEv>
   d4caa:	4605      	mov	r5, r0
   d4cac:	b990      	cbnz	r0, d4cd4 <_ZN6UbiTCP16waitServerAnswerEv+0x38>
   d4cae:	69a3      	ldr	r3, [r4, #24]
   d4cb0:	42b3      	cmp	r3, r6
   d4cb2:	dd0f      	ble.n	d4cd4 <_ZN6UbiTCP16waitServerAnswerEv+0x38>
    delay(1);
   d4cb4:	2001      	movs	r0, #1
   d4cb6:	f002 fc2d 	bl	d7514 <delay>
    if (timeout > _timeout - 1) {
   d4cba:	69a3      	ldr	r3, [r4, #24]
    timeout++;
   d4cbc:	3601      	adds	r6, #1
    if (timeout > _timeout - 1) {
   d4cbe:	42b3      	cmp	r3, r6
   d4cc0:	dcf0      	bgt.n	d4ca4 <_ZN6UbiTCP16waitServerAnswerEv+0x8>
      if (_debug) {
   d4cc2:	7d20      	ldrb	r0, [r4, #20]
   d4cc4:	b128      	cbz	r0, d4cd2 <_ZN6UbiTCP16waitServerAnswerEv+0x36>
        Serial.println("timeout, could not read any response from the host");
   d4cc6:	f003 f86b 	bl	d7da0 <_Z16_fetch_usbserialv>
   d4cca:	4904      	ldr	r1, [pc, #16]	; (d4cdc <_ZN6UbiTCP16waitServerAnswerEv+0x40>)
   d4ccc:	f002 fbe7 	bl	d749e <_ZN5Print7printlnEPKc>
   d4cd0:	4628      	mov	r0, r5
}
   d4cd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return true;
   d4cd4:	2001      	movs	r0, #1
   d4cd6:	e7fc      	b.n	d4cd2 <_ZN6UbiTCP16waitServerAnswerEv+0x36>
   d4cd8:	2003e4ac 	.word	0x2003e4ac
   d4cdc:	000db9a2 	.word	0x000db9a2

000d4ce0 <_ZN6UbiTCP14parseTCPAnswerEPKcPc>:
float UbiTCP::parseTCPAnswer(const char* request_type, char* response) {
   d4ce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (_debug) {
   d4ce4:	7d03      	ldrb	r3, [r0, #20]
float UbiTCP::parseTCPAnswer(const char* request_type, char* response) {
   d4ce6:	4606      	mov	r6, r0
   d4ce8:	4688      	mov	r8, r1
   d4cea:	4614      	mov	r4, r2
  if (_debug) {
   d4cec:	b14b      	cbz	r3, d4d02 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x22>
    Serial.println("----------");
   d4cee:	f003 f857 	bl	d7da0 <_Z16_fetch_usbserialv>
   d4cf2:	4927      	ldr	r1, [pc, #156]	; (d4d90 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xb0>)
   d4cf4:	f002 fbd3 	bl	d749e <_ZN5Print7printlnEPKc>
    Serial.println("Server's response:");
   d4cf8:	f003 f852 	bl	d7da0 <_Z16_fetch_usbserialv>
   d4cfc:	4925      	ldr	r1, [pc, #148]	; (d4d94 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xb4>)
   d4cfe:	f002 fbce 	bl	d749e <_ZN5Print7printlnEPKc>
  while (_client_tcp_ubi.available()) {
   d4d02:	f8df 90a4 	ldr.w	r9, [pc, #164]	; d4da8 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xc8>
float UbiTCP::parseTCPAnswer(const char* request_type, char* response) {
   d4d06:	2500      	movs	r5, #0
    if (j >= MAX_BUFFER_SIZE - 1) {
   d4d08:	f240 2abb 	movw	sl, #699	; 0x2bb
  while (_client_tcp_ubi.available()) {
   d4d0c:	4648      	mov	r0, r9
   d4d0e:	f003 fb73 	bl	d83f8 <_ZN9TCPClient9availableEv>
   d4d12:	b178      	cbz	r0, d4d34 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x54>
    char c = _client_tcp_ubi.read();
   d4d14:	4648      	mov	r0, r9
   d4d16:	f003 fa28 	bl	d816a <_ZN9TCPClient4readEv>
    if (_debug) {
   d4d1a:	7d33      	ldrb	r3, [r6, #20]
    char c = _client_tcp_ubi.read();
   d4d1c:	b2c7      	uxtb	r7, r0
    if (_debug) {
   d4d1e:	b12b      	cbz	r3, d4d2c <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x4c>
      Serial.write(c);
   d4d20:	f003 f83e 	bl	d7da0 <_Z16_fetch_usbserialv>
   d4d24:	6803      	ldr	r3, [r0, #0]
   d4d26:	4639      	mov	r1, r7
   d4d28:	689b      	ldr	r3, [r3, #8]
   d4d2a:	4798      	blx	r3
    response[j] = c;
   d4d2c:	5567      	strb	r7, [r4, r5]
    j++;
   d4d2e:	3501      	adds	r5, #1
    if (j >= MAX_BUFFER_SIZE - 1) {
   d4d30:	4555      	cmp	r5, sl
   d4d32:	d1eb      	bne.n	d4d0c <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x2c>
  if (_debug) {
   d4d34:	7d33      	ldrb	r3, [r6, #20]
   d4d36:	b123      	cbz	r3, d4d42 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x62>
    Serial.println("\n----------");
   d4d38:	f003 f832 	bl	d7da0 <_Z16_fetch_usbserialv>
   d4d3c:	4916      	ldr	r1, [pc, #88]	; (d4d98 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xb8>)
   d4d3e:	f002 fbae 	bl	d749e <_ZN5Print7printlnEPKc>
  response[j] = '\0';
   d4d42:	2300      	movs	r3, #0
   d4d44:	5563      	strb	r3, [r4, r5]
  if (strcmp(request_type, "POST") == 0) {
   d4d46:	4915      	ldr	r1, [pc, #84]	; (d4d9c <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xbc>)
   d4d48:	4640      	mov	r0, r8
   d4d4a:	f004 fe64 	bl	d9a16 <strcmp>
   d4d4e:	b968      	cbnz	r0, d4d6c <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x8c>
    char* pch = strstr(response, "OK");
   d4d50:	4913      	ldr	r1, [pc, #76]	; (d4da0 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xc0>)
   d4d52:	4620      	mov	r0, r4
   d4d54:	f004 febc 	bl	d9ad0 <strstr>
      result = 1;
   d4d58:	ed9f 0a12 	vldr	s0, [pc, #72]	; d4da4 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xc4>
   d4d5c:	2800      	cmp	r0, #0
   d4d5e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   d4d62:	bf18      	it	ne
   d4d64:	eeb0 0a67 	vmovne.f32	s0, s15
}
   d4d68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  char* pch = strchr(response, '|');
   d4d6c:	217c      	movs	r1, #124	; 0x7c
   d4d6e:	4620      	mov	r0, r4
   d4d70:	f004 fe44 	bl	d99fc <strchr>
  if (pch != NULL) {
   d4d74:	b148      	cbz	r0, d4d8a <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xaa>
    result = atof(pch + 1);
   d4d76:	3001      	adds	r0, #1
   d4d78:	f004 fdf4 	bl	d9964 <atof>
   d4d7c:	ec51 0b10 	vmov	r0, r1, d0
   d4d80:	f004 fc06 	bl	d9590 <__aeabi_d2f>
   d4d84:	ee00 0a10 	vmov	s0, r0
   d4d88:	e7ee      	b.n	d4d68 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x88>
  float result = ERROR_VALUE;
   d4d8a:	ed9f 0a06 	vldr	s0, [pc, #24]	; d4da4 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xc4>
   d4d8e:	e7eb      	b.n	d4d68 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x88>
   d4d90:	000db9e9 	.word	0x000db9e9
   d4d94:	000db9d5 	.word	0x000db9d5
   d4d98:	000db9e8 	.word	0x000db9e8
   d4d9c:	000db9f4 	.word	0x000db9f4
   d4da0:	000db9f9 	.word	0x000db9f9
   d4da4:	cda2425f 	.word	0xcda2425f
   d4da8:	2003e4ac 	.word	0x2003e4ac

000d4dac <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags>:
bool UbiTCP::sendData(const char* device_label, const char* device_name, char* payload, UbiFlags* flags) {
   d4dac:	b570      	push	{r4, r5, r6, lr}
   d4dae:	ed2d 8b02 	vpush	{d8}
   d4db2:	4604      	mov	r4, r0
  _client_tcp_ubi.connect(_host, UBIDOTS_TCP_PORT);
   d4db4:	6841      	ldr	r1, [r0, #4]
   d4db6:	4822      	ldr	r0, [pc, #136]	; (d4e40 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x94>)
   d4db8:	f242 3234 	movw	r2, #9012	; 0x2334
bool UbiTCP::sendData(const char* device_label, const char* device_name, char* payload, UbiFlags* flags) {
   d4dbc:	461d      	mov	r5, r3
  _client_tcp_ubi.connect(_host, UBIDOTS_TCP_PORT);
   d4dbe:	2300      	movs	r3, #0
   d4dc0:	f003 fa18 	bl	d81f4 <_ZN9TCPClient7connectEPKctm>
  reconnect(_host, UBIDOTS_TCP_PORT);
   d4dc4:	4620      	mov	r0, r4
   d4dc6:	6861      	ldr	r1, [r4, #4]
   d4dc8:	f242 3234 	movw	r2, #9012	; 0x2334
   d4dcc:	f7ff fea8 	bl	d4b20 <_ZN6UbiTCP9reconnectEPKci>
  if (_client_tcp_ubi.connected()) {
   d4dd0:	481b      	ldr	r0, [pc, #108]	; (d4e40 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x94>)
   d4dd2:	f003 f92e 	bl	d8032 <_ZN9TCPClient9connectedEv>
   d4dd6:	b348      	cbz	r0, d4e2c <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x80>
    _client_tcp_ubi.print(payload);
   d4dd8:	4629      	mov	r1, r5
   d4dda:	4819      	ldr	r0, [pc, #100]	; (d4e40 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x94>)
   d4ddc:	f002 fb4c 	bl	d7478 <_ZN5Print5printEPKc>
  if (!waitServerAnswer()) {
   d4de0:	4620      	mov	r0, r4
   d4de2:	f7ff ff5b 	bl	d4c9c <_ZN6UbiTCP16waitServerAnswerEv>
   d4de6:	4605      	mov	r5, r0
   d4de8:	b938      	cbnz	r0, d4dfa <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x4e>
    _client_tcp_ubi.stop();
   d4dea:	4815      	ldr	r0, [pc, #84]	; (d4e40 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x94>)
   d4dec:	f003 fb5e 	bl	d84ac <_ZN9TCPClient4stopEv>
    return false;
   d4df0:	2500      	movs	r5, #0
}
   d4df2:	ecbd 8b02 	vpop	{d8}
   d4df6:	4628      	mov	r0, r5
   d4df8:	bd70      	pop	{r4, r5, r6, pc}
  char* response = (char*)malloc(sizeof(char) * 100);
   d4dfa:	2064      	movs	r0, #100	; 0x64
   d4dfc:	f001 fdaa 	bl	d6954 <malloc>
  float value = parseTCPAnswer("POST", response);
   d4e00:	4910      	ldr	r1, [pc, #64]	; (d4e44 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x98>)
   d4e02:	4602      	mov	r2, r0
  char* response = (char*)malloc(sizeof(char) * 100);
   d4e04:	4606      	mov	r6, r0
  float value = parseTCPAnswer("POST", response);
   d4e06:	4620      	mov	r0, r4
   d4e08:	f7ff ff6a 	bl	d4ce0 <_ZN6UbiTCP14parseTCPAnswerEPKcPc>
  free(response);
   d4e0c:	4630      	mov	r0, r6
  float value = parseTCPAnswer("POST", response);
   d4e0e:	eeb0 8a40 	vmov.f32	s16, s0
  free(response);
   d4e12:	f001 fda7 	bl	d6964 <free>
  if (value != ERROR_VALUE) {
   d4e16:	eddf 7a0c 	vldr	s15, [pc, #48]	; d4e48 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x9c>
   d4e1a:	eeb4 8a67 	vcmp.f32	s16, s15
   d4e1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4e22:	d0e2      	beq.n	d4dea <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x3e>
    _client_tcp_ubi.stop();
   d4e24:	4806      	ldr	r0, [pc, #24]	; (d4e40 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x94>)
   d4e26:	f003 fb41 	bl	d84ac <_ZN9TCPClient4stopEv>
    return true;
   d4e2a:	e7e2      	b.n	d4df2 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x46>
    if (_debug) {
   d4e2c:	7d23      	ldrb	r3, [r4, #20]
   d4e2e:	2b00      	cmp	r3, #0
   d4e30:	d0db      	beq.n	d4dea <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x3e>
      Serial.println("Could not connect to the host");
   d4e32:	f002 ffb5 	bl	d7da0 <_Z16_fetch_usbserialv>
   d4e36:	4905      	ldr	r1, [pc, #20]	; (d4e4c <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0xa0>)
   d4e38:	f002 fb31 	bl	d749e <_ZN5Print7printlnEPKc>
   d4e3c:	e7d5      	b.n	d4dea <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x3e>
   d4e3e:	bf00      	nop
   d4e40:	2003e4ac 	.word	0x2003e4ac
   d4e44:	000db9f4 	.word	0x000db9f4
   d4e48:	cda2425f 	.word	0xcda2425f
   d4e4c:	000db9fc 	.word	0x000db9fc

000d4e50 <_ZN6UbiTCP3getEPKcS1_>:
float UbiTCP::get(const char* device_label, const char* variable_label) {
   d4e50:	b570      	push	{r4, r5, r6, lr}
   d4e52:	ed2d 8b02 	vpush	{d8}
   d4e56:	4604      	mov	r4, r0
  _client_tcp_ubi.connect(_host, UBIDOTS_TCP_PORT);
   d4e58:	2300      	movs	r3, #0
float UbiTCP::get(const char* device_label, const char* variable_label) {
   d4e5a:	460d      	mov	r5, r1
   d4e5c:	4616      	mov	r6, r2
  _client_tcp_ubi.connect(_host, UBIDOTS_TCP_PORT);
   d4e5e:	6841      	ldr	r1, [r0, #4]
   d4e60:	481e      	ldr	r0, [pc, #120]	; (d4edc <_ZN6UbiTCP3getEPKcS1_+0x8c>)
   d4e62:	f242 3234 	movw	r2, #9012	; 0x2334
   d4e66:	f003 f9c5 	bl	d81f4 <_ZN9TCPClient7connectEPKctm>
  reconnect(_host, UBIDOTS_TCP_PORT);
   d4e6a:	4620      	mov	r0, r4
   d4e6c:	6861      	ldr	r1, [r4, #4]
   d4e6e:	f242 3234 	movw	r2, #9012	; 0x2334
   d4e72:	f7ff fe55 	bl	d4b20 <_ZN6UbiTCP9reconnectEPKci>
  if (_client_tcp_ubi.connected()) {
   d4e76:	4819      	ldr	r0, [pc, #100]	; (d4edc <_ZN6UbiTCP3getEPKcS1_+0x8c>)
   d4e78:	f003 f8db 	bl	d8032 <_ZN9TCPClient9connectedEv>
   d4e7c:	b328      	cbz	r0, d4eca <_ZN6UbiTCP3getEPKcS1_+0x7a>
    buildAndSendGetPacket(device_label, variable_label);
   d4e7e:	4620      	mov	r0, r4
   d4e80:	4632      	mov	r2, r6
   d4e82:	4629      	mov	r1, r5
   d4e84:	f7ff fe98 	bl	d4bb8 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_>
    if (!waitServerAnswer()) {
   d4e88:	4620      	mov	r0, r4
   d4e8a:	f7ff ff07 	bl	d4c9c <_ZN6UbiTCP16waitServerAnswerEv>
   d4e8e:	b948      	cbnz	r0, d4ea4 <_ZN6UbiTCP3getEPKcS1_+0x54>
      _client_tcp_ubi.stop();
   d4e90:	4812      	ldr	r0, [pc, #72]	; (d4edc <_ZN6UbiTCP3getEPKcS1_+0x8c>)
      return ERROR_VALUE;
   d4e92:	ed9f 8a13 	vldr	s16, [pc, #76]	; d4ee0 <_ZN6UbiTCP3getEPKcS1_+0x90>
      _client_tcp_ubi.stop();
   d4e96:	f003 fb09 	bl	d84ac <_ZN9TCPClient4stopEv>
}
   d4e9a:	eeb0 0a48 	vmov.f32	s0, s16
   d4e9e:	ecbd 8b02 	vpop	{d8}
   d4ea2:	bd70      	pop	{r4, r5, r6, pc}
    char* response = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   d4ea4:	f44f 702f 	mov.w	r0, #700	; 0x2bc
   d4ea8:	f001 fd54 	bl	d6954 <malloc>
    float value = parseTCPAnswer("LV", response);
   d4eac:	490d      	ldr	r1, [pc, #52]	; (d4ee4 <_ZN6UbiTCP3getEPKcS1_+0x94>)
   d4eae:	4602      	mov	r2, r0
    char* response = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   d4eb0:	4605      	mov	r5, r0
    float value = parseTCPAnswer("LV", response);
   d4eb2:	4620      	mov	r0, r4
   d4eb4:	f7ff ff14 	bl	d4ce0 <_ZN6UbiTCP14parseTCPAnswerEPKcPc>
    _client_tcp_ubi.stop();
   d4eb8:	4808      	ldr	r0, [pc, #32]	; (d4edc <_ZN6UbiTCP3getEPKcS1_+0x8c>)
    float value = parseTCPAnswer("LV", response);
   d4eba:	eeb0 8a40 	vmov.f32	s16, s0
    _client_tcp_ubi.stop();
   d4ebe:	f003 faf5 	bl	d84ac <_ZN9TCPClient4stopEv>
    free(response);
   d4ec2:	4628      	mov	r0, r5
   d4ec4:	f001 fd4e 	bl	d6964 <free>
    return value;
   d4ec8:	e7e7      	b.n	d4e9a <_ZN6UbiTCP3getEPKcS1_+0x4a>
  if (_debug) {
   d4eca:	7d23      	ldrb	r3, [r4, #20]
   d4ecc:	2b00      	cmp	r3, #0
   d4ece:	d0df      	beq.n	d4e90 <_ZN6UbiTCP3getEPKcS1_+0x40>
    Serial.println("ERROR could not connect to the server");
   d4ed0:	f002 ff66 	bl	d7da0 <_Z16_fetch_usbserialv>
   d4ed4:	4904      	ldr	r1, [pc, #16]	; (d4ee8 <_ZN6UbiTCP3getEPKcS1_+0x98>)
   d4ed6:	f002 fae2 	bl	d749e <_ZN5Print7printlnEPKc>
   d4eda:	e7d9      	b.n	d4e90 <_ZN6UbiTCP3getEPKcS1_+0x40>
   d4edc:	2003e4ac 	.word	0x2003e4ac
   d4ee0:	cda2425f 	.word	0xcda2425f
   d4ee4:	000dba1a 	.word	0x000dba1a
   d4ee8:	000dba1d 	.word	0x000dba1d

000d4eec <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E>:
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   d4eec:	b570      	push	{r4, r5, r6, lr}
   d4eee:	4605      	mov	r5, r0
   d4ef0:	460c      	mov	r4, r1
    _M_erase(_Link_type __x)
    {
      // Erase without rebalancing.
      while (__x != 0)
   d4ef2:	b14c      	cbz	r4, d4f08 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E+0x1c>
	{
	  _M_erase(_S_right(__x));
   d4ef4:	68e1      	ldr	r1, [r4, #12]
   d4ef6:	4628      	mov	r0, r5
   d4ef8:	f7ff fff8 	bl	d4eec <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E>
	  _Link_type __y = _S_left(__x);
   d4efc:	68a6      	ldr	r6, [r4, #8]
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
   d4efe:	4620      	mov	r0, r4
   d4f00:	f7ff f8cd 	bl	d409e <_ZdlPv>
	  _M_drop_node(__x);
	  __x = __y;
   d4f04:	4634      	mov	r4, r6
      while (__x != 0)
   d4f06:	e7f4      	b.n	d4ef2 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E+0x6>
	}
    }
   d4f08:	bd70      	pop	{r4, r5, r6, pc}

000d4f0a <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_>:
  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    template<typename... _Args>
      pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
			     _Compare, _Alloc>::iterator, bool>
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   d4f0a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d4f0e:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d4f10:	2018      	movs	r0, #24
   d4f12:	4615      	mov	r5, r2
   d4f14:	460f      	mov	r7, r1
   d4f16:	f7ff f8be 	bl	d4096 <_Znwj>
      { return &this->_M_impl._M_header; }
   d4f1a:	f107 0a04 	add.w	sl, r7, #4
			  && _PCCFP<_U1, _U2>::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(pair<_U1, _U2>&& __p)
	: first(std::forward<_U1>(__p.first)),
	  second(std::forward<_U2>(__p.second)) { }
   d4f1e:	686b      	ldr	r3, [r5, #4]
   d4f20:	f8d5 9000 	ldr.w	r9, [r5]
      _Link_type __x = _M_begin();
   d4f24:	68ba      	ldr	r2, [r7, #8]
   d4f26:	6143      	str	r3, [r0, #20]
   d4f28:	4606      	mov	r6, r0
   d4f2a:	f8c0 9010 	str.w	r9, [r0, #16]
      { return &this->_M_impl._M_header; }
   d4f2e:	4655      	mov	r5, sl
      bool __comp = true;
   d4f30:	2301      	movs	r3, #1
      while (__x != 0)
   d4f32:	b152      	cbz	r2, d4f4a <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x40>
	  __x = __comp ? _S_left(__x) : _S_right(__x);
   d4f34:	6913      	ldr	r3, [r2, #16]
   d4f36:	454b      	cmp	r3, r9
   d4f38:	bfcc      	ite	gt
   d4f3a:	6891      	ldrgt	r1, [r2, #8]
   d4f3c:	68d1      	ldrle	r1, [r2, #12]
   d4f3e:	4615      	mov	r5, r2
   d4f40:	bfcc      	ite	gt
   d4f42:	2301      	movgt	r3, #1
   d4f44:	2300      	movle	r3, #0
   d4f46:	460a      	mov	r2, r1
   d4f48:	e7f3      	b.n	d4f32 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x28>
      if (__comp)
   d4f4a:	b1a3      	cbz	r3, d4f76 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x6c>
	  if (__j == begin())
   d4f4c:	68fb      	ldr	r3, [r7, #12]
   d4f4e:	42ab      	cmp	r3, r5
   d4f50:	d023      	beq.n	d4f9a <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x90>
	_M_node = _Rb_tree_decrement(_M_node);
   d4f52:	4628      	mov	r0, r5
   d4f54:	f003 fd33 	bl	d89be <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
   d4f58:	4680      	mov	r8, r0
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
   d4f5a:	f8d8 3010 	ldr.w	r3, [r8, #16]
   d4f5e:	454b      	cmp	r3, r9
   d4f60:	db1b      	blt.n	d4f9a <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x90>
	::operator delete(__p);
   d4f62:	4630      	mov	r0, r6
   d4f64:	f7ff f89b 	bl	d409e <_ZdlPv>
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
   d4f68:	f8c4 8000 	str.w	r8, [r4]
   d4f6c:	2300      	movs	r3, #0
   d4f6e:	7123      	strb	r3, [r4, #4]
	__catch(...)
	  {
	    _M_drop_node(__z);
	    __throw_exception_again;
	  }
      }
   d4f70:	4620      	mov	r0, r4
   d4f72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d4f76:	46a8      	mov	r8, r5
   d4f78:	e7ef      	b.n	d4f5a <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x50>
			    || _M_impl._M_key_compare(_S_key(__z),
   d4f7a:	6928      	ldr	r0, [r5, #16]
   d4f7c:	4581      	cmp	r9, r0
   d4f7e:	bfac      	ite	ge
   d4f80:	2000      	movge	r0, #0
   d4f82:	2001      	movlt	r0, #1
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
   d4f84:	4653      	mov	r3, sl
   d4f86:	462a      	mov	r2, r5
   d4f88:	4631      	mov	r1, r6
   d4f8a:	f003 fd1a 	bl	d89c2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
   d4f8e:	697b      	ldr	r3, [r7, #20]
   d4f90:	6026      	str	r6, [r4, #0]
   d4f92:	3301      	adds	r3, #1
   d4f94:	617b      	str	r3, [r7, #20]
   d4f96:	2301      	movs	r3, #1
   d4f98:	e7e9      	b.n	d4f6e <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x64>
      bool __insert_left = (__x != 0 || __p == _M_end()
   d4f9a:	45aa      	cmp	sl, r5
   d4f9c:	d1ed      	bne.n	d4f7a <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x70>
			    || _M_impl._M_key_compare(_S_key(__z),
   d4f9e:	2001      	movs	r0, #1
   d4fa0:	e7f0      	b.n	d4f84 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x7a>
	...

000d4fa4 <_ZN6UbiTCP19parseMultipleValuesEv>:
tcpMap UbiTCP::parseMultipleValues() {
   d4fa4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   d4fa8:	460d      	mov	r5, r1
   d4faa:	4604      	mov	r4, r0
  char* response = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   d4fac:	f44f 702f 	mov.w	r0, #700	; 0x2bc
   d4fb0:	f001 fcd0 	bl	d6954 <malloc>
  if (_debug) {
   d4fb4:	7d2b      	ldrb	r3, [r5, #20]
  char* response = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   d4fb6:	4607      	mov	r7, r0
  if (_debug) {
   d4fb8:	b14b      	cbz	r3, d4fce <_ZN6UbiTCP19parseMultipleValuesEv+0x2a>
    Serial.println("----------");
   d4fba:	f002 fef1 	bl	d7da0 <_Z16_fetch_usbserialv>
   d4fbe:	493a      	ldr	r1, [pc, #232]	; (d50a8 <_ZN6UbiTCP19parseMultipleValuesEv+0x104>)
   d4fc0:	f002 fa6d 	bl	d749e <_ZN5Print7printlnEPKc>
    Serial.println("Server's response:");
   d4fc4:	f002 feec 	bl	d7da0 <_Z16_fetch_usbserialv>
   d4fc8:	4938      	ldr	r1, [pc, #224]	; (d50ac <_ZN6UbiTCP19parseMultipleValuesEv+0x108>)
   d4fca:	f002 fa68 	bl	d749e <_ZN5Print7printlnEPKc>
  while (_client_tcp_ubi.available()) {
   d4fce:	f8df 90f0 	ldr.w	r9, [pc, #240]	; d50c0 <_ZN6UbiTCP19parseMultipleValuesEv+0x11c>
tcpMap UbiTCP::parseMultipleValues() {
   d4fd2:	2600      	movs	r6, #0
    if (j >= MAX_BUFFER_SIZE - 1) {
   d4fd4:	f240 2abb 	movw	sl, #699	; 0x2bb
  while (_client_tcp_ubi.available()) {
   d4fd8:	4648      	mov	r0, r9
   d4fda:	f003 fa0d 	bl	d83f8 <_ZN9TCPClient9availableEv>
   d4fde:	b188      	cbz	r0, d5004 <_ZN6UbiTCP19parseMultipleValuesEv+0x60>
    char c = _client_tcp_ubi.read();
   d4fe0:	4648      	mov	r0, r9
   d4fe2:	f003 f8c2 	bl	d816a <_ZN9TCPClient4readEv>
    if (_debug) {
   d4fe6:	7d2b      	ldrb	r3, [r5, #20]
    char c = _client_tcp_ubi.read();
   d4fe8:	fa5f f880 	uxtb.w	r8, r0
    if (_debug) {
   d4fec:	b12b      	cbz	r3, d4ffa <_ZN6UbiTCP19parseMultipleValuesEv+0x56>
      Serial.write(c);
   d4fee:	f002 fed7 	bl	d7da0 <_Z16_fetch_usbserialv>
   d4ff2:	6803      	ldr	r3, [r0, #0]
   d4ff4:	4641      	mov	r1, r8
   d4ff6:	689b      	ldr	r3, [r3, #8]
   d4ff8:	4798      	blx	r3
    response[j] = c;
   d4ffa:	f807 8006 	strb.w	r8, [r7, r6]
    j++;
   d4ffe:	3601      	adds	r6, #1
    if (j >= MAX_BUFFER_SIZE - 1) {
   d5000:	4556      	cmp	r6, sl
   d5002:	d1e9      	bne.n	d4fd8 <_ZN6UbiTCP19parseMultipleValuesEv+0x34>
  if (_debug) {
   d5004:	7d2b      	ldrb	r3, [r5, #20]
   d5006:	b123      	cbz	r3, d5012 <_ZN6UbiTCP19parseMultipleValuesEv+0x6e>
    Serial.println("\n----------");
   d5008:	f002 feca 	bl	d7da0 <_Z16_fetch_usbserialv>
   d500c:	4928      	ldr	r1, [pc, #160]	; (d50b0 <_ZN6UbiTCP19parseMultipleValuesEv+0x10c>)
   d500e:	f002 fa46 	bl	d749e <_ZN5Print7printlnEPKc>
  response[j] = '\0';
   d5012:	2500      	movs	r5, #0
	  : _Node_allocator()
   d5014:	1d23      	adds	r3, r4, #4
      _M_header._M_left = &_M_header;
   d5016:	e9c4 5302 	strd	r5, r3, [r4, #8]
      _M_node_count = 0;
   d501a:	e9c4 3504 	strd	r3, r5, [r4, #16]
  char* token = strtok(response, "|");
   d501e:	4925      	ldr	r1, [pc, #148]	; (d50b4 <_ZN6UbiTCP19parseMultipleValuesEv+0x110>)
      _M_header._M_color = _S_red;
   d5020:	7125      	strb	r5, [r4, #4]
   d5022:	4638      	mov	r0, r7
  response[j] = '\0';
   d5024:	55bd      	strb	r5, [r7, r6]
  char* token = strtok(response, "|");
   d5026:	f005 fb9d 	bl	da764 <strtok>
    if (strcmp(token, "OK") == 0) {
   d502a:	f8df 9098 	ldr.w	r9, [pc, #152]	; d50c4 <_ZN6UbiTCP19parseMultipleValuesEv+0x120>
    } else if (strcmp(token, "ERROR") == 0) {
   d502e:	f8df a098 	ldr.w	sl, [pc, #152]	; d50c8 <_ZN6UbiTCP19parseMultipleValuesEv+0x124>
      token = strtok(NULL, "|");
   d5032:	f8df 8080 	ldr.w	r8, [pc, #128]	; d50b4 <_ZN6UbiTCP19parseMultipleValuesEv+0x110>
  char* token = strtok(response, "|");
   d5036:	4606      	mov	r6, r0
  while (token != NULL) {
   d5038:	b37e      	cbz	r6, d509a <_ZN6UbiTCP19parseMultipleValuesEv+0xf6>
    if (strcmp(token, "OK") == 0) {
   d503a:	4649      	mov	r1, r9
   d503c:	4630      	mov	r0, r6
   d503e:	f004 fcea 	bl	d9a16 <strcmp>
   d5042:	bb00      	cbnz	r0, d5086 <_ZN6UbiTCP19parseMultipleValuesEv+0xe2>
      token = strtok(NULL, "|");
   d5044:	4641      	mov	r1, r8
   d5046:	f005 fb8d 	bl	da764 <strtok>
      if (strcmp(token, "null") == 0) {
   d504a:	491b      	ldr	r1, [pc, #108]	; (d50b8 <_ZN6UbiTCP19parseMultipleValuesEv+0x114>)
      token = strtok(NULL, "|");
   d504c:	4606      	mov	r6, r0
      if (strcmp(token, "null") == 0) {
   d504e:	f004 fce2 	bl	d9a16 <strcmp>
   d5052:	b918      	cbnz	r0, d505c <_ZN6UbiTCP19parseMultipleValuesEv+0xb8>
       : first(std::forward<_U1>(__x)), second(__y) { }
   d5054:	4b19      	ldr	r3, [pc, #100]	; (d50bc <_ZN6UbiTCP19parseMultipleValuesEv+0x118>)
   d5056:	9500      	str	r5, [sp, #0]
   d5058:	9301      	str	r3, [sp, #4]
   d505a:	e008      	b.n	d506e <_ZN6UbiTCP19parseMultipleValuesEv+0xca>
        results.insert(std::pair<int, float>(mapKey, atof(token)));
   d505c:	4630      	mov	r0, r6
   d505e:	f004 fc81 	bl	d9964 <atof>
   d5062:	ec51 0b10 	vmov	r0, r1, d0
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
   d5066:	9500      	str	r5, [sp, #0]
   d5068:	f004 fa92 	bl	d9590 <__aeabi_d2f>
   d506c:	9001      	str	r0, [sp, #4]

      template<typename _Pair>
	__enable_if_t<is_constructible<value_type, _Pair>::value,
		      pair<iterator, bool>>
	insert(_Pair&& __x)
	{ return _M_t._M_emplace_unique(std::forward<_Pair>(__x)); }
   d506e:	466a      	mov	r2, sp
   d5070:	4621      	mov	r1, r4
   d5072:	a802      	add	r0, sp, #8
   d5074:	f7ff ff49 	bl	d4f0a <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_>
    token = strtok(NULL, "|");
   d5078:	4641      	mov	r1, r8
   d507a:	2000      	movs	r0, #0
   d507c:	f005 fb72 	bl	da764 <strtok>
    mapKey++;
   d5080:	3501      	adds	r5, #1
    token = strtok(NULL, "|");
   d5082:	4606      	mov	r6, r0
  while (token != NULL) {
   d5084:	e7d8      	b.n	d5038 <_ZN6UbiTCP19parseMultipleValuesEv+0x94>
    } else if (strcmp(token, "ERROR") == 0) {
   d5086:	4651      	mov	r1, sl
   d5088:	4630      	mov	r0, r6
   d508a:	f004 fcc4 	bl	d9a16 <strcmp>
   d508e:	2800      	cmp	r0, #0
   d5090:	d1f2      	bne.n	d5078 <_ZN6UbiTCP19parseMultipleValuesEv+0xd4>
      token = strtok(NULL, "|");
   d5092:	4641      	mov	r1, r8
   d5094:	f005 fb66 	bl	da764 <strtok>
   d5098:	e7dc      	b.n	d5054 <_ZN6UbiTCP19parseMultipleValuesEv+0xb0>
  free(response);
   d509a:	4638      	mov	r0, r7
   d509c:	f001 fc62 	bl	d6964 <free>
}
   d50a0:	4620      	mov	r0, r4
   d50a2:	b004      	add	sp, #16
   d50a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d50a8:	000db9e9 	.word	0x000db9e9
   d50ac:	000db9d5 	.word	0x000db9d5
   d50b0:	000db9e8 	.word	0x000db9e8
   d50b4:	000db985 	.word	0x000db985
   d50b8:	000dba43 	.word	0x000dba43
   d50bc:	cda2425f 	.word	0xcda2425f
   d50c0:	2003e4ac 	.word	0x2003e4ac
   d50c4:	000db9f9 	.word	0x000db9f9
   d50c8:	000dba48 	.word	0x000dba48

000d50cc <_ZN6UbiTCP17getMultipleValuesEPKcS1_>:
tcpMap UbiTCP::getMultipleValues(const char* device_label, const char* variable_labels) {
   d50cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	  : _Node_allocator()
   d50d0:	1d07      	adds	r7, r0, #4
   d50d2:	4698      	mov	r8, r3
      _M_header._M_color = _S_red;
   d50d4:	2300      	movs	r3, #0
      _M_header._M_left = &_M_header;
   d50d6:	e9c0 3702 	strd	r3, r7, [r0, #8]
      _M_node_count = 0;
   d50da:	e9c0 7304 	strd	r7, r3, [r0, #16]
      _M_header._M_color = _S_red;
   d50de:	7103      	strb	r3, [r0, #4]
   d50e0:	460d      	mov	r5, r1
   d50e2:	b088      	sub	sp, #32
  _client_tcp_ubi.connect(_host, UBIDOTS_TCP_PORT);
   d50e4:	6849      	ldr	r1, [r1, #4]
tcpMap UbiTCP::getMultipleValues(const char* device_label, const char* variable_labels) {
   d50e6:	4604      	mov	r4, r0
   d50e8:	4616      	mov	r6, r2
  _client_tcp_ubi.connect(_host, UBIDOTS_TCP_PORT);
   d50ea:	482e      	ldr	r0, [pc, #184]	; (d51a4 <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xd8>)
   d50ec:	f242 3234 	movw	r2, #9012	; 0x2334
   d50f0:	f003 f880 	bl	d81f4 <_ZN9TCPClient7connectEPKctm>
  reconnect(_host, UBIDOTS_TCP_PORT);
   d50f4:	4628      	mov	r0, r5
   d50f6:	6869      	ldr	r1, [r5, #4]
   d50f8:	f242 3234 	movw	r2, #9012	; 0x2334
   d50fc:	f7ff fd10 	bl	d4b20 <_ZN6UbiTCP9reconnectEPKci>
  if (_client_tcp_ubi.connected()) {
   d5100:	4828      	ldr	r0, [pc, #160]	; (d51a4 <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xd8>)
   d5102:	f002 ff96 	bl	d8032 <_ZN9TCPClient9connectedEv>
   d5106:	b310      	cbz	r0, d514e <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0x82>
    buildAndSendGetPacket(device_label, variable_labels);
   d5108:	4631      	mov	r1, r6
   d510a:	4642      	mov	r2, r8
   d510c:	4628      	mov	r0, r5
   d510e:	f7ff fd53 	bl	d4bb8 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_>
    if (!waitServerAnswer()) {
   d5112:	4628      	mov	r0, r5
   d5114:	f7ff fdc2 	bl	d4c9c <_ZN6UbiTCP16waitServerAnswerEv>
   d5118:	4606      	mov	r6, r0
   d511a:	b9c0      	cbnz	r0, d514e <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0x82>
      _client_tcp_ubi.stop();
   d511c:	4821      	ldr	r0, [pc, #132]	; (d51a4 <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xd8>)
       : first(std::forward<_U1>(__x)), second(__y) { }
   d511e:	4f22      	ldr	r7, [pc, #136]	; (d51a8 <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xdc>)
   d5120:	f003 f9c4 	bl	d84ac <_ZN9TCPClient4stopEv>
      char* token = strtok((char*)variable_labels, ",");
   d5124:	4921      	ldr	r1, [pc, #132]	; (d51ac <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xe0>)
   d5126:	4640      	mov	r0, r8
   d5128:	f005 fb1c 	bl	da764 <strtok>
      int mapKey = 0;
   d512c:	4635      	mov	r5, r6
        token = strtok(NULL, ",");
   d512e:	4e1f      	ldr	r6, [pc, #124]	; (d51ac <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xe0>)
      while (token != NULL) {
   d5130:	2800      	cmp	r0, #0
   d5132:	d032      	beq.n	d519a <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xce>
   d5134:	4621      	mov	r1, r4
   d5136:	a802      	add	r0, sp, #8
   d5138:	466a      	mov	r2, sp
   d513a:	9500      	str	r5, [sp, #0]
   d513c:	9701      	str	r7, [sp, #4]
   d513e:	f7ff fee4 	bl	d4f0a <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_>
        token = strtok(NULL, ",");
   d5142:	4631      	mov	r1, r6
   d5144:	2000      	movs	r0, #0
        mapKey++;
   d5146:	3501      	adds	r5, #1
        token = strtok(NULL, ",");
   d5148:	f005 fb0c 	bl	da764 <strtok>
      while (token != NULL) {
   d514c:	e7f0      	b.n	d5130 <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0x64>
  results = parseMultipleValues();
   d514e:	4629      	mov	r1, r5
   d5150:	a802      	add	r0, sp, #8
   d5152:	f7ff ff27 	bl	d4fa4 <_ZN6UbiTCP19parseMultipleValuesEv>
	_M_erase(_M_begin());
   d5156:	68a1      	ldr	r1, [r4, #8]
   d5158:	4620      	mov	r0, r4
   d515a:	f7ff fec7 	bl	d4eec <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E>
      if (__x._M_root() != nullptr)
   d515e:	9a04      	ldr	r2, [sp, #16]
      _M_header._M_parent = 0;
   d5160:	2300      	movs	r3, #0
      _M_header._M_left = &_M_header;
   d5162:	e9c4 3702 	strd	r3, r7, [r4, #8]
      _M_node_count = 0;
   d5166:	e9c4 7304 	strd	r7, r3, [r4, #16]
      if (__x._M_root() != nullptr)
   d516a:	b17a      	cbz	r2, d518c <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xc0>
      _M_header._M_color = __from._M_header._M_color;
   d516c:	f89d 100c 	ldrb.w	r1, [sp, #12]
   d5170:	7121      	strb	r1, [r4, #4]
      _M_header._M_left = __from._M_header._M_left;
   d5172:	9905      	ldr	r1, [sp, #20]
   d5174:	60e1      	str	r1, [r4, #12]
      _M_header._M_right = __from._M_header._M_right;
   d5176:	9906      	ldr	r1, [sp, #24]
      _M_header._M_parent = __from._M_header._M_parent;
   d5178:	60a2      	str	r2, [r4, #8]
      _M_header._M_right = __from._M_header._M_right;
   d517a:	6121      	str	r1, [r4, #16]
      _M_header._M_parent->_M_parent = &_M_header;
   d517c:	6057      	str	r7, [r2, #4]
      _M_node_count = __from._M_node_count;
   d517e:	9a07      	ldr	r2, [sp, #28]
   d5180:	6162      	str	r2, [r4, #20]
      _M_header._M_left = &_M_header;
   d5182:	aa03      	add	r2, sp, #12
      _M_header._M_right = &_M_header;
   d5184:	e9cd 2205 	strd	r2, r2, [sp, #20]
      _M_header._M_parent = 0;
   d5188:	9304      	str	r3, [sp, #16]
      _M_node_count = 0;
   d518a:	9307      	str	r3, [sp, #28]
      { _M_erase(_M_begin()); }
   d518c:	a802      	add	r0, sp, #8
   d518e:	9904      	ldr	r1, [sp, #16]
   d5190:	f7ff feac 	bl	d4eec <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E>
  _client_tcp_ubi.stop();
   d5194:	4803      	ldr	r0, [pc, #12]	; (d51a4 <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xd8>)
   d5196:	f003 f989 	bl	d84ac <_ZN9TCPClient4stopEv>
}
   d519a:	4620      	mov	r0, r4
   d519c:	b008      	add	sp, #32
   d519e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d51a2:	bf00      	nop
   d51a4:	2003e4ac 	.word	0x2003e4ac
   d51a8:	cda2425f 	.word	0xcda2425f
   d51ac:	000dbb3f 	.word	0x000dbb3f

000d51b0 <_GLOBAL__sub_I__ZN6UbiTCPC2EPKciS1_S1_>:
void UbiTCP::setDebug(bool debug) { _debug = debug; }
   d51b0:	b510      	push	{r4, lr}
#include <map>

#include "UbiConstants.h"
#include "UbiProtocol.h"

static TCPClient _client_tcp_ubi;
   d51b2:	4c05      	ldr	r4, [pc, #20]	; (d51c8 <_GLOBAL__sub_I__ZN6UbiTCPC2EPKciS1_S1_+0x18>)
   d51b4:	4620      	mov	r0, r4
   d51b6:	f003 f9c9 	bl	d854c <_ZN9TCPClientC1Ev>
   d51ba:	4620      	mov	r0, r4
   d51bc:	4a03      	ldr	r2, [pc, #12]	; (d51cc <_GLOBAL__sub_I__ZN6UbiTCPC2EPKciS1_S1_+0x1c>)
   d51be:	4904      	ldr	r1, [pc, #16]	; (d51d0 <_GLOBAL__sub_I__ZN6UbiTCPC2EPKciS1_S1_+0x20>)
   d51c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d51c4:	f003 bb9e 	b.w	d8904 <__aeabi_atexit>
   d51c8:	2003e4ac 	.word	0x2003e4ac
   d51cc:	2003e468 	.word	0x2003e468
   d51d0:	000d4ab9 	.word	0x000d4ab9

000d51d4 <_ZN3UDPD1Ev>:



public:
    UDP();
    virtual ~UDP() { stop(); releaseBuffer(); }
   d51d4:	b510      	push	{r4, lr}
   d51d6:	4b06      	ldr	r3, [pc, #24]	; (d51f0 <_ZN3UDPD1Ev+0x1c>)
   d51d8:	6003      	str	r3, [r0, #0]
   d51da:	3364      	adds	r3, #100	; 0x64
   d51dc:	4604      	mov	r4, r0
   d51de:	6103      	str	r3, [r0, #16]
   d51e0:	f001 fd56 	bl	d6c90 <_ZN3UDP4stopEv>
   d51e4:	4620      	mov	r0, r4
   d51e6:	f001 ff19 	bl	d701c <_ZN3UDP13releaseBufferEv>
   d51ea:	4620      	mov	r0, r4
   d51ec:	bd10      	pop	{r4, pc}
   d51ee:	bf00      	nop
   d51f0:	000dbe68 	.word	0x000dbe68

000d51f4 <_ZN3UDPD0Ev>:
   d51f4:	b510      	push	{r4, lr}
   d51f6:	4604      	mov	r4, r0
   d51f8:	f7ff ffec 	bl	d51d4 <_ZN3UDPD1Ev>
   d51fc:	4620      	mov	r0, r4
   d51fe:	214c      	movs	r1, #76	; 0x4c
   d5200:	f003 fb85 	bl	d890e <_ZdlPvj>
   d5204:	4620      	mov	r0, r4
   d5206:	bd10      	pop	{r4, pc}

000d5208 <_ZN18UbiProtocolHandlerD1Ev>:

/**************************************************************************
 * Overloaded destructor
 ***************************************************************************/

UbiProtocolHandler::~UbiProtocolHandler() {
   d5208:	b510      	push	{r4, lr}
   d520a:	4604      	mov	r4, r0
  delete[] _default_device_label;
   d520c:	6800      	ldr	r0, [r0, #0]
   d520e:	b108      	cbz	r0, d5214 <_ZN18UbiProtocolHandlerD1Ev+0xc>
   d5210:	f7fe ff47 	bl	d40a2 <_ZdaPv>

  free(_dots);
   d5214:	68e0      	ldr	r0, [r4, #12]
   d5216:	f001 fba5 	bl	d6964 <free>
  delete _ubiProtocol;
   d521a:	6860      	ldr	r0, [r4, #4]
   d521c:	b110      	cbz	r0, d5224 <_ZN18UbiProtocolHandlerD1Ev+0x1c>
   d521e:	2104      	movs	r1, #4
   d5220:	f003 fb75 	bl	d890e <_ZdlPvj>
}
   d5224:	4620      	mov	r0, r4
   d5226:	bd10      	pop	{r4, pc}

000d5228 <_ZN18UbiProtocolHandler3addEPcfS0_mj>:
 * @arg dot_timestamp_millis [optional] Dot timestamp in millis to add to
 * dot_timestamp_seconds, usefull for datalogger.
 */

void UbiProtocolHandler::add(char* variable_label, float value, char* context, unsigned long dot_timestamp_seconds,
                             unsigned int dot_timestamp_millis) {
   d5228:	b538      	push	{r3, r4, r5, lr}
   d522a:	4604      	mov	r4, r0
  _dirty = true;
   d522c:	2001      	movs	r0, #1
   d522e:	7460      	strb	r0, [r4, #17]
  (_dots + _current_value)->variable_label = variable_label;
   d5230:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d5234:	68e5      	ldr	r5, [r4, #12]
   d5236:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   d523a:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
  (_dots + _current_value)->dot_value = value;
   d523e:	f994 1010 	ldrsb.w	r1, [r4, #16]
   d5242:	68e0      	ldr	r0, [r4, #12]
   d5244:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   d5248:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   d524c:	ed81 0a02 	vstr	s0, [r1, #8]
  (_dots + _current_value)->dot_context = context;
   d5250:	f994 1010 	ldrsb.w	r1, [r4, #16]
   d5254:	68e0      	ldr	r0, [r4, #12]
   d5256:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   d525a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   d525e:	604a      	str	r2, [r1, #4]
  (_dots + _current_value)->dot_timestamp_seconds = dot_timestamp_seconds;
   d5260:	f994 2010 	ldrsb.w	r2, [r4, #16]
   d5264:	68e1      	ldr	r1, [r4, #12]
   d5266:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   d526a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
   d526e:	60d3      	str	r3, [r2, #12]
  (_dots + _current_value)->dot_timestamp_millis = dot_timestamp_millis;
   d5270:	f994 3010 	ldrsb.w	r3, [r4, #16]
   d5274:	68e2      	ldr	r2, [r4, #12]
   d5276:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d527a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   d527e:	9a04      	ldr	r2, [sp, #16]
   d5280:	611a      	str	r2, [r3, #16]
  _current_value++;
   d5282:	7c23      	ldrb	r3, [r4, #16]
   d5284:	3301      	adds	r3, #1
   d5286:	b25b      	sxtb	r3, r3
  if (_current_value > MAX_VALUES) {
   d5288:	2b0a      	cmp	r3, #10
  _current_value++;
   d528a:	7423      	strb	r3, [r4, #16]
  if (_current_value > MAX_VALUES) {
   d528c:	dd08      	ble.n	d52a0 <_ZN18UbiProtocolHandler3addEPcfS0_mj+0x78>
    if (_debug) {
   d528e:	7ca3      	ldrb	r3, [r4, #18]
   d5290:	b123      	cbz	r3, d529c <_ZN18UbiProtocolHandler3addEPcfS0_mj+0x74>
      Serial.println(F("You are sending more than the maximum of consecutive variables"));
   d5292:	f002 fd85 	bl	d7da0 <_Z16_fetch_usbserialv>
   d5296:	4903      	ldr	r1, [pc, #12]	; (d52a4 <_ZN18UbiProtocolHandler3addEPcfS0_mj+0x7c>)
   d5298:	f002 f901 	bl	d749e <_ZN5Print7printlnEPKc>
    }
    _current_value = MAX_VALUES;
   d529c:	230a      	movs	r3, #10
   d529e:	7423      	strb	r3, [r4, #16]
  }
}
   d52a0:	bd38      	pop	{r3, r4, r5, pc}
   d52a2:	bf00      	nop
   d52a4:	000dba68 	.word	0x000dba68

000d52a8 <_ZN18UbiProtocolHandler3getEPKcS1_>:

  _current_value = 0;
  return result;
}

float UbiProtocolHandler::get(const char* device_label, const char* variable_label) {
   d52a8:	b510      	push	{r4, lr}
  if (_iot_protocol == UBI_UDP || _iot_protocol == UBI_PARTICLE) {
   d52aa:	7cc3      	ldrb	r3, [r0, #19]
   d52ac:	3b02      	subs	r3, #2
   d52ae:	2b01      	cmp	r3, #1
   d52b0:	d905      	bls.n	d52be <_ZN18UbiProtocolHandler3getEPKcS1_+0x16>
    return ERROR_VALUE;
  }

  float value = ERROR_VALUE;

  value = _ubiProtocol->get(device_label, variable_label);
   d52b2:	6840      	ldr	r0, [r0, #4]
   d52b4:	6803      	ldr	r3, [r0, #0]

  return value;
}
   d52b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  value = _ubiProtocol->get(device_label, variable_label);
   d52ba:	685b      	ldr	r3, [r3, #4]
   d52bc:	4718      	bx	r3
    Serial.println("ERROR, data retrieval is only supported using TCP or HTTP protocols");
   d52be:	f002 fd6f 	bl	d7da0 <_Z16_fetch_usbserialv>
   d52c2:	4903      	ldr	r1, [pc, #12]	; (d52d0 <_ZN18UbiProtocolHandler3getEPKcS1_+0x28>)
   d52c4:	f002 f8eb 	bl	d749e <_ZN5Print7printlnEPKc>
}
   d52c8:	ed9f 0a02 	vldr	s0, [pc, #8]	; d52d4 <_ZN18UbiProtocolHandler3getEPKcS1_+0x2c>
   d52cc:	bd10      	pop	{r4, pc}
   d52ce:	bf00      	nop
   d52d0:	000dbaa7 	.word	0x000dbaa7
   d52d4:	cda2425f 	.word	0xcda2425f

000d52d8 <_ZN18UbiProtocolHandler12_floatToCharEPcf>:
 * Stores the float type value into the char array input
 * @str_value [Mandatory] char payload pointer to store the value.
 * @value [Mandatory] Float value to convert
 */

void UbiProtocolHandler::_floatToChar(char* str_value, float value) {
   d52d8:	b510      	push	{r4, lr}
   d52da:	ee10 0a10 	vmov	r0, s0
   d52de:	b086      	sub	sp, #24
   d52e0:	460c      	mov	r4, r1
  char temp_arr[20];
  sprintf(temp_arr, "%17g", value);
   d52e2:	f003 fe43 	bl	d8f6c <__aeabi_f2d>
   d52e6:	4602      	mov	r2, r0
   d52e8:	460b      	mov	r3, r1
   d52ea:	a801      	add	r0, sp, #4
   d52ec:	490a      	ldr	r1, [pc, #40]	; (d5318 <_ZN18UbiProtocolHandler12_floatToCharEPcf+0x40>)
   d52ee:	f001 fb49 	bl	d6984 <sprintf>
  uint8_t j = 0;
  uint8_t k = 0;
  while (j < 20) {
   d52f2:	a801      	add	r0, sp, #4
  sprintf(temp_arr, "%17g", value);
   d52f4:	2214      	movs	r2, #20
  uint8_t k = 0;
   d52f6:	2300      	movs	r3, #0
    if (temp_arr[j] != ' ') {
   d52f8:	f810 1b01 	ldrb.w	r1, [r0], #1
   d52fc:	2920      	cmp	r1, #32
   d52fe:	d006      	beq.n	d530e <_ZN18UbiProtocolHandler12_floatToCharEPcf+0x36>
      str_value[k] = temp_arr[j];
   d5300:	54e1      	strb	r1, [r4, r3]
      k++;
   d5302:	3301      	adds	r3, #1
   d5304:	b2db      	uxtb	r3, r3
    }
    if (temp_arr[j] == '\0') {
   d5306:	b911      	cbnz	r1, d530e <_ZN18UbiProtocolHandler12_floatToCharEPcf+0x36>
      str_value[k] = temp_arr[j];
   d5308:	54e1      	strb	r1, [r4, r3]
      break;
    }
    j++;
  }
}
   d530a:	b006      	add	sp, #24
   d530c:	bd10      	pop	{r4, pc}
  while (j < 20) {
   d530e:	3a01      	subs	r2, #1
   d5310:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
   d5314:	d1f0      	bne.n	d52f8 <_ZN18UbiProtocolHandler12_floatToCharEPcf+0x20>
   d5316:	e7f8      	b.n	d530a <_ZN18UbiProtocolHandler12_floatToCharEPcf+0x32>
   d5318:	000dbaeb 	.word	0x000dbaeb

000d531c <_ZN18UbiProtocolHandler16buildHttpPayloadEPc>:
void UbiProtocolHandler::buildHttpPayload(char* payload) {
   d531c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5320:	460c      	mov	r4, r1
   d5322:	b089      	sub	sp, #36	; 0x24
  sprintf(payload, "{");
   d5324:	494c      	ldr	r1, [pc, #304]	; (d5458 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x13c>)
    sprintf(payload, "%s\"%s\":{\"value\":%s", payload, (_dots + i)->variable_label, str_value);
   d5326:	f8df 8154 	ldr.w	r8, [pc, #340]	; d547c <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x160>
      sprintf(payload, "%s,\"timestamp\":%lu", payload, (_dots + i)->dot_timestamp_seconds);
   d532a:	f8df 9154 	ldr.w	r9, [pc, #340]	; d5480 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x164>
        sprintf(payload, "%s000", payload);
   d532e:	f8df a154 	ldr.w	sl, [pc, #340]	; d5484 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x168>
void UbiProtocolHandler::buildHttpPayload(char* payload) {
   d5332:	4605      	mov	r5, r0
  sprintf(payload, "{");
   d5334:	4620      	mov	r0, r4
   d5336:	f004 fb78 	bl	d9a2a <strcpy>
  for (uint8_t i = 0; i < _current_value;) {
   d533a:	2600      	movs	r6, #0
   d533c:	f995 3010 	ldrsb.w	r3, [r5, #16]
   d5340:	429e      	cmp	r6, r3
   d5342:	da6a      	bge.n	d541a <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xfe>
    _floatToChar(str_value, (_dots + i)->dot_value);
   d5344:	68eb      	ldr	r3, [r5, #12]
   d5346:	eb06 0b86 	add.w	fp, r6, r6, lsl #2
   d534a:	eb03 038b 	add.w	r3, r3, fp, lsl #2
   d534e:	ed93 0a02 	vldr	s0, [r3, #8]
   d5352:	a903      	add	r1, sp, #12
   d5354:	4628      	mov	r0, r5
   d5356:	f7ff ffbf 	bl	d52d8 <_ZN18UbiProtocolHandler12_floatToCharEPcf>
    sprintf(payload, "%s\"%s\":{\"value\":%s", payload, (_dots + i)->variable_label, str_value);
   d535a:	68eb      	ldr	r3, [r5, #12]
   d535c:	a903      	add	r1, sp, #12
   d535e:	9100      	str	r1, [sp, #0]
   d5360:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
   d5364:	4622      	mov	r2, r4
   d5366:	4641      	mov	r1, r8
   d5368:	4620      	mov	r0, r4
   d536a:	f001 fb0b 	bl	d6984 <sprintf>
    if ((_dots + i)->dot_timestamp_seconds != NULL) {
   d536e:	68eb      	ldr	r3, [r5, #12]
    _floatToChar(str_value, (_dots + i)->dot_value);
   d5370:	ea4f 078b 	mov.w	r7, fp, lsl #2
    if ((_dots + i)->dot_timestamp_seconds != NULL) {
   d5374:	443b      	add	r3, r7
   d5376:	68db      	ldr	r3, [r3, #12]
   d5378:	b343      	cbz	r3, d53cc <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xb0>
      sprintf(payload, "%s,\"timestamp\":%lu", payload, (_dots + i)->dot_timestamp_seconds);
   d537a:	4622      	mov	r2, r4
   d537c:	4649      	mov	r1, r9
   d537e:	4620      	mov	r0, r4
   d5380:	f001 fb00 	bl	d6984 <sprintf>
      if ((_dots + i)->dot_timestamp_millis != NULL) {
   d5384:	68eb      	ldr	r3, [r5, #12]
   d5386:	443b      	add	r3, r7
   d5388:	691b      	ldr	r3, [r3, #16]
   d538a:	2b00      	cmp	r3, #0
   d538c:	d038      	beq.n	d5400 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xe4>
        uint8_t dec = (timestamp_millis / 10) % 10;
   d538e:	200a      	movs	r0, #10
   d5390:	fb93 f1f0 	sdiv	r1, r3, r0
   d5394:	fb91 fcf0 	sdiv	ip, r1, r0
   d5398:	fb00 1c1c 	mls	ip, r0, ip, r1
        uint8_t units = timestamp_millis % 10;
   d539c:	fb00 3111 	mls	r1, r0, r1, r3
        sprintf(milliseconds, "%d%d%d", hund, dec, units);
   d53a0:	b2c9      	uxtb	r1, r1
        uint8_t hund = (timestamp_millis / 100) % 10;
   d53a2:	2264      	movs	r2, #100	; 0x64
   d53a4:	fb93 f2f2 	sdiv	r2, r3, r2
   d53a8:	fb92 fef0 	sdiv	lr, r2, r0
   d53ac:	fb00 221e 	mls	r2, r0, lr, r2
        sprintf(milliseconds, "%d%d%d", hund, dec, units);
   d53b0:	9100      	str	r1, [sp, #0]
   d53b2:	fa5f f38c 	uxtb.w	r3, ip
   d53b6:	4929      	ldr	r1, [pc, #164]	; (d545c <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x140>)
   d53b8:	b2d2      	uxtb	r2, r2
   d53ba:	a802      	add	r0, sp, #8
   d53bc:	f001 fae2 	bl	d6984 <sprintf>
        sprintf(payload, "%s%s", payload, milliseconds);
   d53c0:	4927      	ldr	r1, [pc, #156]	; (d5460 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x144>)
   d53c2:	ab02      	add	r3, sp, #8
   d53c4:	4622      	mov	r2, r4
   d53c6:	4620      	mov	r0, r4
   d53c8:	f001 fadc 	bl	d6984 <sprintf>
    if ((_dots + i)->dot_context != NULL) {
   d53cc:	68eb      	ldr	r3, [r5, #12]
   d53ce:	441f      	add	r7, r3
   d53d0:	687b      	ldr	r3, [r7, #4]
   d53d2:	b123      	cbz	r3, d53de <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xc2>
      sprintf(payload, "%s,\"context\": {%s}", payload, (_dots + i)->dot_context);
   d53d4:	4923      	ldr	r1, [pc, #140]	; (d5464 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x148>)
   d53d6:	4622      	mov	r2, r4
   d53d8:	4620      	mov	r0, r4
   d53da:	f001 fad3 	bl	d6984 <sprintf>
    sprintf(payload, "%s}", payload);
   d53de:	4622      	mov	r2, r4
   d53e0:	4921      	ldr	r1, [pc, #132]	; (d5468 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x14c>)
   d53e2:	4620      	mov	r0, r4
   d53e4:	f001 face 	bl	d6984 <sprintf>
    i++;
   d53e8:	3601      	adds	r6, #1
    if (i < _current_value) {
   d53ea:	f995 3010 	ldrsb.w	r3, [r5, #16]
    i++;
   d53ee:	b2f6      	uxtb	r6, r6
    if (i < _current_value) {
   d53f0:	429e      	cmp	r6, r3
      sprintf(payload, "%s,", payload);
   d53f2:	4622      	mov	r2, r4
    if (i < _current_value) {
   d53f4:	da0a      	bge.n	d540c <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xf0>
      sprintf(payload, "%s,", payload);
   d53f6:	491d      	ldr	r1, [pc, #116]	; (d546c <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x150>)
   d53f8:	4620      	mov	r0, r4
   d53fa:	f001 fac3 	bl	d6984 <sprintf>
   d53fe:	e79d      	b.n	d533c <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x20>
        sprintf(payload, "%s000", payload);
   d5400:	4622      	mov	r2, r4
   d5402:	4651      	mov	r1, sl
   d5404:	4620      	mov	r0, r4
   d5406:	f001 fabd 	bl	d6984 <sprintf>
   d540a:	e7df      	b.n	d53cc <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xb0>
      sprintf(payload, "%s}", payload);
   d540c:	4916      	ldr	r1, [pc, #88]	; (d5468 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x14c>)
   d540e:	4620      	mov	r0, r4
   d5410:	f001 fab8 	bl	d6984 <sprintf>
      _current_value = 0;
   d5414:	2300      	movs	r3, #0
   d5416:	742b      	strb	r3, [r5, #16]
  for (uint8_t i = 0; i < _current_value;) {
   d5418:	e790      	b.n	d533c <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x20>
  if (_debug) {
   d541a:	7cab      	ldrb	r3, [r5, #18]
   d541c:	b1c3      	cbz	r3, d5450 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x134>
    Serial.println("----------");
   d541e:	f002 fcbf 	bl	d7da0 <_Z16_fetch_usbserialv>
   d5422:	4913      	ldr	r1, [pc, #76]	; (d5470 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x154>)
   d5424:	f002 f83b 	bl	d749e <_ZN5Print7printlnEPKc>
    Serial.println("payload:");
   d5428:	f002 fcba 	bl	d7da0 <_Z16_fetch_usbserialv>
   d542c:	4911      	ldr	r1, [pc, #68]	; (d5474 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x158>)
   d542e:	f002 f836 	bl	d749e <_ZN5Print7printlnEPKc>
    Serial.println(payload);
   d5432:	f002 fcb5 	bl	d7da0 <_Z16_fetch_usbserialv>
   d5436:	4621      	mov	r1, r4
   d5438:	f002 f831 	bl	d749e <_ZN5Print7printlnEPKc>
    Serial.println("----------");
   d543c:	f002 fcb0 	bl	d7da0 <_Z16_fetch_usbserialv>
   d5440:	490b      	ldr	r1, [pc, #44]	; (d5470 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x154>)
   d5442:	f002 f82c 	bl	d749e <_ZN5Print7printlnEPKc>
    Serial.println("");
   d5446:	f002 fcab 	bl	d7da0 <_Z16_fetch_usbserialv>
   d544a:	490b      	ldr	r1, [pc, #44]	; (d5478 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x15c>)
   d544c:	f002 f827 	bl	d749e <_ZN5Print7printlnEPKc>
}
   d5450:	b009      	add	sp, #36	; 0x24
   d5452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5456:	bf00      	nop
   d5458:	000dbaf0 	.word	0x000dbaf0
   d545c:	000dbb18 	.word	0x000dbb18
   d5460:	000dbb1f 	.word	0x000dbb1f
   d5464:	000dbb2a 	.word	0x000dbb2a
   d5468:	000dbb39 	.word	0x000dbb39
   d546c:	000dbb3d 	.word	0x000dbb3d
   d5470:	000db9e9 	.word	0x000db9e9
   d5474:	000dbb41 	.word	0x000dbb41
   d5478:	000dbd11 	.word	0x000dbd11
   d547c:	000dbaf2 	.word	0x000dbaf2
   d5480:	000dbb05 	.word	0x000dbb05
   d5484:	000dbb24 	.word	0x000dbb24

000d5488 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_>:
void UbiProtocolHandler::buildTcpPayload(char* payload, const char* device_label, const char* device_name) {
   d5488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d548c:	460c      	mov	r4, r1
   d548e:	4605      	mov	r5, r0
   d5490:	b089      	sub	sp, #36	; 0x24
  sprintf(payload, "");
   d5492:	4952      	ldr	r1, [pc, #328]	; (d55dc <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x154>)
      sprintf(payload, "%s$%s", payload, (_dots + i)->dot_context);
   d5494:	f8df 8174 	ldr.w	r8, [pc, #372]	; d560c <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x184>
      sprintf(payload, "%s@%lu", payload, (_dots + i)->dot_timestamp_seconds);
   d5498:	f8df 9174 	ldr.w	r9, [pc, #372]	; d5610 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x188>
  sprintf(payload, "");
   d549c:	4620      	mov	r0, r4
void UbiProtocolHandler::buildTcpPayload(char* payload, const char* device_label, const char* device_name) {
   d549e:	4616      	mov	r6, r2
   d54a0:	461f      	mov	r7, r3
  sprintf(payload, "");
   d54a2:	f004 fac2 	bl	d9a2a <strcpy>
  sprintf(payload, "%s|POST|%s|", USER_AGENT, _token);
   d54a6:	68ab      	ldr	r3, [r5, #8]
   d54a8:	4a4d      	ldr	r2, [pc, #308]	; (d55e0 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x158>)
   d54aa:	494e      	ldr	r1, [pc, #312]	; (d55e4 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x15c>)
   d54ac:	4620      	mov	r0, r4
   d54ae:	f001 fa69 	bl	d6984 <sprintf>
  sprintf(payload, "%s%s:%s", payload, device_label, device_name);
   d54b2:	4633      	mov	r3, r6
   d54b4:	494c      	ldr	r1, [pc, #304]	; (d55e8 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x160>)
   d54b6:	9700      	str	r7, [sp, #0]
   d54b8:	4622      	mov	r2, r4
   d54ba:	4620      	mov	r0, r4
   d54bc:	f001 fa62 	bl	d6984 <sprintf>
  sprintf(payload, "%s=>", payload);
   d54c0:	494a      	ldr	r1, [pc, #296]	; (d55ec <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x164>)
    sprintf(payload, "%s%s:%s", payload, (_dots + i)->variable_label, str_value);
   d54c2:	4f49      	ldr	r7, [pc, #292]	; (d55e8 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x160>)
  sprintf(payload, "%s=>", payload);
   d54c4:	4622      	mov	r2, r4
   d54c6:	4620      	mov	r0, r4
   d54c8:	f001 fa5c 	bl	d6984 <sprintf>
  for (uint8_t i = 0; i < _current_value;) {
   d54cc:	2600      	movs	r6, #0
   d54ce:	f995 3010 	ldrsb.w	r3, [r5, #16]
   d54d2:	429e      	cmp	r6, r3
   d54d4:	da64      	bge.n	d55a0 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x118>
    _floatToChar(str_value, (_dots + i)->dot_value);
   d54d6:	68eb      	ldr	r3, [r5, #12]
   d54d8:	eb06 0b86 	add.w	fp, r6, r6, lsl #2
   d54dc:	eb03 038b 	add.w	r3, r3, fp, lsl #2
   d54e0:	ed93 0a02 	vldr	s0, [r3, #8]
   d54e4:	a903      	add	r1, sp, #12
   d54e6:	4628      	mov	r0, r5
   d54e8:	f7ff fef6 	bl	d52d8 <_ZN18UbiProtocolHandler12_floatToCharEPcf>
    sprintf(payload, "%s%s:%s", payload, (_dots + i)->variable_label, str_value);
   d54ec:	68eb      	ldr	r3, [r5, #12]
   d54ee:	a903      	add	r1, sp, #12
   d54f0:	9100      	str	r1, [sp, #0]
   d54f2:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
   d54f6:	4622      	mov	r2, r4
   d54f8:	4639      	mov	r1, r7
   d54fa:	4620      	mov	r0, r4
   d54fc:	f001 fa42 	bl	d6984 <sprintf>
    if ((_dots + i)->dot_context != NULL) {
   d5500:	68eb      	ldr	r3, [r5, #12]
    _floatToChar(str_value, (_dots + i)->dot_value);
   d5502:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
    if ((_dots + i)->dot_context != NULL) {
   d5506:	4453      	add	r3, sl
   d5508:	685b      	ldr	r3, [r3, #4]
   d550a:	b123      	cbz	r3, d5516 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x8e>
      sprintf(payload, "%s$%s", payload, (_dots + i)->dot_context);
   d550c:	4622      	mov	r2, r4
   d550e:	4641      	mov	r1, r8
   d5510:	4620      	mov	r0, r4
   d5512:	f001 fa37 	bl	d6984 <sprintf>
    if ((_dots + i)->dot_timestamp_seconds != NULL) {
   d5516:	68eb      	ldr	r3, [r5, #12]
   d5518:	4453      	add	r3, sl
   d551a:	68db      	ldr	r3, [r3, #12]
   d551c:	b33b      	cbz	r3, d556e <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0xe6>
      sprintf(payload, "%s@%lu", payload, (_dots + i)->dot_timestamp_seconds);
   d551e:	4622      	mov	r2, r4
   d5520:	4649      	mov	r1, r9
   d5522:	4620      	mov	r0, r4
   d5524:	f001 fa2e 	bl	d6984 <sprintf>
      if ((_dots + i)->dot_timestamp_millis != NULL) {
   d5528:	68eb      	ldr	r3, [r5, #12]
   d552a:	4453      	add	r3, sl
   d552c:	691b      	ldr	r3, [r3, #16]
   d552e:	b353      	cbz	r3, d5586 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0xfe>
        uint8_t dec = (timestamp_millis / 10) % 10;
   d5530:	200a      	movs	r0, #10
   d5532:	fb93 f1f0 	sdiv	r1, r3, r0
   d5536:	fb91 fcf0 	sdiv	ip, r1, r0
   d553a:	fb00 1c1c 	mls	ip, r0, ip, r1
        uint8_t units = timestamp_millis % 10;
   d553e:	fb00 3111 	mls	r1, r0, r1, r3
        sprintf(milliseconds, "%d%d%d", hund, dec, units);
   d5542:	b2c9      	uxtb	r1, r1
        uint8_t hund = (timestamp_millis / 100) % 10;
   d5544:	2264      	movs	r2, #100	; 0x64
   d5546:	fb93 f2f2 	sdiv	r2, r3, r2
   d554a:	fb92 fef0 	sdiv	lr, r2, r0
   d554e:	fb00 221e 	mls	r2, r0, lr, r2
        sprintf(milliseconds, "%d%d%d", hund, dec, units);
   d5552:	9100      	str	r1, [sp, #0]
   d5554:	fa5f f38c 	uxtb.w	r3, ip
   d5558:	4925      	ldr	r1, [pc, #148]	; (d55f0 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x168>)
   d555a:	b2d2      	uxtb	r2, r2
   d555c:	a802      	add	r0, sp, #8
   d555e:	f001 fa11 	bl	d6984 <sprintf>
        sprintf(payload, "%s%s", payload, milliseconds);
   d5562:	4924      	ldr	r1, [pc, #144]	; (d55f4 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x16c>)
   d5564:	ab02      	add	r3, sp, #8
   d5566:	4622      	mov	r2, r4
   d5568:	4620      	mov	r0, r4
   d556a:	f001 fa0b 	bl	d6984 <sprintf>
    if (i < _current_value) {
   d556e:	f995 3010 	ldrsb.w	r3, [r5, #16]
    i++;
   d5572:	3601      	adds	r6, #1
   d5574:	b2f6      	uxtb	r6, r6
    if (i < _current_value) {
   d5576:	429e      	cmp	r6, r3
      sprintf(payload, "%s,", payload);
   d5578:	4622      	mov	r2, r4
    if (i < _current_value) {
   d557a:	da0a      	bge.n	d5592 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x10a>
      sprintf(payload, "%s,", payload);
   d557c:	491e      	ldr	r1, [pc, #120]	; (d55f8 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x170>)
   d557e:	4620      	mov	r0, r4
   d5580:	f001 fa00 	bl	d6984 <sprintf>
   d5584:	e7a3      	b.n	d54ce <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x46>
        sprintf(payload, "%s000", payload);
   d5586:	491d      	ldr	r1, [pc, #116]	; (d55fc <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x174>)
   d5588:	4622      	mov	r2, r4
   d558a:	4620      	mov	r0, r4
   d558c:	f001 f9fa 	bl	d6984 <sprintf>
   d5590:	e7ed      	b.n	d556e <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0xe6>
      sprintf(payload, "%s|end", payload);
   d5592:	491b      	ldr	r1, [pc, #108]	; (d5600 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x178>)
   d5594:	4620      	mov	r0, r4
   d5596:	f001 f9f5 	bl	d6984 <sprintf>
      _current_value = 0;
   d559a:	2300      	movs	r3, #0
   d559c:	742b      	strb	r3, [r5, #16]
  for (uint8_t i = 0; i < _current_value;) {
   d559e:	e796      	b.n	d54ce <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x46>
  if (_debug) {
   d55a0:	7cab      	ldrb	r3, [r5, #18]
   d55a2:	b1c3      	cbz	r3, d55d6 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x14e>
    Serial.println("----------");
   d55a4:	f002 fbfc 	bl	d7da0 <_Z16_fetch_usbserialv>
   d55a8:	4916      	ldr	r1, [pc, #88]	; (d5604 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x17c>)
   d55aa:	f001 ff78 	bl	d749e <_ZN5Print7printlnEPKc>
    Serial.println("payload:");
   d55ae:	f002 fbf7 	bl	d7da0 <_Z16_fetch_usbserialv>
   d55b2:	4915      	ldr	r1, [pc, #84]	; (d5608 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x180>)
   d55b4:	f001 ff73 	bl	d749e <_ZN5Print7printlnEPKc>
    Serial.println(payload);
   d55b8:	f002 fbf2 	bl	d7da0 <_Z16_fetch_usbserialv>
   d55bc:	4621      	mov	r1, r4
   d55be:	f001 ff6e 	bl	d749e <_ZN5Print7printlnEPKc>
    Serial.println("----------");
   d55c2:	f002 fbed 	bl	d7da0 <_Z16_fetch_usbserialv>
   d55c6:	490f      	ldr	r1, [pc, #60]	; (d5604 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x17c>)
   d55c8:	f001 ff69 	bl	d749e <_ZN5Print7printlnEPKc>
    Serial.println("");
   d55cc:	f002 fbe8 	bl	d7da0 <_Z16_fetch_usbserialv>
   d55d0:	4902      	ldr	r1, [pc, #8]	; (d55dc <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x154>)
   d55d2:	f001 ff64 	bl	d749e <_ZN5Print7printlnEPKc>
}
   d55d6:	b009      	add	sp, #36	; 0x24
   d55d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d55dc:	000dbd11 	.word	0x000dbd11
   d55e0:	000dbb4a 	.word	0x000dbb4a
   d55e4:	000dbb5e 	.word	0x000dbb5e
   d55e8:	000dbb6a 	.word	0x000dbb6a
   d55ec:	000dbb72 	.word	0x000dbb72
   d55f0:	000dbb18 	.word	0x000dbb18
   d55f4:	000dbb1f 	.word	0x000dbb1f
   d55f8:	000dbb3d 	.word	0x000dbb3d
   d55fc:	000dbb24 	.word	0x000dbb24
   d5600:	000dbb84 	.word	0x000dbb84
   d5604:	000db9e9 	.word	0x000db9e9
   d5608:	000dbb41 	.word	0x000dbb41
   d560c:	000dbb77 	.word	0x000dbb77
   d5610:	000dbb7d 	.word	0x000dbb7d

000d5614 <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags>:
bool UbiProtocolHandler::send(const char* device_label, const char* device_name, UbiFlags* flags) {
   d5614:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d5618:	4604      	mov	r4, r0
  char* payload = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   d561a:	f44f 702f 	mov.w	r0, #700	; 0x2bc
bool UbiProtocolHandler::send(const char* device_label, const char* device_name, UbiFlags* flags) {
   d561e:	461e      	mov	r6, r3
   d5620:	460f      	mov	r7, r1
   d5622:	4690      	mov	r8, r2
  char* payload = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   d5624:	f001 f996 	bl	d6954 <malloc>
  if (_iot_protocol == UBI_TCP || _iot_protocol == UBI_UDP) {
   d5628:	7ce3      	ldrb	r3, [r4, #19]
   d562a:	3b01      	subs	r3, #1
   d562c:	2b01      	cmp	r3, #1
  char* payload = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   d562e:	4605      	mov	r5, r0
  if (_iot_protocol == UBI_TCP || _iot_protocol == UBI_UDP) {
   d5630:	d826      	bhi.n	d5680 <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags+0x6c>
    buildTcpPayload(payload, device_label, device_name);
   d5632:	4601      	mov	r1, r0
   d5634:	4643      	mov	r3, r8
   d5636:	463a      	mov	r2, r7
   d5638:	4620      	mov	r0, r4
   d563a:	f7ff ff25 	bl	d5488 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_>
  if (_debug) {
   d563e:	7ca3      	ldrb	r3, [r4, #18]
   d5640:	b123      	cbz	r3, d564c <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags+0x38>
    Serial.println("Sending data...");
   d5642:	f002 fbad 	bl	d7da0 <_Z16_fetch_usbserialv>
   d5646:	4911      	ldr	r1, [pc, #68]	; (d568c <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags+0x78>)
   d5648:	f001 ff29 	bl	d749e <_ZN5Print7printlnEPKc>
  bool result = _ubiProtocol->sendData(device_label, device_name, payload, flags);
   d564c:	6860      	ldr	r0, [r4, #4]
   d564e:	6803      	ldr	r3, [r0, #0]
   d5650:	9600      	str	r6, [sp, #0]
   d5652:	f8d3 9000 	ldr.w	r9, [r3]
   d5656:	4639      	mov	r1, r7
   d5658:	462b      	mov	r3, r5
   d565a:	4642      	mov	r2, r8
   d565c:	47c8      	blx	r9
   d565e:	4607      	mov	r7, r0
  free(payload);
   d5660:	4628      	mov	r0, r5
   d5662:	f001 f97f 	bl	d6964 <free>
  delete flags;
   d5666:	b11e      	cbz	r6, d5670 <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags+0x5c>
   d5668:	2101      	movs	r1, #1
   d566a:	4630      	mov	r0, r6
   d566c:	f003 f94f 	bl	d890e <_ZdlPvj>
  if (result) {
   d5670:	2300      	movs	r3, #0
   d5672:	b107      	cbz	r7, d5676 <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags+0x62>
    _dirty = false;
   d5674:	7463      	strb	r3, [r4, #17]
}
   d5676:	4638      	mov	r0, r7
  _current_value = 0;
   d5678:	7423      	strb	r3, [r4, #16]
}
   d567a:	b003      	add	sp, #12
   d567c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    buildHttpPayload(payload);
   d5680:	4601      	mov	r1, r0
   d5682:	4620      	mov	r0, r4
   d5684:	f7ff fe4a 	bl	d531c <_ZN18UbiProtocolHandler16buildHttpPayloadEPc>
   d5688:	e7d9      	b.n	d563e <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags+0x2a>
   d568a:	bf00      	nop
   d568c:	000dbb8b 	.word	0x000dbb8b

000d5690 <_ZN18UbiProtocolHandler4sendEPKcN8particle5FlagsI15PublishFlagTypehEE>:
bool UbiProtocolHandler::send(const char* device_label, PublishFlags flag) {
   d5690:	b570      	push	{r4, r5, r6, lr}
   d5692:	4604      	mov	r4, r0
  UbiFlags* flags = new UbiFlags();
   d5694:	2001      	movs	r0, #1
bool UbiProtocolHandler::send(const char* device_label, PublishFlags flag) {
   d5696:	460d      	mov	r5, r1
   d5698:	4616      	mov	r6, r2
  UbiFlags* flags = new UbiFlags();
   d569a:	f7fe fcfc 	bl	d4096 <_Znwj>
  flags->particle_flag = flag;
   d569e:	7006      	strb	r6, [r0, #0]
  UbiFlags* flags = new UbiFlags();
   d56a0:	4603      	mov	r3, r0
  return send(device_label, device_label, flags);
   d56a2:	462a      	mov	r2, r5
   d56a4:	4629      	mov	r1, r5
   d56a6:	4620      	mov	r0, r4
}
   d56a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return send(device_label, device_label, flags);
   d56ac:	f7ff bfb2 	b.w	d5614 <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags>

000d56b0 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   d56b0:	b570      	push	{r4, r5, r6, lr}
   d56b2:	4605      	mov	r5, r0
   d56b4:	460c      	mov	r4, r1
      while (__x != 0)
   d56b6:	b184      	cbz	r4, d56da <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E+0x2a>
	  _M_erase(_S_right(__x));
   d56b8:	68e1      	ldr	r1, [r4, #12]
   d56ba:	4628      	mov	r0, r5
   d56bc:	f7ff fff8 	bl	d56b0 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d56c0:	69e3      	ldr	r3, [r4, #28]
	  _Link_type __y = _S_left(__x);
   d56c2:	68a6      	ldr	r6, [r4, #8]
   d56c4:	b123      	cbz	r3, d56d0 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E+0x20>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d56c6:	f104 0114 	add.w	r1, r4, #20
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d56ca:	2203      	movs	r2, #3
   d56cc:	4608      	mov	r0, r1
   d56ce:	4798      	blx	r3
   d56d0:	4620      	mov	r0, r4
   d56d2:	f7fe fce4 	bl	d409e <_ZdlPv>
	  __x = __y;
   d56d6:	4634      	mov	r4, r6
      }
   d56d8:	e7ed      	b.n	d56b6 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E+0x6>
    }
   d56da:	bd70      	pop	{r4, r5, r6, pc}

000d56dc <_ZN18UbiProtocolHandler7builderEPcPKc11IotProtocol>:
void UbiProtocolHandler::builder(char* token, UbiServer server, IotProtocol iot_protocol) {
   d56dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   d56de:	b08d      	sub	sp, #52	; 0x34
   d56e0:	4604      	mov	r4, r0
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, long seconds = 0, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleepPinImpl(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, std::chrono::seconds s, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, s.count(), flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count()); }

    static String deviceID(void) { return spark_deviceID(); }
   d56e2:	a801      	add	r0, sp, #4
   d56e4:	460d      	mov	r5, r1
   d56e6:	4617      	mov	r7, r2
   d56e8:	461e      	mov	r6, r3
   d56ea:	f001 f913 	bl	d6914 <spark_deviceID>
  _default_device_label = new char[particle_id_str.length() + 1];
   d56ee:	9803      	ldr	r0, [sp, #12]
   d56f0:	3001      	adds	r0, #1
   d56f2:	f7fe fcd2 	bl	d409a <_Znaj>
  strcpy(_default_device_label, particle_id_str.c_str());
   d56f6:	9901      	ldr	r1, [sp, #4]
  _default_device_label = new char[particle_id_str.length() + 1];
   d56f8:	6020      	str	r0, [r4, #0]
  strcpy(_default_device_label, particle_id_str.c_str());
   d56fa:	f004 f996 	bl	d9a2a <strcpy>
  UbiBuilder builder(server, token, _iot_protocol);
   d56fe:	462a      	mov	r2, r5
   d5700:	4633      	mov	r3, r6
   d5702:	4639      	mov	r1, r7
  _iot_protocol = iot_protocol;
   d5704:	74e6      	strb	r6, [r4, #19]
  UbiBuilder builder(server, token, _iot_protocol);
   d5706:	a805      	add	r0, sp, #20
   d5708:	f000 fd50 	bl	d61ac <_ZN10UbiBuilderC1EPKcS1_11IotProtocol>
  _dots = (Value*)malloc(MAX_VALUES * sizeof(Value));
   d570c:	20c8      	movs	r0, #200	; 0xc8
   d570e:	f001 f921 	bl	d6954 <malloc>
   d5712:	60e0      	str	r0, [r4, #12]
  _ubiProtocol = builder.builder();
   d5714:	a805      	add	r0, sp, #20
   d5716:	f000 fc6d 	bl	d5ff4 <_ZN10UbiBuilder7builderEv>
  _current_value = 0;
   d571a:	2300      	movs	r3, #0
  _token = token;
   d571c:	e9c4 0501 	strd	r0, r5, [r4, #4]
      { _M_erase(_M_begin()); }
   d5720:	9908      	ldr	r1, [sp, #32]
  _current_value = 0;
   d5722:	7423      	strb	r3, [r4, #16]
   d5724:	a806      	add	r0, sp, #24
   d5726:	f7ff ffc3 	bl	d56b0 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E>
  String particle_id_str = System.deviceID();
   d572a:	a801      	add	r0, sp, #4
   d572c:	f001 fd3a 	bl	d71a4 <_ZN6StringD1Ev>
}
   d5730:	b00d      	add	sp, #52	; 0x34
   d5732:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5734 <_ZN18UbiProtocolHandlerC1EPcPKc11IotProtocol>:
UbiProtocolHandler::UbiProtocolHandler(char* token, UbiServer server, IotProtocol iot_protocol) {
   d5734:	b538      	push	{r3, r4, r5, lr}
   d5736:	2500      	movs	r5, #0
   d5738:	4604      	mov	r4, r0
   d573a:	8205      	strh	r5, [r0, #16]
  builder(token, server, iot_protocol);
   d573c:	f7ff ffce 	bl	d56dc <_ZN18UbiProtocolHandler7builderEPcPKc11IotProtocol>
}
   d5740:	4620      	mov	r0, r4
   d5742:	bd38      	pop	{r3, r4, r5, pc}

000d5744 <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol>:
}
   d5744:	b510      	push	{r4, lr}
   d5746:	4b10      	ldr	r3, [pc, #64]	; (d5788 <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0x44>)
#define _UbiHttp_H_

#include "UbiConstants.h"
#include "UbiProtocol.h"

static TCPClient _client_http_ubi;
   d5748:	4c10      	ldr	r4, [pc, #64]	; (d578c <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0x48>)
   d574a:	2200      	movs	r2, #0
   d574c:	701a      	strb	r2, [r3, #0]
   d574e:	4620      	mov	r0, r4
   d5750:	f002 fefc 	bl	d854c <_ZN9TCPClientC1Ev>
   d5754:	4620      	mov	r0, r4
   d5756:	4c0e      	ldr	r4, [pc, #56]	; (d5790 <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0x4c>)
   d5758:	4a0e      	ldr	r2, [pc, #56]	; (d5794 <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0x50>)
   d575a:	490f      	ldr	r1, [pc, #60]	; (d5798 <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0x54>)
   d575c:	f003 f8d2 	bl	d8904 <__aeabi_atexit>
   d5760:	4620      	mov	r0, r4
   d5762:	f002 fef3 	bl	d854c <_ZN9TCPClientC1Ev>
   d5766:	4620      	mov	r0, r4
#define _UbiUdp_H_

#include "UbiConstants.h"
#include "UbiProtocol.h"

static UDP _client_udp_ubi;
   d5768:	4c0c      	ldr	r4, [pc, #48]	; (d579c <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0x58>)
   d576a:	4a0a      	ldr	r2, [pc, #40]	; (d5794 <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0x50>)
   d576c:	490a      	ldr	r1, [pc, #40]	; (d5798 <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0x54>)
   d576e:	f003 f8c9 	bl	d8904 <__aeabi_atexit>
   d5772:	4620      	mov	r0, r4
   d5774:	f001 fc32 	bl	d6fdc <_ZN3UDPC1Ev>
   d5778:	4620      	mov	r0, r4
   d577a:	4a06      	ldr	r2, [pc, #24]	; (d5794 <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0x50>)
   d577c:	4908      	ldr	r1, [pc, #32]	; (d57a0 <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0x5c>)
   d577e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d5782:	f003 b8bf 	b.w	d8904 <__aeabi_atexit>
   d5786:	bf00      	nop
   d5788:	2003e54c 	.word	0x2003e54c
   d578c:	2003e530 	.word	0x2003e530
   d5790:	2003e4c8 	.word	0x2003e4c8
   d5794:	2003e468 	.word	0x2003e468
   d5798:	000d4ab9 	.word	0x000d4ab9
   d579c:	2003e4e4 	.word	0x2003e4e4
   d57a0:	000d51d5 	.word	0x000d51d5

000d57a4 <_ZN7Ubidots8_builderEPcPKc11IotProtocol>:

Ubidots::Ubidots(char* token, IotProtocol iotProtocol) { _builder(token, UBI_INDUSTRIAL, iotProtocol); }

Ubidots::Ubidots(char* token, UbiServer server, IotProtocol iotProtocol) { _builder(token, server, iotProtocol); }

void Ubidots::_builder(char* token, UbiServer server, IotProtocol iotProtocol) {
   d57a4:	b573      	push	{r0, r1, r4, r5, r6, lr}
  _iotProtocol = iotProtocol;
   d57a6:	7203      	strb	r3, [r0, #8]
void Ubidots::_builder(char* token, UbiServer server, IotProtocol iotProtocol) {
   d57a8:	4604      	mov	r4, r0
  _context = (ContextUbi*)malloc(MAX_VALUES * sizeof(ContextUbi));
   d57aa:	2050      	movs	r0, #80	; 0x50
void Ubidots::_builder(char* token, UbiServer server, IotProtocol iotProtocol) {
   d57ac:	e9cd 2100 	strd	r2, r1, [sp]
   d57b0:	461e      	mov	r6, r3
  _context = (ContextUbi*)malloc(MAX_VALUES * sizeof(ContextUbi));
   d57b2:	f001 f8cf 	bl	d6954 <malloc>
   d57b6:	6060      	str	r0, [r4, #4]

  _cloudProtocol = new UbiProtocolHandler(token, server, iotProtocol);
   d57b8:	2014      	movs	r0, #20
   d57ba:	f7fe fc6c 	bl	d4096 <_Znwj>
   d57be:	4605      	mov	r5, r0
   d57c0:	b120      	cbz	r0, d57cc <_ZN7Ubidots8_builderEPcPKc11IotProtocol+0x28>
   d57c2:	e9dd 2100 	ldrd	r2, r1, [sp]
   d57c6:	4633      	mov	r3, r6
   d57c8:	f7ff ffb4 	bl	d5734 <_ZN18UbiProtocolHandlerC1EPcPKc11IotProtocol>
   d57cc:	6025      	str	r5, [r4, #0]
}
   d57ce:	b002      	add	sp, #8
   d57d0:	bd70      	pop	{r4, r5, r6, pc}
	...

000d57d4 <_ZN7UbidotsC1EPc11IotProtocol>:
Ubidots::Ubidots(char* token, IotProtocol iotProtocol) { _builder(token, UBI_INDUSTRIAL, iotProtocol); }
   d57d4:	b538      	push	{r3, r4, r5, lr}
   d57d6:	2500      	movs	r5, #0
   d57d8:	4604      	mov	r4, r0
   d57da:	4613      	mov	r3, r2
   d57dc:	7245      	strb	r5, [r0, #9]
   d57de:	7285      	strb	r5, [r0, #10]
   d57e0:	4a02      	ldr	r2, [pc, #8]	; (d57ec <_ZN7UbidotsC1EPc11IotProtocol+0x18>)
   d57e2:	f7ff ffdf 	bl	d57a4 <_ZN7Ubidots8_builderEPcPKc11IotProtocol>
   d57e6:	4620      	mov	r0, r4
   d57e8:	bd38      	pop	{r3, r4, r5, pc}
   d57ea:	bf00      	nop
   d57ec:	000dbb9b 	.word	0x000dbb9b

000d57f0 <_ZN7UbidotsD1Ev>:

/**************************************************************************
 * Destructor
 ***************************************************************************/

Ubidots::~Ubidots() {
   d57f0:	b538      	push	{r3, r4, r5, lr}
   d57f2:	4604      	mov	r4, r0
  free(_context);
   d57f4:	6840      	ldr	r0, [r0, #4]
   d57f6:	f001 f8b5 	bl	d6964 <free>
  delete _cloudProtocol;
   d57fa:	6825      	ldr	r5, [r4, #0]
   d57fc:	b135      	cbz	r5, d580c <_ZN7UbidotsD1Ev+0x1c>
   d57fe:	4628      	mov	r0, r5
   d5800:	f7ff fd02 	bl	d5208 <_ZN18UbiProtocolHandlerD1Ev>
   d5804:	2114      	movs	r1, #20
   d5806:	4628      	mov	r0, r5
   d5808:	f003 f881 	bl	d890e <_ZdlPvj>
}
   d580c:	4620      	mov	r0, r4
   d580e:	bd38      	pop	{r3, r4, r5, pc}

000d5810 <_ZN7Ubidots3addEPcfS0_mj>:
  add(variable_label, value, context, dot_timestamp_seconds, NULL);
}

void Ubidots::add(char* variable_label, float value, char* context, long unsigned dot_timestamp_seconds,
                  unsigned int dot_timestamp_millis) {
  _cloudProtocol->add(variable_label, value, context, dot_timestamp_seconds, dot_timestamp_millis);
   d5810:	6800      	ldr	r0, [r0, #0]
   d5812:	f7ff bd09 	b.w	d5228 <_ZN18UbiProtocolHandler3addEPcfS0_mj>

000d5816 <_ZN7Ubidots3addEPcf>:
void Ubidots::add(char* variable_label, float value) { add(variable_label, value, NULL, NULL, NULL); }
   d5816:	b507      	push	{r0, r1, r2, lr}
   d5818:	2300      	movs	r3, #0
   d581a:	9300      	str	r3, [sp, #0]
   d581c:	461a      	mov	r2, r3
   d581e:	f7ff fff7 	bl	d5810 <_ZN7Ubidots3addEPcfS0_mj>
   d5822:	b003      	add	sp, #12
   d5824:	f85d fb04 	ldr.w	pc, [sp], #4

000d5828 <_ZN7Ubidots4sendEPKcN8particle5FlagsI15PublishFlagTypehEE>:

bool Ubidots::send(const char* device_label, const char* device_name) {
  return _cloudProtocol->send(device_label, device_name);
}

bool Ubidots::send(const char* device_label, PublishFlags flag) { return _cloudProtocol->send(device_label, flag); }
   d5828:	6800      	ldr	r0, [r0, #0]
   d582a:	f7ff bf31 	b.w	d5690 <_ZN18UbiProtocolHandler4sendEPKcN8particle5FlagsI15PublishFlagTypehEE>

000d582e <_ZN7Ubidots3getEPKcS1_>:
bool Ubidots::send(const char* device_label, const char* device_name, UbiFlags* flags) {
  return _cloudProtocol->send(device_label, device_name, flags);
}

float Ubidots::get(const char* device_label, const char* variable_label) {
  return _cloudProtocol->get(device_label, variable_label);
   d582e:	6800      	ldr	r0, [r0, #0]
   d5830:	f7ff bd3a 	b.w	d52a8 <_ZN18UbiProtocolHandler3getEPKcS1_>

000d5834 <_ZN7UbiHTTP8setDebugEb>:

/**
 * Makes available debug traces
 */

void UbiHTTP::setDebug(bool debug) { _debug = debug; }
   d5834:	7501      	strb	r1, [r0, #20]
   d5836:	4770      	bx	lr

000d5838 <_ZN7UbiHTTP17getMultipleValuesEPKcS1_>:
      _M_header._M_color = _S_red;
   d5838:	2200      	movs	r2, #0
	  : _Node_allocator()
   d583a:	1d01      	adds	r1, r0, #4
      _M_header._M_left = &_M_header;
   d583c:	e9c0 2102 	strd	r2, r1, [r0, #8]
      _M_node_count = 0;
   d5840:	e9c0 1204 	strd	r1, r2, [r0, #16]
      _M_header._M_color = _S_red;
   d5844:	7102      	strb	r2, [r0, #4]

tcpMap UbiHTTP::getMultipleValues(const char* deviceLabel, const char* variableLabels) {
  tcpMap results;
  return results;
}
   d5846:	4770      	bx	lr

000d5848 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0>:
float UbiHTTP::parseHttpAnswer(const char* request_type, char* data) {
   d5848:	b570      	push	{r4, r5, r6, lr}
   d584a:	4606      	mov	r6, r0
   d584c:	ed2d 8b02 	vpush	{d8}
    char* parsed = (char*)malloc(sizeof(char) * 20);
   d5850:	2014      	movs	r0, #20
   d5852:	f001 f87f 	bl	d6954 <malloc>
   d5856:	4605      	mov	r5, r0
    char* dst = (char*)malloc(sizeof(char) * 20);
   d5858:	2014      	movs	r0, #20
   d585a:	f001 f87b 	bl	d6954 <malloc>
   d585e:	4604      	mov	r4, r0
    int len = strlen(data);  // Length of the answer char array from the server
   d5860:	4630      	mov	r0, r6
   d5862:	f004 f908 	bl	d9a76 <strlen>
    for (int i = 0; i < len - 2; i++) {
   d5866:	4632      	mov	r2, r6
   d5868:	2300      	movs	r3, #0
   d586a:	3802      	subs	r0, #2
   d586c:	4298      	cmp	r0, r3
   d586e:	dd14      	ble.n	d589a <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0x52>
      if ((data[i] == '\r') && (data[i + 1] == '\n') && (data[i + 2] == '\r') && (data[i + 3] == '\n')) {
   d5870:	f812 1b01 	ldrb.w	r1, [r2], #1
   d5874:	290d      	cmp	r1, #13
   d5876:	d13a      	bne.n	d58ee <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0xa6>
   d5878:	7811      	ldrb	r1, [r2, #0]
   d587a:	290a      	cmp	r1, #10
   d587c:	d137      	bne.n	d58ee <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0xa6>
   d587e:	7851      	ldrb	r1, [r2, #1]
   d5880:	290d      	cmp	r1, #13
   d5882:	d134      	bne.n	d58ee <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0xa6>
   d5884:	7891      	ldrb	r1, [r2, #2]
   d5886:	290a      	cmp	r1, #10
   d5888:	d131      	bne.n	d58ee <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0xa6>
        strncpy(parsed, data + i + 4, 20);  // Copies the result to the parsed
   d588a:	3304      	adds	r3, #4
   d588c:	18f1      	adds	r1, r6, r3
   d588e:	2214      	movs	r2, #20
   d5890:	4628      	mov	r0, r5
   d5892:	f004 f90a 	bl	d9aaa <strncpy>
        parsed[20] = '\0';
   d5896:	2300      	movs	r3, #0
   d5898:	752b      	strb	r3, [r5, #20]
    char* pch = strchr(parsed, '\n');
   d589a:	210a      	movs	r1, #10
   d589c:	4628      	mov	r0, r5
   d589e:	f004 f8ad 	bl	d99fc <strchr>
    if (pch == NULL) {
   d58a2:	4606      	mov	r6, r0
   d58a4:	b328      	cbz	r0, d58f2 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0xaa>
    char* pch2 = strchr(pch + 1, '\n');
   d58a6:	210a      	movs	r1, #10
   d58a8:	3001      	adds	r0, #1
   d58aa:	f004 f8a7 	bl	d99fc <strchr>
    if (pch2 == NULL) {
   d58ae:	b300      	cbz	r0, d58f2 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0xaa>
    sprintf(dst, "%s", pch);
   d58b0:	4631      	mov	r1, r6
   d58b2:	4620      	mov	r0, r4
   d58b4:	f004 f8b9 	bl	d9a2a <strcpy>
    dst[strlen(dst) - 1] = '\0';
   d58b8:	4620      	mov	r0, r4
   d58ba:	f004 f8dc 	bl	d9a76 <strlen>
   d58be:	4420      	add	r0, r4
   d58c0:	2300      	movs	r3, #0
   d58c2:	f800 3c01 	strb.w	r3, [r0, #-1]
    float result = atof(dst);
   d58c6:	4620      	mov	r0, r4
   d58c8:	f004 f84c 	bl	d9964 <atof>
   d58cc:	ec51 0b10 	vmov	r0, r1, d0
   d58d0:	f003 fe5e 	bl	d9590 <__aeabi_d2f>
   d58d4:	ee08 0a10 	vmov	s16, r0
    free(dst);
   d58d8:	4620      	mov	r0, r4
   d58da:	f001 f843 	bl	d6964 <free>
    free(parsed);
   d58de:	4628      	mov	r0, r5
   d58e0:	f001 f840 	bl	d6964 <free>
}
   d58e4:	eeb0 0a48 	vmov.f32	s0, s16
   d58e8:	ecbd 8b02 	vpop	{d8}
   d58ec:	bd70      	pop	{r4, r5, r6, pc}
    for (int i = 0; i < len - 2; i++) {
   d58ee:	3301      	adds	r3, #1
   d58f0:	e7bc      	b.n	d586c <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0x24>
      return result;
   d58f2:	ed9f 8a01 	vldr	s16, [pc, #4]	; d58f8 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0xb0>
   d58f6:	e7f5      	b.n	d58e4 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0x9c>
   d58f8:	cda2425f 	.word	0xcda2425f

000d58fc <_ZN7UbiHTTPC1EPKciS1_S1_>:
UbiHTTP::UbiHTTP(const char* host, const int port, const char* user_agent, const char* token) {
   d58fc:	b530      	push	{r4, r5, lr}
   d58fe:	4d07      	ldr	r5, [pc, #28]	; (d591c <_ZN7UbiHTTPC1EPKciS1_S1_+0x20>)
   d5900:	6005      	str	r5, [r0, #0]
   d5902:	2500      	movs	r5, #0
  _user_agent = user_agent;
   d5904:	e9c0 1301 	strd	r1, r3, [r0, #4]
UbiHTTP::UbiHTTP(const char* host, const int port, const char* user_agent, const char* token) {
   d5908:	7505      	strb	r5, [r0, #20]
  _token = token;
   d590a:	9b03      	ldr	r3, [sp, #12]
UbiHTTP::UbiHTTP(const char* host, const int port, const char* user_agent, const char* token) {
   d590c:	f241 3588 	movw	r5, #5000	; 0x1388
   d5910:	6185      	str	r5, [r0, #24]
   d5912:	2505      	movs	r5, #5
  _port = port;
   d5914:	e9c0 3203 	strd	r3, r2, [r0, #12]
UbiHTTP::UbiHTTP(const char* host, const int port, const char* user_agent, const char* token) {
   d5918:	7705      	strb	r5, [r0, #28]
}
   d591a:	bd30      	pop	{r4, r5, pc}
   d591c:	000dbd40 	.word	0x000dbd40

000d5920 <_ZN7UbiHTTP9reconnectEPKci>:
void UbiHTTP::reconnect(const char* host, const int port) {
   d5920:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  while (!_client_http_ubi.connected() && attempts < _maxReconnectAttempts) {
   d5924:	f8df 808c 	ldr.w	r8, [pc, #140]	; d59b4 <_ZN7UbiHTTP9reconnectEPKci+0x94>
      Serial.print("Trying to connect to ");
   d5928:	f8df a08c 	ldr.w	sl, [pc, #140]	; d59b8 <_ZN7UbiHTTP9reconnectEPKci+0x98>
      Serial.print(" , attempt number: ");
   d592c:	f8df b08c 	ldr.w	fp, [pc, #140]	; d59bc <_ZN7UbiHTTP9reconnectEPKci+0x9c>
void UbiHTTP::reconnect(const char* host, const int port) {
   d5930:	4604      	mov	r4, r0
   d5932:	460d      	mov	r5, r1
   d5934:	4617      	mov	r7, r2
   d5936:	2600      	movs	r6, #0
  while (!_client_http_ubi.connected() && attempts < _maxReconnectAttempts) {
   d5938:	4640      	mov	r0, r8
   d593a:	fa5f f986 	uxtb.w	r9, r6
   d593e:	f002 fb78 	bl	d8032 <_ZN9TCPClient9connectedEv>
   d5942:	bb88      	cbnz	r0, d59a8 <_ZN7UbiHTTP9reconnectEPKci+0x88>
   d5944:	7f23      	ldrb	r3, [r4, #28]
   d5946:	454b      	cmp	r3, r9
   d5948:	d92e      	bls.n	d59a8 <_ZN7UbiHTTP9reconnectEPKci+0x88>
    if (_debug) {
   d594a:	7d23      	ldrb	r3, [r4, #20]
   d594c:	b1cb      	cbz	r3, d5982 <_ZN7UbiHTTP9reconnectEPKci+0x62>
      Serial.print("Trying to connect to ");
   d594e:	f002 fa27 	bl	d7da0 <_Z16_fetch_usbserialv>
   d5952:	4651      	mov	r1, sl
   d5954:	f001 fd90 	bl	d7478 <_ZN5Print5printEPKc>
      Serial.print(host);
   d5958:	f002 fa22 	bl	d7da0 <_Z16_fetch_usbserialv>
   d595c:	4629      	mov	r1, r5
   d595e:	f001 fd8b 	bl	d7478 <_ZN5Print5printEPKc>
      Serial.print(" , attempt number: ");
   d5962:	f002 fa1d 	bl	d7da0 <_Z16_fetch_usbserialv>
   d5966:	4659      	mov	r1, fp
   d5968:	f001 fd86 	bl	d7478 <_ZN5Print5printEPKc>
      Serial.println(attempts);
   d596c:	f002 fa18 	bl	d7da0 <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
   d5970:	220a      	movs	r2, #10
   d5972:	4649      	mov	r1, r9
   d5974:	9001      	str	r0, [sp, #4]
   d5976:	f001 fd9c 	bl	d74b2 <_ZN5Print11printNumberEmh>
        n += println();
   d597a:	9b01      	ldr	r3, [sp, #4]
   d597c:	4618      	mov	r0, r3
   d597e:	f001 fd82 	bl	d7486 <_ZN5Print7printlnEv>
    _client_http_ubi.connect(host, port);
   d5982:	2300      	movs	r3, #0
   d5984:	b2ba      	uxth	r2, r7
   d5986:	4629      	mov	r1, r5
   d5988:	4640      	mov	r0, r8
   d598a:	f002 fc33 	bl	d81f4 <_ZN9TCPClient7connectEPKctm>
    if (_debug) {
   d598e:	7d23      	ldrb	r3, [r4, #20]
   d5990:	b123      	cbz	r3, d599c <_ZN7UbiHTTP9reconnectEPKci+0x7c>
      Serial.println("Attempt finished");
   d5992:	f002 fa05 	bl	d7da0 <_Z16_fetch_usbserialv>
   d5996:	4906      	ldr	r1, [pc, #24]	; (d59b0 <_ZN7UbiHTTP9reconnectEPKci+0x90>)
   d5998:	f001 fd81 	bl	d749e <_ZN5Print7printlnEPKc>
    delay(1000);
   d599c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d59a0:	f001 fdb8 	bl	d7514 <delay>
   d59a4:	3601      	adds	r6, #1
  while (!_client_http_ubi.connected() && attempts < _maxReconnectAttempts) {
   d59a6:	e7c7      	b.n	d5938 <_ZN7UbiHTTP9reconnectEPKci+0x18>
}
   d59a8:	b003      	add	sp, #12
   d59aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d59ae:	bf00      	nop
   d59b0:	000dbbb6 	.word	0x000dbbb6
   d59b4:	2003e550 	.word	0x2003e550
   d59b8:	000db958 	.word	0x000db958
   d59bc:	000db96e 	.word	0x000db96e

000d59c0 <_ZN7UbiHTTP16readServerAnswerEPc>:
void UbiHTTP::readServerAnswer(char* response) {
   d59c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d59c4:	1e4b      	subs	r3, r1, #1
   d59c6:	460c      	mov	r4, r1
   d59c8:	f501 722f 	add.w	r2, r1, #700	; 0x2bc
   d59cc:	4605      	mov	r5, r0
    response[i] = '\0';
   d59ce:	2100      	movs	r1, #0
   d59d0:	f803 1f01 	strb.w	r1, [r3, #1]!
  for (int i = 0; i <= MAX_BUFFER_SIZE; i++) {
   d59d4:	4293      	cmp	r3, r2
   d59d6:	d1fb      	bne.n	d59d0 <_ZN7UbiHTTP16readServerAnswerEPc+0x10>
  if (_debug) {
   d59d8:	7d2b      	ldrb	r3, [r5, #20]
   d59da:	b14b      	cbz	r3, d59f0 <_ZN7UbiHTTP16readServerAnswerEPc+0x30>
    Serial.println("----------");
   d59dc:	f002 f9e0 	bl	d7da0 <_Z16_fetch_usbserialv>
   d59e0:	4914      	ldr	r1, [pc, #80]	; (d5a34 <_ZN7UbiHTTP16readServerAnswerEPc+0x74>)
   d59e2:	f001 fd5c 	bl	d749e <_ZN5Print7printlnEPKc>
    Serial.println("Server's response:");
   d59e6:	f002 f9db 	bl	d7da0 <_Z16_fetch_usbserialv>
   d59ea:	4913      	ldr	r1, [pc, #76]	; (d5a38 <_ZN7UbiHTTP16readServerAnswerEPc+0x78>)
   d59ec:	f001 fd57 	bl	d749e <_ZN5Print7printlnEPKc>
  while (_client_http_ubi.available()) {
   d59f0:	4f12      	ldr	r7, [pc, #72]	; (d5a3c <_ZN7UbiHTTP16readServerAnswerEPc+0x7c>)
void UbiHTTP::readServerAnswer(char* response) {
   d59f2:	2600      	movs	r6, #0
    if (j >= MAX_BUFFER_SIZE - 1) {
   d59f4:	f240 28bb 	movw	r8, #699	; 0x2bb
  while (_client_http_ubi.available()) {
   d59f8:	4638      	mov	r0, r7
   d59fa:	f002 fcfd 	bl	d83f8 <_ZN9TCPClient9availableEv>
   d59fe:	b170      	cbz	r0, d5a1e <_ZN7UbiHTTP16readServerAnswerEPc+0x5e>
    response[j] = (char)_client_http_ubi.read();
   d5a00:	4638      	mov	r0, r7
   d5a02:	f002 fbb2 	bl	d816a <_ZN9TCPClient4readEv>
   d5a06:	55a0      	strb	r0, [r4, r6]
    if (_debug) {
   d5a08:	7d2b      	ldrb	r3, [r5, #20]
   d5a0a:	b12b      	cbz	r3, d5a18 <_ZN7UbiHTTP16readServerAnswerEPc+0x58>
      Serial.write(response[j]);
   d5a0c:	f002 f9c8 	bl	d7da0 <_Z16_fetch_usbserialv>
   d5a10:	6803      	ldr	r3, [r0, #0]
   d5a12:	5da1      	ldrb	r1, [r4, r6]
   d5a14:	689b      	ldr	r3, [r3, #8]
   d5a16:	4798      	blx	r3
    j++;
   d5a18:	3601      	adds	r6, #1
    if (j >= MAX_BUFFER_SIZE - 1) {
   d5a1a:	4546      	cmp	r6, r8
   d5a1c:	d1ec      	bne.n	d59f8 <_ZN7UbiHTTP16readServerAnswerEPc+0x38>
  if (_debug) {
   d5a1e:	7d2b      	ldrb	r3, [r5, #20]
   d5a20:	b133      	cbz	r3, d5a30 <_ZN7UbiHTTP16readServerAnswerEPc+0x70>
    Serial.println("\n----------");
   d5a22:	f002 f9bd 	bl	d7da0 <_Z16_fetch_usbserialv>
}
   d5a26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    Serial.println("\n----------");
   d5a2a:	4905      	ldr	r1, [pc, #20]	; (d5a40 <_ZN7UbiHTTP16readServerAnswerEPc+0x80>)
   d5a2c:	f001 bd37 	b.w	d749e <_ZN5Print7printlnEPKc>
}
   d5a30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5a34:	000db9e9 	.word	0x000db9e9
   d5a38:	000db9d5 	.word	0x000db9d5
   d5a3c:	2003e550 	.word	0x2003e550
   d5a40:	000db9e8 	.word	0x000db9e8

000d5a44 <_ZN7UbiHTTP16waitServerAnswerEv>:
bool UbiHTTP::waitServerAnswer() {
   d5a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  while (!_client_http_ubi.available() && timeout < _timeout) {
   d5a46:	4f0e      	ldr	r7, [pc, #56]	; (d5a80 <_ZN7UbiHTTP16waitServerAnswerEv+0x3c>)
bool UbiHTTP::waitServerAnswer() {
   d5a48:	4604      	mov	r4, r0
  int timeout = 0;
   d5a4a:	2600      	movs	r6, #0
  while (!_client_http_ubi.available() && timeout < _timeout) {
   d5a4c:	4638      	mov	r0, r7
   d5a4e:	f002 fcd3 	bl	d83f8 <_ZN9TCPClient9availableEv>
   d5a52:	4605      	mov	r5, r0
   d5a54:	b990      	cbnz	r0, d5a7c <_ZN7UbiHTTP16waitServerAnswerEv+0x38>
   d5a56:	69a3      	ldr	r3, [r4, #24]
   d5a58:	42b3      	cmp	r3, r6
   d5a5a:	dd0f      	ble.n	d5a7c <_ZN7UbiHTTP16waitServerAnswerEv+0x38>
    delay(1);
   d5a5c:	2001      	movs	r0, #1
   d5a5e:	f001 fd59 	bl	d7514 <delay>
    if (timeout > _timeout - 1) {
   d5a62:	69a3      	ldr	r3, [r4, #24]
    timeout++;
   d5a64:	3601      	adds	r6, #1
    if (timeout > _timeout - 1) {
   d5a66:	42b3      	cmp	r3, r6
   d5a68:	dcf0      	bgt.n	d5a4c <_ZN7UbiHTTP16waitServerAnswerEv+0x8>
      if (_debug) {
   d5a6a:	7d20      	ldrb	r0, [r4, #20]
   d5a6c:	b128      	cbz	r0, d5a7a <_ZN7UbiHTTP16waitServerAnswerEv+0x36>
        Serial.println("timeout, could not read any response from the host");
   d5a6e:	f002 f997 	bl	d7da0 <_Z16_fetch_usbserialv>
   d5a72:	4904      	ldr	r1, [pc, #16]	; (d5a84 <_ZN7UbiHTTP16waitServerAnswerEv+0x40>)
   d5a74:	f001 fd13 	bl	d749e <_ZN5Print7printlnEPKc>
   d5a78:	4628      	mov	r0, r5
}
   d5a7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return true;
   d5a7c:	2001      	movs	r0, #1
   d5a7e:	e7fc      	b.n	d5a7a <_ZN7UbiHTTP16waitServerAnswerEv+0x36>
   d5a80:	2003e550 	.word	0x2003e550
   d5a84:	000db9a2 	.word	0x000db9a2

000d5a88 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags>:
bool UbiHTTP::sendData(const char* device_label, const char* device_name, char* payload, UbiFlags* flags) {
   d5a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5a8a:	460f      	mov	r7, r1
  reconnect(_host, _port);
   d5a8c:	6902      	ldr	r2, [r0, #16]
   d5a8e:	6841      	ldr	r1, [r0, #4]
bool UbiHTTP::sendData(const char* device_label, const char* device_name, char* payload, UbiFlags* flags) {
   d5a90:	4604      	mov	r4, r0
   d5a92:	461d      	mov	r5, r3
  reconnect(_host, _port);
   d5a94:	f7ff ff44 	bl	d5920 <_ZN7UbiHTTP9reconnectEPKci>
  if (_client_http_ubi.connected()) {  // Connect to the host
   d5a98:	4878      	ldr	r0, [pc, #480]	; (d5c7c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d5a9a:	f002 faca 	bl	d8032 <_ZN9TCPClient9connectedEv>
   d5a9e:	4606      	mov	r6, r0
   d5aa0:	2800      	cmp	r0, #0
   d5aa2:	f000 80e1 	beq.w	d5c68 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1e0>
    _client_http_ubi.print(F("POST /api/v1.6/devices/"));
   d5aa6:	4976      	ldr	r1, [pc, #472]	; (d5c80 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f8>)
   d5aa8:	4874      	ldr	r0, [pc, #464]	; (d5c7c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d5aaa:	f001 fce5 	bl	d7478 <_ZN5Print5printEPKc>
    _client_http_ubi.print(device_label);
   d5aae:	4639      	mov	r1, r7
   d5ab0:	4872      	ldr	r0, [pc, #456]	; (d5c7c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d5ab2:	f001 fce1 	bl	d7478 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F(" HTTP/1.1\r\n"));
   d5ab6:	4973      	ldr	r1, [pc, #460]	; (d5c84 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1fc>)
   d5ab8:	4870      	ldr	r0, [pc, #448]	; (d5c7c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d5aba:	f001 fcdd 	bl	d7478 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("Host: "));
   d5abe:	4972      	ldr	r1, [pc, #456]	; (d5c88 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x200>)
   d5ac0:	486e      	ldr	r0, [pc, #440]	; (d5c7c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d5ac2:	f001 fcd9 	bl	d7478 <_ZN5Print5printEPKc>
    _client_http_ubi.print(_host);
   d5ac6:	6861      	ldr	r1, [r4, #4]
   d5ac8:	486c      	ldr	r0, [pc, #432]	; (d5c7c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d5aca:	f001 fcd5 	bl	d7478 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("\r\n"));
   d5ace:	496f      	ldr	r1, [pc, #444]	; (d5c8c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   d5ad0:	486a      	ldr	r0, [pc, #424]	; (d5c7c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d5ad2:	f001 fcd1 	bl	d7478 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("User-Agent: "));
   d5ad6:	496e      	ldr	r1, [pc, #440]	; (d5c90 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x208>)
   d5ad8:	4868      	ldr	r0, [pc, #416]	; (d5c7c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d5ada:	f001 fccd 	bl	d7478 <_ZN5Print5printEPKc>
    _client_http_ubi.print(_user_agent);
   d5ade:	68a1      	ldr	r1, [r4, #8]
   d5ae0:	4866      	ldr	r0, [pc, #408]	; (d5c7c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d5ae2:	f001 fcc9 	bl	d7478 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("\r\n"));
   d5ae6:	4969      	ldr	r1, [pc, #420]	; (d5c8c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   d5ae8:	4864      	ldr	r0, [pc, #400]	; (d5c7c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d5aea:	f001 fcc5 	bl	d7478 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("X-Auth-Token: "));
   d5aee:	4969      	ldr	r1, [pc, #420]	; (d5c94 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x20c>)
   d5af0:	4862      	ldr	r0, [pc, #392]	; (d5c7c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d5af2:	f001 fcc1 	bl	d7478 <_ZN5Print5printEPKc>
    _client_http_ubi.print(_token);
   d5af6:	68e1      	ldr	r1, [r4, #12]
   d5af8:	4860      	ldr	r0, [pc, #384]	; (d5c7c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d5afa:	f001 fcbd 	bl	d7478 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("\r\n"));
   d5afe:	4963      	ldr	r1, [pc, #396]	; (d5c8c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   d5b00:	485e      	ldr	r0, [pc, #376]	; (d5c7c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d5b02:	f001 fcb9 	bl	d7478 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("Connection: close\r\n"));
   d5b06:	4964      	ldr	r1, [pc, #400]	; (d5c98 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x210>)
   d5b08:	485c      	ldr	r0, [pc, #368]	; (d5c7c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d5b0a:	f001 fcb5 	bl	d7478 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("Content-Type: application/json\r\n"));
   d5b0e:	4963      	ldr	r1, [pc, #396]	; (d5c9c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
   d5b10:	485a      	ldr	r0, [pc, #360]	; (d5c7c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d5b12:	f001 fcb1 	bl	d7478 <_ZN5Print5printEPKc>
    int content_length = strlen(payload);
   d5b16:	4628      	mov	r0, r5
   d5b18:	f003 ffad 	bl	d9a76 <strlen>
    _client_http_ubi.print(F("Content-Length: "));
   d5b1c:	4960      	ldr	r1, [pc, #384]	; (d5ca0 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x218>)
    int content_length = strlen(payload);
   d5b1e:	4606      	mov	r6, r0
    _client_http_ubi.print(F("Content-Length: "));
   d5b20:	4856      	ldr	r0, [pc, #344]	; (d5c7c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d5b22:	f001 fca9 	bl	d7478 <_ZN5Print5printEPKc>
        return printNumber(val, base) + t;
   d5b26:	220a      	movs	r2, #10
   d5b28:	4631      	mov	r1, r6
   d5b2a:	4854      	ldr	r0, [pc, #336]	; (d5c7c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d5b2c:	f001 fcc1 	bl	d74b2 <_ZN5Print11printNumberEmh>
    _client_http_ubi.print(F("\r\n\r\n"));
   d5b30:	495c      	ldr	r1, [pc, #368]	; (d5ca4 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x21c>)
   d5b32:	4852      	ldr	r0, [pc, #328]	; (d5c7c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d5b34:	f001 fca0 	bl	d7478 <_ZN5Print5printEPKc>
    _client_http_ubi.print(payload);
   d5b38:	4629      	mov	r1, r5
   d5b3a:	4850      	ldr	r0, [pc, #320]	; (d5c7c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d5b3c:	f001 fc9c 	bl	d7478 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("\r\n"));
   d5b40:	4952      	ldr	r1, [pc, #328]	; (d5c8c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   d5b42:	484e      	ldr	r0, [pc, #312]	; (d5c7c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d5b44:	f001 fc98 	bl	d7478 <_ZN5Print5printEPKc>
    _client_http_ubi.flush();
   d5b48:	484c      	ldr	r0, [pc, #304]	; (d5c7c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d5b4a:	f002 fa71 	bl	d8030 <_ZN9TCPClient5flushEv>
    if (_debug) {
   d5b4e:	7d23      	ldrb	r3, [r4, #20]
   d5b50:	2b00      	cmp	r3, #0
   d5b52:	d069      	beq.n	d5c28 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1a0>
      Serial.println(F("Making request to Ubidots:\n"));
   d5b54:	f002 f924 	bl	d7da0 <_Z16_fetch_usbserialv>
   d5b58:	4953      	ldr	r1, [pc, #332]	; (d5ca8 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x220>)
   d5b5a:	f001 fca0 	bl	d749e <_ZN5Print7printlnEPKc>
      Serial.print("POST /api/v1.6/devices/");
   d5b5e:	f002 f91f 	bl	d7da0 <_Z16_fetch_usbserialv>
   d5b62:	4947      	ldr	r1, [pc, #284]	; (d5c80 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f8>)
   d5b64:	f001 fc88 	bl	d7478 <_ZN5Print5printEPKc>
      Serial.print(device_label);
   d5b68:	f002 f91a 	bl	d7da0 <_Z16_fetch_usbserialv>
   d5b6c:	4639      	mov	r1, r7
   d5b6e:	f001 fc83 	bl	d7478 <_ZN5Print5printEPKc>
      Serial.print(" HTTP/1.1\r\n");
   d5b72:	f002 f915 	bl	d7da0 <_Z16_fetch_usbserialv>
   d5b76:	4943      	ldr	r1, [pc, #268]	; (d5c84 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1fc>)
   d5b78:	f001 fc7e 	bl	d7478 <_ZN5Print5printEPKc>
      Serial.print("Host: ");
   d5b7c:	f002 f910 	bl	d7da0 <_Z16_fetch_usbserialv>
   d5b80:	4941      	ldr	r1, [pc, #260]	; (d5c88 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x200>)
   d5b82:	f001 fc79 	bl	d7478 <_ZN5Print5printEPKc>
      Serial.print(_host);
   d5b86:	f002 f90b 	bl	d7da0 <_Z16_fetch_usbserialv>
   d5b8a:	6861      	ldr	r1, [r4, #4]
   d5b8c:	f001 fc74 	bl	d7478 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   d5b90:	f002 f906 	bl	d7da0 <_Z16_fetch_usbserialv>
   d5b94:	493d      	ldr	r1, [pc, #244]	; (d5c8c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   d5b96:	f001 fc6f 	bl	d7478 <_ZN5Print5printEPKc>
      Serial.print("User-Agent: ");
   d5b9a:	f002 f901 	bl	d7da0 <_Z16_fetch_usbserialv>
   d5b9e:	493c      	ldr	r1, [pc, #240]	; (d5c90 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x208>)
   d5ba0:	f001 fc6a 	bl	d7478 <_ZN5Print5printEPKc>
      Serial.print(_user_agent);
   d5ba4:	f002 f8fc 	bl	d7da0 <_Z16_fetch_usbserialv>
   d5ba8:	68a1      	ldr	r1, [r4, #8]
   d5baa:	f001 fc65 	bl	d7478 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   d5bae:	f002 f8f7 	bl	d7da0 <_Z16_fetch_usbserialv>
   d5bb2:	4936      	ldr	r1, [pc, #216]	; (d5c8c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   d5bb4:	f001 fc60 	bl	d7478 <_ZN5Print5printEPKc>
      Serial.print("X-Auth-Token: ");
   d5bb8:	f002 f8f2 	bl	d7da0 <_Z16_fetch_usbserialv>
   d5bbc:	4935      	ldr	r1, [pc, #212]	; (d5c94 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x20c>)
   d5bbe:	f001 fc5b 	bl	d7478 <_ZN5Print5printEPKc>
      Serial.print(_token);
   d5bc2:	f002 f8ed 	bl	d7da0 <_Z16_fetch_usbserialv>
   d5bc6:	68e1      	ldr	r1, [r4, #12]
   d5bc8:	f001 fc56 	bl	d7478 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   d5bcc:	f002 f8e8 	bl	d7da0 <_Z16_fetch_usbserialv>
   d5bd0:	492e      	ldr	r1, [pc, #184]	; (d5c8c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   d5bd2:	f001 fc51 	bl	d7478 <_ZN5Print5printEPKc>
      Serial.print("Connection: close\r\n");
   d5bd6:	f002 f8e3 	bl	d7da0 <_Z16_fetch_usbserialv>
   d5bda:	492f      	ldr	r1, [pc, #188]	; (d5c98 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x210>)
   d5bdc:	f001 fc4c 	bl	d7478 <_ZN5Print5printEPKc>
      Serial.print("Content-Type: application/json\r\n");
   d5be0:	f002 f8de 	bl	d7da0 <_Z16_fetch_usbserialv>
   d5be4:	492d      	ldr	r1, [pc, #180]	; (d5c9c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
   d5be6:	f001 fc47 	bl	d7478 <_ZN5Print5printEPKc>
      Serial.print("Content-Length: ");
   d5bea:	f002 f8d9 	bl	d7da0 <_Z16_fetch_usbserialv>
   d5bee:	492c      	ldr	r1, [pc, #176]	; (d5ca0 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x218>)
   d5bf0:	f001 fc42 	bl	d7478 <_ZN5Print5printEPKc>
      Serial.print(content_length);
   d5bf4:	f002 f8d4 	bl	d7da0 <_Z16_fetch_usbserialv>
   d5bf8:	220a      	movs	r2, #10
   d5bfa:	4631      	mov	r1, r6
   d5bfc:	f001 fc59 	bl	d74b2 <_ZN5Print11printNumberEmh>
      Serial.print("\r\n\r\n");
   d5c00:	f002 f8ce 	bl	d7da0 <_Z16_fetch_usbserialv>
   d5c04:	4927      	ldr	r1, [pc, #156]	; (d5ca4 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x21c>)
   d5c06:	f001 fc37 	bl	d7478 <_ZN5Print5printEPKc>
      Serial.print(payload);
   d5c0a:	f002 f8c9 	bl	d7da0 <_Z16_fetch_usbserialv>
   d5c0e:	4629      	mov	r1, r5
   d5c10:	f001 fc32 	bl	d7478 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   d5c14:	f002 f8c4 	bl	d7da0 <_Z16_fetch_usbserialv>
   d5c18:	491c      	ldr	r1, [pc, #112]	; (d5c8c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   d5c1a:	f001 fc2d 	bl	d7478 <_ZN5Print5printEPKc>
      Serial.println("waiting for server answer ...");
   d5c1e:	f002 f8bf 	bl	d7da0 <_Z16_fetch_usbserialv>
   d5c22:	4922      	ldr	r1, [pc, #136]	; (d5cac <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x224>)
   d5c24:	f001 fc3b 	bl	d749e <_ZN5Print7printlnEPKc>
    waitServerAnswer();
   d5c28:	4620      	mov	r0, r4
   d5c2a:	f7ff ff0b 	bl	d5a44 <_ZN7UbiHTTP16waitServerAnswerEv>
    if (_debug) {
   d5c2e:	7d23      	ldrb	r3, [r4, #20]
   d5c30:	b92b      	cbnz	r3, d5c3e <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1b6>
    result = true;
   d5c32:	2401      	movs	r4, #1
  _client_http_ubi.stop();
   d5c34:	4811      	ldr	r0, [pc, #68]	; (d5c7c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d5c36:	f002 fc39 	bl	d84ac <_ZN9TCPClient4stopEv>
}
   d5c3a:	4620      	mov	r0, r4
   d5c3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      Serial.println("\nUbidots' Server response:\n");
   d5c3e:	f002 f8af 	bl	d7da0 <_Z16_fetch_usbserialv>
   d5c42:	491b      	ldr	r1, [pc, #108]	; (d5cb0 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x228>)
      while (_client_http_ubi.available()) {
   d5c44:	4d0d      	ldr	r5, [pc, #52]	; (d5c7c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
      Serial.println("\nUbidots' Server response:\n");
   d5c46:	f001 fc2a 	bl	d749e <_ZN5Print7printlnEPKc>
      while (_client_http_ubi.available()) {
   d5c4a:	4628      	mov	r0, r5
   d5c4c:	f002 fbd4 	bl	d83f8 <_ZN9TCPClient9availableEv>
   d5c50:	2800      	cmp	r0, #0
   d5c52:	d0ee      	beq.n	d5c32 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1aa>
        char c = _client_http_ubi.read();
   d5c54:	4628      	mov	r0, r5
   d5c56:	f002 fa88 	bl	d816a <_ZN9TCPClient4readEv>
   d5c5a:	4604      	mov	r4, r0
        Serial.print(c);
   d5c5c:	f002 f8a0 	bl	d7da0 <_Z16_fetch_usbserialv>
   d5c60:	b2e1      	uxtb	r1, r4
   d5c62:	f001 fc0d 	bl	d7480 <_ZN5Print5printEc>
      while (_client_http_ubi.available()) {
   d5c66:	e7f0      	b.n	d5c4a <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1c2>
    if (_debug) {
   d5c68:	7d24      	ldrb	r4, [r4, #20]
   d5c6a:	2c00      	cmp	r4, #0
   d5c6c:	d0e2      	beq.n	d5c34 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1ac>
      Serial.println("Could not send data to ubidots using HTTP");
   d5c6e:	f002 f897 	bl	d7da0 <_Z16_fetch_usbserialv>
   d5c72:	4910      	ldr	r1, [pc, #64]	; (d5cb4 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x22c>)
   d5c74:	f001 fc13 	bl	d749e <_ZN5Print7printlnEPKc>
  bool result = false;
   d5c78:	4634      	mov	r4, r6
   d5c7a:	e7db      	b.n	d5c34 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1ac>
   d5c7c:	2003e550 	.word	0x2003e550
   d5c80:	000dbbc7 	.word	0x000dbbc7
   d5c84:	000dbbdf 	.word	0x000dbbdf
   d5c88:	000dbbeb 	.word	0x000dbbeb
   d5c8c:	000dbd0f 	.word	0x000dbd0f
   d5c90:	000dbbf2 	.word	0x000dbbf2
   d5c94:	000dbbff 	.word	0x000dbbff
   d5c98:	000dbc0e 	.word	0x000dbc0e
   d5c9c:	000dbc22 	.word	0x000dbc22
   d5ca0:	000dbc43 	.word	0x000dbc43
   d5ca4:	000dbd0d 	.word	0x000dbd0d
   d5ca8:	000dbc54 	.word	0x000dbc54
   d5cac:	000dbc70 	.word	0x000dbc70
   d5cb0:	000dbc8e 	.word	0x000dbc8e
   d5cb4:	000dbcaa 	.word	0x000dbcaa

000d5cb8 <_ZN7UbiHTTP3getEPKcS1_>:
float UbiHTTP::get(const char* device_label, const char* variable_label) {
   d5cb8:	b570      	push	{r4, r5, r6, lr}
   d5cba:	ed2d 8b02 	vpush	{d8}
   d5cbe:	4604      	mov	r4, r0
  _client_http_ubi.connect(_host, UBIDOTS_HTTP_PORT);
   d5cc0:	2300      	movs	r3, #0
float UbiHTTP::get(const char* device_label, const char* variable_label) {
   d5cc2:	460e      	mov	r6, r1
   d5cc4:	4615      	mov	r5, r2
  _client_http_ubi.connect(_host, UBIDOTS_HTTP_PORT);
   d5cc6:	6841      	ldr	r1, [r0, #4]
   d5cc8:	4866      	ldr	r0, [pc, #408]	; (d5e64 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d5cca:	2250      	movs	r2, #80	; 0x50
   d5ccc:	f002 fa92 	bl	d81f4 <_ZN9TCPClient7connectEPKctm>
  reconnect(_host, UBIDOTS_HTTP_PORT);
   d5cd0:	4620      	mov	r0, r4
   d5cd2:	6861      	ldr	r1, [r4, #4]
   d5cd4:	2250      	movs	r2, #80	; 0x50
   d5cd6:	f7ff fe23 	bl	d5920 <_ZN7UbiHTTP9reconnectEPKci>
  if (_client_http_ubi.connected()) {
   d5cda:	4862      	ldr	r0, [pc, #392]	; (d5e64 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d5cdc:	f002 f9a9 	bl	d8032 <_ZN9TCPClient9connectedEv>
   d5ce0:	2800      	cmp	r0, #0
   d5ce2:	f000 80b6 	beq.w	d5e52 <_ZN7UbiHTTP3getEPKcS1_+0x19a>
    _client_http_ubi.print(F("GET /api/v1.6/devices/"));
   d5ce6:	4960      	ldr	r1, [pc, #384]	; (d5e68 <_ZN7UbiHTTP3getEPKcS1_+0x1b0>)
   d5ce8:	485e      	ldr	r0, [pc, #376]	; (d5e64 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d5cea:	f001 fbc5 	bl	d7478 <_ZN5Print5printEPKc>
    _client_http_ubi.print(device_label);
   d5cee:	4631      	mov	r1, r6
   d5cf0:	485c      	ldr	r0, [pc, #368]	; (d5e64 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d5cf2:	f001 fbc1 	bl	d7478 <_ZN5Print5printEPKc>
    _client_http_ubi.print("/");
   d5cf6:	495d      	ldr	r1, [pc, #372]	; (d5e6c <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
   d5cf8:	485a      	ldr	r0, [pc, #360]	; (d5e64 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d5cfa:	f001 fbbd 	bl	d7478 <_ZN5Print5printEPKc>
    _client_http_ubi.print(variable_label);
   d5cfe:	4629      	mov	r1, r5
   d5d00:	4858      	ldr	r0, [pc, #352]	; (d5e64 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d5d02:	f001 fbb9 	bl	d7478 <_ZN5Print5printEPKc>
    _client_http_ubi.print("/lv");
   d5d06:	495a      	ldr	r1, [pc, #360]	; (d5e70 <_ZN7UbiHTTP3getEPKcS1_+0x1b8>)
   d5d08:	4856      	ldr	r0, [pc, #344]	; (d5e64 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d5d0a:	f001 fbb5 	bl	d7478 <_ZN5Print5printEPKc>
    _client_http_ubi.print(" HTTP/1.1\r\n");
   d5d0e:	4959      	ldr	r1, [pc, #356]	; (d5e74 <_ZN7UbiHTTP3getEPKcS1_+0x1bc>)
   d5d10:	4854      	ldr	r0, [pc, #336]	; (d5e64 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d5d12:	f001 fbb1 	bl	d7478 <_ZN5Print5printEPKc>
    _client_http_ubi.print("Host: ");
   d5d16:	4958      	ldr	r1, [pc, #352]	; (d5e78 <_ZN7UbiHTTP3getEPKcS1_+0x1c0>)
   d5d18:	4852      	ldr	r0, [pc, #328]	; (d5e64 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d5d1a:	f001 fbad 	bl	d7478 <_ZN5Print5printEPKc>
    _client_http_ubi.print(_host);
   d5d1e:	6861      	ldr	r1, [r4, #4]
   d5d20:	4850      	ldr	r0, [pc, #320]	; (d5e64 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d5d22:	f001 fba9 	bl	d7478 <_ZN5Print5printEPKc>
    _client_http_ubi.print("\r\n");
   d5d26:	4955      	ldr	r1, [pc, #340]	; (d5e7c <_ZN7UbiHTTP3getEPKcS1_+0x1c4>)
   d5d28:	484e      	ldr	r0, [pc, #312]	; (d5e64 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d5d2a:	f001 fba5 	bl	d7478 <_ZN5Print5printEPKc>
    _client_http_ubi.print("User-Agent: ");
   d5d2e:	4954      	ldr	r1, [pc, #336]	; (d5e80 <_ZN7UbiHTTP3getEPKcS1_+0x1c8>)
   d5d30:	484c      	ldr	r0, [pc, #304]	; (d5e64 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d5d32:	f001 fba1 	bl	d7478 <_ZN5Print5printEPKc>
    _client_http_ubi.print(_user_agent);
   d5d36:	68a1      	ldr	r1, [r4, #8]
   d5d38:	484a      	ldr	r0, [pc, #296]	; (d5e64 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d5d3a:	f001 fb9d 	bl	d7478 <_ZN5Print5printEPKc>
    _client_http_ubi.print("\r\n");
   d5d3e:	494f      	ldr	r1, [pc, #316]	; (d5e7c <_ZN7UbiHTTP3getEPKcS1_+0x1c4>)
   d5d40:	4848      	ldr	r0, [pc, #288]	; (d5e64 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d5d42:	f001 fb99 	bl	d7478 <_ZN5Print5printEPKc>
    _client_http_ubi.print("X-Auth-Token: ");
   d5d46:	494f      	ldr	r1, [pc, #316]	; (d5e84 <_ZN7UbiHTTP3getEPKcS1_+0x1cc>)
   d5d48:	4846      	ldr	r0, [pc, #280]	; (d5e64 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d5d4a:	f001 fb95 	bl	d7478 <_ZN5Print5printEPKc>
    _client_http_ubi.print(_token);
   d5d4e:	68e1      	ldr	r1, [r4, #12]
   d5d50:	4844      	ldr	r0, [pc, #272]	; (d5e64 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d5d52:	f001 fb91 	bl	d7478 <_ZN5Print5printEPKc>
    _client_http_ubi.print("\r\n");
   d5d56:	4949      	ldr	r1, [pc, #292]	; (d5e7c <_ZN7UbiHTTP3getEPKcS1_+0x1c4>)
   d5d58:	4842      	ldr	r0, [pc, #264]	; (d5e64 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d5d5a:	f001 fb8d 	bl	d7478 <_ZN5Print5printEPKc>
    _client_http_ubi.print("Content-Type: application/json\r\n\r\n");
   d5d5e:	494a      	ldr	r1, [pc, #296]	; (d5e88 <_ZN7UbiHTTP3getEPKcS1_+0x1d0>)
   d5d60:	4840      	ldr	r0, [pc, #256]	; (d5e64 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d5d62:	f001 fb89 	bl	d7478 <_ZN5Print5printEPKc>
    if (_debug) {
   d5d66:	7d23      	ldrb	r3, [r4, #20]
   d5d68:	2b00      	cmp	r3, #0
   d5d6a:	d04f      	beq.n	d5e0c <_ZN7UbiHTTP3getEPKcS1_+0x154>
      Serial.print("GET /api/v1.6/devices/");
   d5d6c:	f002 f818 	bl	d7da0 <_Z16_fetch_usbserialv>
   d5d70:	493d      	ldr	r1, [pc, #244]	; (d5e68 <_ZN7UbiHTTP3getEPKcS1_+0x1b0>)
   d5d72:	f001 fb81 	bl	d7478 <_ZN5Print5printEPKc>
      Serial.print(device_label);
   d5d76:	f002 f813 	bl	d7da0 <_Z16_fetch_usbserialv>
   d5d7a:	4631      	mov	r1, r6
   d5d7c:	f001 fb7c 	bl	d7478 <_ZN5Print5printEPKc>
      Serial.print("/");
   d5d80:	f002 f80e 	bl	d7da0 <_Z16_fetch_usbserialv>
   d5d84:	4939      	ldr	r1, [pc, #228]	; (d5e6c <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
   d5d86:	f001 fb77 	bl	d7478 <_ZN5Print5printEPKc>
      Serial.print(variable_label);
   d5d8a:	f002 f809 	bl	d7da0 <_Z16_fetch_usbserialv>
   d5d8e:	4629      	mov	r1, r5
   d5d90:	f001 fb72 	bl	d7478 <_ZN5Print5printEPKc>
      Serial.print("/lv");
   d5d94:	f002 f804 	bl	d7da0 <_Z16_fetch_usbserialv>
   d5d98:	4935      	ldr	r1, [pc, #212]	; (d5e70 <_ZN7UbiHTTP3getEPKcS1_+0x1b8>)
   d5d9a:	f001 fb6d 	bl	d7478 <_ZN5Print5printEPKc>
      Serial.print(" HTTP/1.1\r\n");
   d5d9e:	f001 ffff 	bl	d7da0 <_Z16_fetch_usbserialv>
   d5da2:	4934      	ldr	r1, [pc, #208]	; (d5e74 <_ZN7UbiHTTP3getEPKcS1_+0x1bc>)
   d5da4:	f001 fb68 	bl	d7478 <_ZN5Print5printEPKc>
      Serial.print("Host: ");
   d5da8:	f001 fffa 	bl	d7da0 <_Z16_fetch_usbserialv>
   d5dac:	4932      	ldr	r1, [pc, #200]	; (d5e78 <_ZN7UbiHTTP3getEPKcS1_+0x1c0>)
   d5dae:	f001 fb63 	bl	d7478 <_ZN5Print5printEPKc>
      Serial.print(_host);
   d5db2:	f001 fff5 	bl	d7da0 <_Z16_fetch_usbserialv>
   d5db6:	6861      	ldr	r1, [r4, #4]
   d5db8:	f001 fb5e 	bl	d7478 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   d5dbc:	f001 fff0 	bl	d7da0 <_Z16_fetch_usbserialv>
   d5dc0:	492e      	ldr	r1, [pc, #184]	; (d5e7c <_ZN7UbiHTTP3getEPKcS1_+0x1c4>)
   d5dc2:	f001 fb59 	bl	d7478 <_ZN5Print5printEPKc>
      Serial.print("User-Agent: ");
   d5dc6:	f001 ffeb 	bl	d7da0 <_Z16_fetch_usbserialv>
   d5dca:	492d      	ldr	r1, [pc, #180]	; (d5e80 <_ZN7UbiHTTP3getEPKcS1_+0x1c8>)
   d5dcc:	f001 fb54 	bl	d7478 <_ZN5Print5printEPKc>
      Serial.print(_user_agent);
   d5dd0:	f001 ffe6 	bl	d7da0 <_Z16_fetch_usbserialv>
   d5dd4:	68a1      	ldr	r1, [r4, #8]
   d5dd6:	f001 fb4f 	bl	d7478 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   d5dda:	f001 ffe1 	bl	d7da0 <_Z16_fetch_usbserialv>
   d5dde:	4927      	ldr	r1, [pc, #156]	; (d5e7c <_ZN7UbiHTTP3getEPKcS1_+0x1c4>)
   d5de0:	f001 fb4a 	bl	d7478 <_ZN5Print5printEPKc>
      Serial.print("X-Auth-Token: ");
   d5de4:	f001 ffdc 	bl	d7da0 <_Z16_fetch_usbserialv>
   d5de8:	4926      	ldr	r1, [pc, #152]	; (d5e84 <_ZN7UbiHTTP3getEPKcS1_+0x1cc>)
   d5dea:	f001 fb45 	bl	d7478 <_ZN5Print5printEPKc>
      Serial.print(_token);
   d5dee:	f001 ffd7 	bl	d7da0 <_Z16_fetch_usbserialv>
   d5df2:	68e1      	ldr	r1, [r4, #12]
   d5df4:	f001 fb40 	bl	d7478 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   d5df8:	f001 ffd2 	bl	d7da0 <_Z16_fetch_usbserialv>
   d5dfc:	491f      	ldr	r1, [pc, #124]	; (d5e7c <_ZN7UbiHTTP3getEPKcS1_+0x1c4>)
   d5dfe:	f001 fb3b 	bl	d7478 <_ZN5Print5printEPKc>
      Serial.print("Content-Type: application/json\r\n\r\n");
   d5e02:	f001 ffcd 	bl	d7da0 <_Z16_fetch_usbserialv>
   d5e06:	4920      	ldr	r1, [pc, #128]	; (d5e88 <_ZN7UbiHTTP3getEPKcS1_+0x1d0>)
   d5e08:	f001 fb36 	bl	d7478 <_ZN5Print5printEPKc>
    if (!waitServerAnswer()) {
   d5e0c:	4620      	mov	r0, r4
   d5e0e:	f7ff fe19 	bl	d5a44 <_ZN7UbiHTTP16waitServerAnswerEv>
   d5e12:	b948      	cbnz	r0, d5e28 <_ZN7UbiHTTP3getEPKcS1_+0x170>
      _client_http_ubi.stop();
   d5e14:	4813      	ldr	r0, [pc, #76]	; (d5e64 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
      return ERROR_VALUE;
   d5e16:	ed9f 8a1d 	vldr	s16, [pc, #116]	; d5e8c <_ZN7UbiHTTP3getEPKcS1_+0x1d4>
      _client_http_ubi.stop();
   d5e1a:	f002 fb47 	bl	d84ac <_ZN9TCPClient4stopEv>
}
   d5e1e:	eeb0 0a48 	vmov.f32	s0, s16
   d5e22:	ecbd 8b02 	vpop	{d8}
   d5e26:	bd70      	pop	{r4, r5, r6, pc}
    char* response = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   d5e28:	f44f 702f 	mov.w	r0, #700	; 0x2bc
   d5e2c:	f000 fd92 	bl	d6954 <malloc>
    readServerAnswer(response);
   d5e30:	4601      	mov	r1, r0
    char* response = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   d5e32:	4605      	mov	r5, r0
    readServerAnswer(response);
   d5e34:	4620      	mov	r0, r4
   d5e36:	f7ff fdc3 	bl	d59c0 <_ZN7UbiHTTP16readServerAnswerEPc>
  if (request_type == "LV") {
   d5e3a:	4628      	mov	r0, r5
   d5e3c:	f7ff fd04 	bl	d5848 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0>
    _client_http_ubi.stop();
   d5e40:	4808      	ldr	r0, [pc, #32]	; (d5e64 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d5e42:	eeb0 8a40 	vmov.f32	s16, s0
   d5e46:	f002 fb31 	bl	d84ac <_ZN9TCPClient4stopEv>
    free(response);
   d5e4a:	4628      	mov	r0, r5
   d5e4c:	f000 fd8a 	bl	d6964 <free>
    return value;
   d5e50:	e7e5      	b.n	d5e1e <_ZN7UbiHTTP3getEPKcS1_+0x166>
  if (_debug) {
   d5e52:	7d23      	ldrb	r3, [r4, #20]
   d5e54:	2b00      	cmp	r3, #0
   d5e56:	d0dd      	beq.n	d5e14 <_ZN7UbiHTTP3getEPKcS1_+0x15c>
    Serial.println("Connection Failed ubidots - Try Again");
   d5e58:	f001 ffa2 	bl	d7da0 <_Z16_fetch_usbserialv>
   d5e5c:	490c      	ldr	r1, [pc, #48]	; (d5e90 <_ZN7UbiHTTP3getEPKcS1_+0x1d8>)
   d5e5e:	f001 fb1e 	bl	d749e <_ZN5Print7printlnEPKc>
   d5e62:	e7d7      	b.n	d5e14 <_ZN7UbiHTTP3getEPKcS1_+0x15c>
   d5e64:	2003e550 	.word	0x2003e550
   d5e68:	000dbcd4 	.word	0x000dbcd4
   d5e6c:	000dbce9 	.word	0x000dbce9
   d5e70:	000dbceb 	.word	0x000dbceb
   d5e74:	000dbbdf 	.word	0x000dbbdf
   d5e78:	000dbbeb 	.word	0x000dbbeb
   d5e7c:	000dbd0f 	.word	0x000dbd0f
   d5e80:	000dbbf2 	.word	0x000dbbf2
   d5e84:	000dbbff 	.word	0x000dbbff
   d5e88:	000dbcef 	.word	0x000dbcef
   d5e8c:	cda2425f 	.word	0xcda2425f
   d5e90:	000dbd12 	.word	0x000dbd12

000d5e94 <_GLOBAL__sub_I__ZN7UbiHTTPC2EPKciS1_S1_>:
}
   d5e94:	b510      	push	{r4, lr}
   d5e96:	4c05      	ldr	r4, [pc, #20]	; (d5eac <_GLOBAL__sub_I__ZN7UbiHTTPC2EPKciS1_S1_+0x18>)
   d5e98:	4620      	mov	r0, r4
   d5e9a:	f002 fb57 	bl	d854c <_ZN9TCPClientC1Ev>
   d5e9e:	4620      	mov	r0, r4
   d5ea0:	4a03      	ldr	r2, [pc, #12]	; (d5eb0 <_GLOBAL__sub_I__ZN7UbiHTTPC2EPKciS1_S1_+0x1c>)
   d5ea2:	4904      	ldr	r1, [pc, #16]	; (d5eb4 <_GLOBAL__sub_I__ZN7UbiHTTPC2EPKciS1_S1_+0x20>)
   d5ea4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d5ea8:	f002 bd2c 	b.w	d8904 <__aeabi_atexit>
   d5eac:	2003e550 	.word	0x2003e550
   d5eb0:	2003e468 	.word	0x2003e468
   d5eb4:	000d4ab9 	.word	0x000d4ab9

000d5eb8 <_ZNSt17_Function_handlerIFP11UbiProtocolvEPS2_E9_M_invokeERKSt9_Any_data>:
	return (*_Base::_M_get_pointer(__functor))(
   d5eb8:	6803      	ldr	r3, [r0, #0]
   d5eba:	4718      	bx	r3

000d5ebc <_ZNSt14_Function_base13_Base_managerIPFP11UbiProtocolvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	  switch (__op)
   d5ebc:	2a01      	cmp	r2, #1
   d5ebe:	d003      	beq.n	d5ec8 <_ZNSt14_Function_base13_Base_managerIPFP11UbiProtocolvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xc>
   d5ec0:	2a02      	cmp	r2, #2
   d5ec2:	d003      	beq.n	d5ecc <_ZNSt14_Function_base13_Base_managerIPFP11UbiProtocolvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x10>
	}
   d5ec4:	2000      	movs	r0, #0
   d5ec6:	4770      	bx	lr
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d5ec8:	6001      	str	r1, [r0, #0]
	      break;
   d5eca:	e7fb      	b.n	d5ec4 <_ZNSt14_Function_base13_Base_managerIPFP11UbiProtocolvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x8>
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d5ecc:	680b      	ldr	r3, [r1, #0]
   d5ece:	6003      	str	r3, [r0, #0]
	}
   d5ed0:	e7f8      	b.n	d5ec4 <_ZNSt14_Function_base13_Base_managerIPFP11UbiProtocolvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x8>
	...

000d5ed4 <_Z10builderTcpv>:
  mapProtocol::iterator i = command_list.find(_iot_protocol);
  UbiProtocol* ubiBuilder = (i->second)();
  return ubiBuilder;
}

UbiProtocol* builderTcp() {
   d5ed4:	b513      	push	{r0, r1, r4, lr}
  UbiProtocol* tcpInstance = new UbiTCP(_host, UBIDOTS_TCP_PORT, USER_AGENT, _token);
   d5ed6:	201c      	movs	r0, #28
   d5ed8:	f7fe f8dd 	bl	d4096 <_Znwj>
   d5edc:	4604      	mov	r4, r0
   d5ede:	b148      	cbz	r0, d5ef4 <_Z10builderTcpv+0x20>
   d5ee0:	4b06      	ldr	r3, [pc, #24]	; (d5efc <_Z10builderTcpv+0x28>)
   d5ee2:	4907      	ldr	r1, [pc, #28]	; (d5f00 <_Z10builderTcpv+0x2c>)
   d5ee4:	681b      	ldr	r3, [r3, #0]
   d5ee6:	9300      	str	r3, [sp, #0]
   d5ee8:	6809      	ldr	r1, [r1, #0]
   d5eea:	4b06      	ldr	r3, [pc, #24]	; (d5f04 <_Z10builderTcpv+0x30>)
   d5eec:	f242 3234 	movw	r2, #9012	; 0x2334
   d5ef0:	f7fe fe06 	bl	d4b00 <_ZN6UbiTCPC1EPKciS1_S1_>
  return tcpInstance;
}
   d5ef4:	4620      	mov	r0, r4
   d5ef6:	b002      	add	sp, #8
   d5ef8:	bd10      	pop	{r4, pc}
   d5efa:	bf00      	nop
   d5efc:	2003e5f4 	.word	0x2003e5f4
   d5f00:	2003e5f0 	.word	0x2003e5f0
   d5f04:	000dbb4a 	.word	0x000dbb4a

000d5f08 <_Z11builderHttpv>:

UbiProtocol* builderHttp() {
   d5f08:	b513      	push	{r0, r1, r4, lr}
  UbiProtocol* httpInstance = new UbiHTTP(_host, UBIDOTS_HTTP_PORT, USER_AGENT, _token);
   d5f0a:	2020      	movs	r0, #32
   d5f0c:	f7fe f8c3 	bl	d4096 <_Znwj>
   d5f10:	4604      	mov	r4, r0
   d5f12:	b140      	cbz	r0, d5f26 <_Z11builderHttpv+0x1e>
   d5f14:	4b05      	ldr	r3, [pc, #20]	; (d5f2c <_Z11builderHttpv+0x24>)
   d5f16:	4906      	ldr	r1, [pc, #24]	; (d5f30 <_Z11builderHttpv+0x28>)
   d5f18:	681b      	ldr	r3, [r3, #0]
   d5f1a:	9300      	str	r3, [sp, #0]
   d5f1c:	6809      	ldr	r1, [r1, #0]
   d5f1e:	4b05      	ldr	r3, [pc, #20]	; (d5f34 <_Z11builderHttpv+0x2c>)
   d5f20:	2250      	movs	r2, #80	; 0x50
   d5f22:	f7ff fceb 	bl	d58fc <_ZN7UbiHTTPC1EPKciS1_S1_>
  return httpInstance;
}
   d5f26:	4620      	mov	r0, r4
   d5f28:	b002      	add	sp, #8
   d5f2a:	bd10      	pop	{r4, pc}
   d5f2c:	2003e5f4 	.word	0x2003e5f4
   d5f30:	2003e5f0 	.word	0x2003e5f0
   d5f34:	000dbb4a 	.word	0x000dbb4a

000d5f38 <_Z10builderUdpv>:

UbiProtocol* builderUdp() {
   d5f38:	b513      	push	{r0, r1, r4, lr}
  UbiProtocol* udpInstance = new UbiUDP(_host, UBIDOTS_TCP_PORT, USER_AGENT, _token);
   d5f3a:	201c      	movs	r0, #28
   d5f3c:	f7fe f8ab 	bl	d4096 <_Znwj>
   d5f40:	4604      	mov	r4, r0
   d5f42:	b148      	cbz	r0, d5f58 <_Z10builderUdpv+0x20>
   d5f44:	4b06      	ldr	r3, [pc, #24]	; (d5f60 <_Z10builderUdpv+0x28>)
   d5f46:	4907      	ldr	r1, [pc, #28]	; (d5f64 <_Z10builderUdpv+0x2c>)
   d5f48:	681b      	ldr	r3, [r3, #0]
   d5f4a:	9300      	str	r3, [sp, #0]
   d5f4c:	6809      	ldr	r1, [r1, #0]
   d5f4e:	4b06      	ldr	r3, [pc, #24]	; (d5f68 <_Z10builderUdpv+0x30>)
   d5f50:	f242 3234 	movw	r2, #9012	; 0x2334
   d5f54:	f000 f9b4 	bl	d62c0 <_ZN6UbiUDPC1EPKciS1_S1_>
  return udpInstance;
}
   d5f58:	4620      	mov	r0, r4
   d5f5a:	b002      	add	sp, #8
   d5f5c:	bd10      	pop	{r4, pc}
   d5f5e:	bf00      	nop
   d5f60:	2003e5f4 	.word	0x2003e5f4
   d5f64:	2003e5f0 	.word	0x2003e5f0
   d5f68:	000dbb4a 	.word	0x000dbb4a

000d5f6c <_Z15builderParticlev>:

UbiProtocol* builderParticle() {
   d5f6c:	b513      	push	{r0, r1, r4, lr}
  UbiProtocol* particleInstance = new UbiParticle(_host, NULL, NULL, _token);
   d5f6e:	2014      	movs	r0, #20
   d5f70:	f7fe f891 	bl	d4096 <_Znwj>
   d5f74:	4604      	mov	r4, r0
   d5f76:	b140      	cbz	r0, d5f8a <_Z15builderParticlev+0x1e>
   d5f78:	4b05      	ldr	r3, [pc, #20]	; (d5f90 <_Z15builderParticlev+0x24>)
   d5f7a:	4906      	ldr	r1, [pc, #24]	; (d5f94 <_Z15builderParticlev+0x28>)
   d5f7c:	681b      	ldr	r3, [r3, #0]
   d5f7e:	9300      	str	r3, [sp, #0]
   d5f80:	2300      	movs	r3, #0
   d5f82:	6809      	ldr	r1, [r1, #0]
   d5f84:	461a      	mov	r2, r3
   d5f86:	f000 fa7d 	bl	d6484 <_ZN11UbiParticleC1EPKciS1_S1_>
  return particleInstance;
}
   d5f8a:	4620      	mov	r0, r4
   d5f8c:	b002      	add	sp, #8
   d5f8e:	bd10      	pop	{r4, pc}
   d5f90:	2003e5f4 	.word	0x2003e5f4
   d5f94:	2003e5f0 	.word	0x2003e5f0

000d5f98 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d5f98:	b510      	push	{r4, lr}
      if (_M_manager)
   d5f9a:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d5f9c:	4604      	mov	r4, r0
      if (_M_manager)
   d5f9e:	b113      	cbz	r3, d5fa6 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5fa0:	2203      	movs	r2, #3
   d5fa2:	4601      	mov	r1, r0
   d5fa4:	4798      	blx	r3
    }
   d5fa6:	4620      	mov	r0, r4
   d5fa8:	bd10      	pop	{r4, pc}
	...

000d5fac <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JEEEE5valueERS3_E4typeEOS9_.isra.0>:
       *  If @a __f is a non-NULL function pointer or an object of type @c
       *  reference_wrapper<F>, this function will not throw.
       */
      template<typename _Functor>
	_Requires<_Callable<typename decay<_Functor>::type>, function&>
	operator=(_Functor&& __f)
   d5fac:	b510      	push	{r4, lr}
   d5fae:	b086      	sub	sp, #24
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5fb0:	ab02      	add	r3, sp, #8
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d5fb2:	9102      	str	r1, [sp, #8]
	operator=(_Functor&& __f)
   d5fb4:	4604      	mov	r4, r0
   d5fb6:	e893 0003 	ldmia.w	r3, {r0, r1}
   d5fba:	466a      	mov	r2, sp
   d5fbc:	e882 0003 	stmia.w	r2, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d5fc0:	e894 0003 	ldmia.w	r4, {r0, r1}
   d5fc4:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d5fc8:	e892 0003 	ldmia.w	r2, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d5fcc:	68a2      	ldr	r2, [r4, #8]
   d5fce:	9204      	str	r2, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d5fd0:	4a06      	ldr	r2, [pc, #24]	; (d5fec <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JEEEE5valueERS3_E4typeEOS9_.isra.0+0x40>)
   d5fd2:	60a2      	str	r2, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   d5fd4:	68e2      	ldr	r2, [r4, #12]
   d5fd6:	9205      	str	r2, [sp, #20]
      __b = _GLIBCXX_MOVE(__tmp);
   d5fd8:	4a05      	ldr	r2, [pc, #20]	; (d5ff0 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JEEEE5valueERS3_E4typeEOS9_.isra.0+0x44>)
   d5fda:	60e2      	str	r2, [r4, #12]
   d5fdc:	e884 0003 	stmia.w	r4, {r0, r1}
    class function<_Res(_ArgTypes...)>
   d5fe0:	4618      	mov	r0, r3
   d5fe2:	f7ff ffd9 	bl	d5f98 <_ZNSt14_Function_baseD1Ev>
	{
	  function(std::forward<_Functor>(__f)).swap(*this);
	  return *this;
	}
   d5fe6:	4620      	mov	r0, r4
   d5fe8:	b006      	add	sp, #24
   d5fea:	bd10      	pop	{r4, pc}
   d5fec:	000d5ebd 	.word	0x000d5ebd
   d5ff0:	000d5eb9 	.word	0x000d5eb9

000d5ff4 <_ZN10UbiBuilder7builderEv>:
UbiProtocol* UbiBuilder::builder() {
   d5ff4:	b570      	push	{r4, r5, r6, lr}
      { return &this->_M_impl._M_header; }
   d5ff6:	f100 0108 	add.w	r1, r0, #8
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
		      _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    find(const _Key& __k)
    {
      iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
   d5ffa:	68c2      	ldr	r2, [r0, #12]
      { return &this->_M_impl._M_header; }
   d5ffc:	460b      	mov	r3, r1
      while (__x != 0)
   d5ffe:	b13a      	cbz	r2, d6010 <_ZN10UbiBuilder7builderEv+0x1c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
   d6000:	7c15      	ldrb	r5, [r2, #16]
   d6002:	7804      	ldrb	r4, [r0, #0]
   d6004:	42a5      	cmp	r5, r4
   d6006:	bf2a      	itet	cs
   d6008:	4613      	movcs	r3, r2
	  __x = _S_right(__x);
   d600a:	68d2      	ldrcc	r2, [r2, #12]
	  __y = __x, __x = _S_left(__x);
   d600c:	6892      	ldrcs	r2, [r2, #8]
   d600e:	e7f6      	b.n	d5ffe <_ZN10UbiBuilder7builderEv+0xa>
      return (__j == end()
	      || _M_impl._M_key_compare(__k,
					_S_key(__j._M_node))) ? end() : __j;
   d6010:	4299      	cmp	r1, r3
   d6012:	d004      	beq.n	d601e <_ZN10UbiBuilder7builderEv+0x2a>
	      || _M_impl._M_key_compare(__k,
   d6014:	7800      	ldrb	r0, [r0, #0]
   d6016:	7c1a      	ldrb	r2, [r3, #16]
   d6018:	4290      	cmp	r0, r2
   d601a:	bf38      	it	cc
   d601c:	460b      	movcc	r3, r1
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d601e:	69da      	ldr	r2, [r3, #28]
   d6020:	b90a      	cbnz	r2, d6026 <_ZN10UbiBuilder7builderEv+0x32>
	__throw_bad_function_call();
   d6022:	f002 fd2a 	bl	d8a7a <_ZSt25__throw_bad_function_callv>
}
   d6026:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d602a:	6a1a      	ldr	r2, [r3, #32]
   d602c:	f103 0014 	add.w	r0, r3, #20
   d6030:	4710      	bx	r2

000d6032 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_>:
      _Link_type __x = _M_begin();
   d6032:	688b      	ldr	r3, [r1, #8]
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   d6034:	b570      	push	{r4, r5, r6, lr}
   d6036:	4616      	mov	r6, r2
   d6038:	4604      	mov	r4, r0
      { return &this->_M_impl._M_header; }
   d603a:	1d0d      	adds	r5, r1, #4
      bool __comp = true;
   d603c:	2201      	movs	r2, #1
      while (__x != 0)
   d603e:	b15b      	cbz	r3, d6058 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x26>
	  __x = __comp ? _S_left(__x) : _S_right(__x);
   d6040:	7830      	ldrb	r0, [r6, #0]
   d6042:	7c1a      	ldrb	r2, [r3, #16]
   d6044:	4290      	cmp	r0, r2
   d6046:	bf34      	ite	cc
   d6048:	6898      	ldrcc	r0, [r3, #8]
   d604a:	68d8      	ldrcs	r0, [r3, #12]
   d604c:	461d      	mov	r5, r3
   d604e:	bf34      	ite	cc
   d6050:	2201      	movcc	r2, #1
   d6052:	2200      	movcs	r2, #0
   d6054:	4603      	mov	r3, r0
   d6056:	e7f2      	b.n	d603e <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0xc>
      if (__comp)
   d6058:	b192      	cbz	r2, d6080 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x4e>
	  if (__j == begin())
   d605a:	68ca      	ldr	r2, [r1, #12]
   d605c:	42aa      	cmp	r2, r5
   d605e:	d103      	bne.n	d6068 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x36>
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
   d6060:	e9c4 3500 	strd	r3, r5, [r4]
    }
   d6064:	4620      	mov	r0, r4
   d6066:	bd70      	pop	{r4, r5, r6, pc}
	_M_node = _Rb_tree_decrement(_M_node);
   d6068:	4628      	mov	r0, r5
   d606a:	f002 fca8 	bl	d89be <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
   d606e:	7833      	ldrb	r3, [r6, #0]
   d6070:	7c02      	ldrb	r2, [r0, #16]
   d6072:	429a      	cmp	r2, r3
   d6074:	f04f 0300 	mov.w	r3, #0
   d6078:	d3f2      	bcc.n	d6060 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x2e>
       : first(std::forward<_U1>(__x)), second(__y) { }
   d607a:	e9c4 0300 	strd	r0, r3, [r4]
   d607e:	e7f1      	b.n	d6064 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x32>
   d6080:	4628      	mov	r0, r5
   d6082:	e7f4      	b.n	d606e <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x3c>

000d6084 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>:
      operator[](key_type&& __k)
   d6084:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
      { return &this->_M_impl._M_header; }
   d6088:	f100 0804 	add.w	r8, r0, #4
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
   d608c:	6885      	ldr	r5, [r0, #8]
   d608e:	b085      	sub	sp, #20
   d6090:	4606      	mov	r6, r0
   d6092:	4689      	mov	r9, r1
      { return &this->_M_impl._M_header; }
   d6094:	4644      	mov	r4, r8
      while (__x != 0)
   d6096:	b155      	cbz	r5, d60ae <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x2a>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
   d6098:	f899 3000 	ldrb.w	r3, [r9]
   d609c:	7c2a      	ldrb	r2, [r5, #16]
   d609e:	429a      	cmp	r2, r3
	  __x = _S_right(__x);
   d60a0:	bf36      	itet	cc
   d60a2:	68eb      	ldrcc	r3, [r5, #12]
	  __y = __x, __x = _S_left(__x);
   d60a4:	68ab      	ldrcs	r3, [r5, #8]
	  __x = _S_right(__x);
   d60a6:	4625      	movcc	r5, r4
   d60a8:	462c      	mov	r4, r5
   d60aa:	461d      	mov	r5, r3
   d60ac:	e7f3      	b.n	d6096 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x12>
	if (__i == end() || key_comp()(__k, (*__i).first))
   d60ae:	45a0      	cmp	r8, r4
   d60b0:	d004      	beq.n	d60bc <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x38>
   d60b2:	f899 2000 	ldrb.w	r2, [r9]
   d60b6:	7c23      	ldrb	r3, [r4, #16]
   d60b8:	429a      	cmp	r2, r3
   d60ba:	d22e      	bcs.n	d611a <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x96>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d60bc:	2024      	movs	r0, #36	; 0x24
   d60be:	f7fd ffea 	bl	d4096 <_Znwj>
      inline
      pair<_T1, _T2>::
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
	   _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
   d60c2:	f899 9000 	ldrb.w	r9, [r9]
   d60c6:	f880 9010 	strb.w	r9, [r0, #16]
    _Function_base() : _M_manager(nullptr) { }
   d60ca:	2300      	movs	r3, #0
      if (__pos._M_node == _M_end())
   d60cc:	45a0      	cmp	r8, r4
   d60ce:	4607      	mov	r7, r0
      // Can be used to avoid value-initialization zeroing _M_storage.
      __aligned_membuf(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      { return static_cast<void*>(&_M_storage); }
   d60d0:	f100 0210 	add.w	r2, r0, #16
   d60d4:	61c3      	str	r3, [r0, #28]
   d60d6:	d125      	bne.n	d6124 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xa0>
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
   d60d8:	6973      	ldr	r3, [r6, #20]
   d60da:	b11b      	cbz	r3, d60e4 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x60>
   d60dc:	6931      	ldr	r1, [r6, #16]
   d60de:	7c0b      	ldrb	r3, [r1, #16]
   d60e0:	454b      	cmp	r3, r9
   d60e2:	d309      	bcc.n	d60f8 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x74>
	    return _M_get_insert_unique_pos(__k);
   d60e4:	4631      	mov	r1, r6
   d60e6:	a802      	add	r0, sp, #8
   d60e8:	f7ff ffa3 	bl	d6032 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_>
   d60ec:	e9dd 4102 	ldrd	r4, r1, [sp, #8]
	    if (__res.second)
   d60f0:	2900      	cmp	r1, #0
   d60f2:	d051      	beq.n	d6198 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x114>
			    || _M_impl._M_key_compare(_S_key(__z),
   d60f4:	2c00      	cmp	r4, #0
   d60f6:	d14d      	bne.n	d6194 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x110>
      bool __insert_left = (__x != 0 || __p == _M_end()
   d60f8:	4588      	cmp	r8, r1
   d60fa:	d04b      	beq.n	d6194 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x110>
			    || _M_impl._M_key_compare(_S_key(__z),
   d60fc:	7c38      	ldrb	r0, [r7, #16]
   d60fe:	7c0b      	ldrb	r3, [r1, #16]
   d6100:	4298      	cmp	r0, r3
   d6102:	bf2c      	ite	cs
   d6104:	2000      	movcs	r0, #0
   d6106:	2001      	movcc	r0, #1
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
   d6108:	4643      	mov	r3, r8
   d610a:	460a      	mov	r2, r1
   d610c:	4639      	mov	r1, r7
   d610e:	f002 fc58 	bl	d89c2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
   d6112:	6973      	ldr	r3, [r6, #20]
   d6114:	3301      	adds	r3, #1
   d6116:	6173      	str	r3, [r6, #20]
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
   d6118:	463c      	mov	r4, r7
      }
   d611a:	f104 0014 	add.w	r0, r4, #20
   d611e:	b005      	add	sp, #20
   d6120:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
   d6124:	7c23      	ldrb	r3, [r4, #16]
   d6126:	9201      	str	r2, [sp, #4]
   d6128:	454b      	cmp	r3, r9
   d612a:	d918      	bls.n	d615e <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xda>
	  if (__pos._M_node == _M_leftmost()) // begin()
   d612c:	68f3      	ldr	r3, [r6, #12]
   d612e:	429c      	cmp	r4, r3
   d6130:	d009      	beq.n	d6146 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xc2>
	_M_node = _Rb_tree_decrement(_M_node);
   d6132:	4620      	mov	r0, r4
   d6134:	f002 fc43 	bl	d89be <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
   d6138:	7c03      	ldrb	r3, [r0, #16]
   d613a:	9a01      	ldr	r2, [sp, #4]
   d613c:	454b      	cmp	r3, r9
   d613e:	d205      	bcs.n	d614c <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xc8>
	      if (_S_right(__before._M_node) == 0)
   d6140:	68c3      	ldr	r3, [r0, #12]
   d6142:	b953      	cbnz	r3, d615a <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xd6>
   d6144:	4604      	mov	r4, r0
       : first(__x), second(std::forward<_U2>(__y)) { }
   d6146:	4621      	mov	r1, r4
   d6148:	461c      	mov	r4, r3
   d614a:	e7d1      	b.n	d60f0 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x6c>
	    return _M_get_insert_unique_pos(__k);
   d614c:	4631      	mov	r1, r6
   d614e:	a802      	add	r0, sp, #8
   d6150:	f7ff ff6f 	bl	d6032 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_>
   d6154:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   d6158:	e7f5      	b.n	d6146 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xc2>
   d615a:	4623      	mov	r3, r4
   d615c:	e7f3      	b.n	d6146 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xc2>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
   d615e:	d21b      	bcs.n	d6198 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x114>
	  if (__pos._M_node == _M_rightmost())
   d6160:	6931      	ldr	r1, [r6, #16]
   d6162:	428c      	cmp	r4, r1
   d6164:	d00b      	beq.n	d617e <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xfa>
	_M_node = _Rb_tree_increment(_M_node);
   d6166:	4620      	mov	r0, r4
   d6168:	f002 fc16 	bl	d8998 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
   d616c:	7c03      	ldrb	r3, [r0, #16]
   d616e:	9a01      	ldr	r2, [sp, #4]
   d6170:	454b      	cmp	r3, r9
	_M_node = _Rb_tree_increment(_M_node);
   d6172:	4605      	mov	r5, r0
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
   d6174:	d905      	bls.n	d6182 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xfe>
	      if (_S_right(__pos._M_node) == 0)
   d6176:	68e3      	ldr	r3, [r4, #12]
   d6178:	b953      	cbnz	r3, d6190 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x10c>
   d617a:	4621      	mov	r1, r4
   d617c:	461d      	mov	r5, r3
   d617e:	462c      	mov	r4, r5
   d6180:	e7b6      	b.n	d60f0 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x6c>
	    return _M_get_insert_unique_pos(__k);
   d6182:	4631      	mov	r1, r6
   d6184:	a802      	add	r0, sp, #8
   d6186:	f7ff ff54 	bl	d6032 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_>
   d618a:	e9dd 5102 	ldrd	r5, r1, [sp, #8]
   d618e:	e7f6      	b.n	d617e <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xfa>
   d6190:	4601      	mov	r1, r0
   d6192:	e7f4      	b.n	d617e <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xfa>
			    || _M_impl._M_key_compare(_S_key(__z),
   d6194:	2001      	movs	r0, #1
   d6196:	e7b7      	b.n	d6108 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x84>
    class function<_Res(_ArgTypes...)>
   d6198:	f107 0014 	add.w	r0, r7, #20
   d619c:	f7ff fefc 	bl	d5f98 <_ZNSt14_Function_baseD1Ev>
	::operator delete(__p);
   d61a0:	4638      	mov	r0, r7
   d61a2:	f7fd ff7c 	bl	d409e <_ZdlPv>
   d61a6:	4627      	mov	r7, r4
   d61a8:	e7b6      	b.n	d6118 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x94>
	...

000d61ac <_ZN10UbiBuilderC1EPKcS1_11IotProtocol>:
UbiBuilder::UbiBuilder(const char* host, const char* token, IotProtocol iot_protocol) {
   d61ac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d61b0:	1d05      	adds	r5, r0, #4
      _M_header._M_color = _S_red;
   d61b2:	2600      	movs	r6, #0
   d61b4:	4617      	mov	r7, r2
	  : _Node_allocator()
   d61b6:	f100 0208 	add.w	r2, r0, #8
      _M_header._M_left = &_M_header;
   d61ba:	e9c0 6203 	strd	r6, r2, [r0, #12]
      _M_node_count = 0;
   d61be:	e9c0 2605 	strd	r2, r6, [r0, #20]
   d61c2:	4604      	mov	r4, r0
   d61c4:	4688      	mov	r8, r1
      _M_header._M_color = _S_red;
   d61c6:	7206      	strb	r6, [r0, #8]
  _iot_protocol = iot_protocol;
   d61c8:	7003      	strb	r3, [r0, #0]
  command_list[UBI_TCP] = &builderTcp;
   d61ca:	f10d 0107 	add.w	r1, sp, #7
   d61ce:	2301      	movs	r3, #1
   d61d0:	4628      	mov	r0, r5
   d61d2:	f88d 3007 	strb.w	r3, [sp, #7]
   d61d6:	f7ff ff55 	bl	d6084 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>
   d61da:	4916      	ldr	r1, [pc, #88]	; (d6234 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x88>)
   d61dc:	f7ff fee6 	bl	d5fac <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JEEEE5valueERS3_E4typeEOS9_.isra.0>
  command_list[UBI_HTTP] = &builderHttp;
   d61e0:	f10d 0107 	add.w	r1, sp, #7
   d61e4:	4628      	mov	r0, r5
   d61e6:	f88d 6007 	strb.w	r6, [sp, #7]
   d61ea:	f7ff ff4b 	bl	d6084 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>
   d61ee:	4912      	ldr	r1, [pc, #72]	; (d6238 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x8c>)
   d61f0:	f7ff fedc 	bl	d5fac <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JEEEE5valueERS3_E4typeEOS9_.isra.0>
  command_list[UBI_UDP] = &builderUdp;
   d61f4:	2302      	movs	r3, #2
   d61f6:	f10d 0107 	add.w	r1, sp, #7
   d61fa:	4628      	mov	r0, r5
   d61fc:	f88d 3007 	strb.w	r3, [sp, #7]
   d6200:	f7ff ff40 	bl	d6084 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>
   d6204:	490d      	ldr	r1, [pc, #52]	; (d623c <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x90>)
   d6206:	f7ff fed1 	bl	d5fac <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JEEEE5valueERS3_E4typeEOS9_.isra.0>
  command_list[UBI_PARTICLE] = &builderParticle;
   d620a:	2303      	movs	r3, #3
   d620c:	f10d 0107 	add.w	r1, sp, #7
   d6210:	4628      	mov	r0, r5
   d6212:	f88d 3007 	strb.w	r3, [sp, #7]
   d6216:	f7ff ff35 	bl	d6084 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>
   d621a:	4909      	ldr	r1, [pc, #36]	; (d6240 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x94>)
   d621c:	f7ff fec6 	bl	d5fac <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JEEEE5valueERS3_E4typeEOS9_.isra.0>
  _host = host;
   d6220:	4b08      	ldr	r3, [pc, #32]	; (d6244 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x98>)
   d6222:	f8c3 8000 	str.w	r8, [r3]
  _token = token;
   d6226:	4b08      	ldr	r3, [pc, #32]	; (d6248 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x9c>)
}
   d6228:	4620      	mov	r0, r4
  _token = token;
   d622a:	601f      	str	r7, [r3, #0]
}
   d622c:	b002      	add	sp, #8
   d622e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6232:	bf00      	nop
   d6234:	000d5ed5 	.word	0x000d5ed5
   d6238:	000d5f09 	.word	0x000d5f09
   d623c:	000d5f39 	.word	0x000d5f39
   d6240:	000d5f6d 	.word	0x000d5f6d
   d6244:	2003e5f0 	.word	0x2003e5f0
   d6248:	2003e5f4 	.word	0x2003e5f4

000d624c <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol>:
}
   d624c:	b510      	push	{r4, lr}
   d624e:	4c0e      	ldr	r4, [pc, #56]	; (d6288 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x3c>)
   d6250:	4620      	mov	r0, r4
   d6252:	f002 f97b 	bl	d854c <_ZN9TCPClientC1Ev>
   d6256:	4620      	mov	r0, r4
   d6258:	4c0c      	ldr	r4, [pc, #48]	; (d628c <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x40>)
   d625a:	4a0d      	ldr	r2, [pc, #52]	; (d6290 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x44>)
   d625c:	490d      	ldr	r1, [pc, #52]	; (d6294 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x48>)
   d625e:	f002 fb51 	bl	d8904 <__aeabi_atexit>
   d6262:	4620      	mov	r0, r4
   d6264:	f002 f972 	bl	d854c <_ZN9TCPClientC1Ev>
   d6268:	4620      	mov	r0, r4
   d626a:	4c0b      	ldr	r4, [pc, #44]	; (d6298 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x4c>)
   d626c:	4a08      	ldr	r2, [pc, #32]	; (d6290 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x44>)
   d626e:	4909      	ldr	r1, [pc, #36]	; (d6294 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x48>)
   d6270:	f002 fb48 	bl	d8904 <__aeabi_atexit>
   d6274:	4620      	mov	r0, r4
   d6276:	f000 feb1 	bl	d6fdc <_ZN3UDPC1Ev>
   d627a:	4620      	mov	r0, r4
   d627c:	4a04      	ldr	r2, [pc, #16]	; (d6290 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x44>)
   d627e:	4907      	ldr	r1, [pc, #28]	; (d629c <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x50>)
   d6280:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d6284:	f002 bb3e 	b.w	d8904 <__aeabi_atexit>
   d6288:	2003e5d4 	.word	0x2003e5d4
   d628c:	2003e56c 	.word	0x2003e56c
   d6290:	2003e468 	.word	0x2003e468
   d6294:	000d4ab9 	.word	0x000d4ab9
   d6298:	2003e588 	.word	0x2003e588
   d629c:	000d51d5 	.word	0x000d51d5

000d62a0 <_ZN6UbiUDP3getEPKcS1_>:

  _client_udp_ubi.stop();
  return true;
}

float UbiUDP::get(const char *device_label, const char *variable_label) { return ERROR_VALUE; }
   d62a0:	ed9f 0a01 	vldr	s0, [pc, #4]	; d62a8 <_ZN6UbiUDP3getEPKcS1_+0x8>
   d62a4:	4770      	bx	lr
   d62a6:	bf00      	nop
   d62a8:	cda2425f 	.word	0xcda2425f

000d62ac <_ZN6UbiUDP8setDebugEb>:

/**
 * Makes available debug traces
 */

void UbiUDP::setDebug(bool debug) { _debug = debug; }
   d62ac:	7501      	strb	r1, [r0, #20]
   d62ae:	4770      	bx	lr

000d62b0 <_ZN6UbiUDP17getMultipleValuesEPKcS1_>:
   d62b0:	2200      	movs	r2, #0
	  : _Node_allocator()
   d62b2:	1d01      	adds	r1, r0, #4
      _M_header._M_left = &_M_header;
   d62b4:	e9c0 2102 	strd	r2, r1, [r0, #8]
      _M_node_count = 0;
   d62b8:	e9c0 1204 	strd	r1, r2, [r0, #16]
      _M_header._M_color = _S_red;
   d62bc:	7102      	strb	r2, [r0, #4]
}

tcpMap UbiUDP::getMultipleValues(const char *deviceLabel, const char *variableLabels) {
  tcpMap results;
  return results;
}
   d62be:	4770      	bx	lr

000d62c0 <_ZN6UbiUDPC1EPKciS1_S1_>:
UbiUDP::UbiUDP(const char *host, const int port, const char *user_agent, const char *token) {
   d62c0:	b530      	push	{r4, r5, lr}
   d62c2:	4d06      	ldr	r5, [pc, #24]	; (d62dc <_ZN6UbiUDPC1EPKciS1_S1_+0x1c>)
   d62c4:	6005      	str	r5, [r0, #0]
  _user_agent = user_agent;
   d62c6:	e9c0 1301 	strd	r1, r3, [r0, #4]
UbiUDP::UbiUDP(const char *host, const int port, const char *user_agent, const char *token) {
   d62ca:	2500      	movs	r5, #0
  _token = token;
   d62cc:	9b03      	ldr	r3, [sp, #12]
UbiUDP::UbiUDP(const char *host, const int port, const char *user_agent, const char *token) {
   d62ce:	7505      	strb	r5, [r0, #20]
   d62d0:	f241 3588 	movw	r5, #5000	; 0x1388
  _port = port;
   d62d4:	e9c0 3203 	strd	r3, r2, [r0, #12]
UbiUDP::UbiUDP(const char *host, const int port, const char *user_agent, const char *token) {
   d62d8:	6185      	str	r5, [r0, #24]
}
   d62da:	bd30      	pop	{r4, r5, pc}
   d62dc:	000dbe04 	.word	0x000dbe04

000d62e0 <_GLOBAL__sub_I__ZN6UbiUDPC2EPKciS1_S1_>:
}
   d62e0:	b510      	push	{r4, lr}
   d62e2:	4c05      	ldr	r4, [pc, #20]	; (d62f8 <_GLOBAL__sub_I__ZN6UbiUDPC2EPKciS1_S1_+0x18>)
   d62e4:	4620      	mov	r0, r4
   d62e6:	f000 fe79 	bl	d6fdc <_ZN3UDPC1Ev>
   d62ea:	4620      	mov	r0, r4
   d62ec:	4a03      	ldr	r2, [pc, #12]	; (d62fc <_GLOBAL__sub_I__ZN6UbiUDPC2EPKciS1_S1_+0x1c>)
   d62ee:	4904      	ldr	r1, [pc, #16]	; (d6300 <_GLOBAL__sub_I__ZN6UbiUDPC2EPKciS1_S1_+0x20>)
   d62f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d62f4:	f002 bb06 	b.w	d8904 <__aeabi_atexit>
   d62f8:	2003e5f8 	.word	0x2003e5f8
   d62fc:	2003e468 	.word	0x2003e468
   d6300:	000d51d5 	.word	0x000d51d5

000d6304 <_ZN6UbiUDP11getServerIpEv>:
IPAddress UbiUDP::getServerIp() {
   d6304:	b510      	push	{r4, lr}
   d6306:	4604      	mov	r4, r0
  return WiFi.resolve(_host);
   d6308:	684a      	ldr	r2, [r1, #4]
   d630a:	4902      	ldr	r1, [pc, #8]	; (d6314 <_ZN6UbiUDP11getServerIpEv+0x10>)
   d630c:	f002 f9a4 	bl	d8658 <_ZN5spark12NetworkClass7resolveEPKc>
}
   d6310:	4620      	mov	r0, r4
   d6312:	bd10      	pop	{r4, pc}
   d6314:	2003e7b8 	.word	0x2003e7b8

000d6318 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags>:
bool UbiUDP::sendData(const char *device_label, const char *device_name, char *payload, UbiFlags *flags) {
   d6318:	b5f0      	push	{r4, r5, r6, r7, lr}
   d631a:	b08f      	sub	sp, #60	; 0x3c
  IPAddress serverIpAddress = getServerIp();
   d631c:	4601      	mov	r1, r0
bool UbiUDP::sendData(const char *device_label, const char *device_name, char *payload, UbiFlags *flags) {
   d631e:	4606      	mov	r6, r0
  IPAddress serverIpAddress = getServerIp();
   d6320:	a802      	add	r0, sp, #8
bool UbiUDP::sendData(const char *device_label, const char *device_name, char *payload, UbiFlags *flags) {
   d6322:	461f      	mov	r7, r3
  IPAddress serverIpAddress = getServerIp();
   d6324:	f7ff ffee 	bl	d6304 <_ZN6UbiUDP11getServerIpEv>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d6328:	a802      	add	r0, sp, #8
   d632a:	f001 fca5 	bl	d7c78 <_ZNK9IPAddresscvbEv>
  if (!serverIpAddress) {
   d632e:	b9a0      	cbnz	r0, d635a <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x42>
    if (_debug) {
   d6330:	7d33      	ldrb	r3, [r6, #20]
   d6332:	b123      	cbz	r3, d633e <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x26>
      Serial.println(
   d6334:	f001 fd34 	bl	d7da0 <_Z16_fetch_usbserialv>
   d6338:	4927      	ldr	r1, [pc, #156]	; (d63d8 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc0>)
   d633a:	f001 f8b0 	bl	d749e <_ZN5Print7printlnEPKc>
    serverIpAddress = IPAddress(169, 55, 61, 243);
   d633e:	23f3      	movs	r3, #243	; 0xf3
   d6340:	9300      	str	r3, [sp, #0]
   d6342:	2237      	movs	r2, #55	; 0x37
   d6344:	233d      	movs	r3, #61	; 0x3d
   d6346:	21a9      	movs	r1, #169	; 0xa9
   d6348:	a808      	add	r0, sp, #32
class IPAddress : public Printable {
   d634a:	ad09      	add	r5, sp, #36	; 0x24
   d634c:	f001 fcb8 	bl	d7cc0 <_ZN9IPAddressC1Ehhhh>
   d6350:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6352:	ac03      	add	r4, sp, #12
   d6354:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6356:	682b      	ldr	r3, [r5, #0]
   d6358:	7023      	strb	r3, [r4, #0]
  _client_udp_ubi.setBuffer(MAX_BUFFER_SIZE + 1);  // Sets the max buffer size to send data
   d635a:	2200      	movs	r2, #0
   d635c:	f240 21bd 	movw	r1, #701	; 0x2bd
   d6360:	481e      	ldr	r0, [pc, #120]	; (d63dc <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc4>)
   d6362:	f000 fe6d 	bl	d7040 <_ZN3UDP9setBufferEjPh>
  _client_udp_ubi.begin(UBIDOTS_TCP_PORT);
   d6366:	2200      	movs	r2, #0
   d6368:	f242 3134 	movw	r1, #9012	; 0x2334
   d636c:	481b      	ldr	r0, [pc, #108]	; (d63dc <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc4>)
   d636e:	f000 fc43 	bl	d6bf8 <_ZN3UDP5beginEtm>
   d6372:	ad03      	add	r5, sp, #12
   d6374:	4b1a      	ldr	r3, [pc, #104]	; (d63e0 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc8>)
   d6376:	9308      	str	r3, [sp, #32]
   d6378:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d637a:	ac09      	add	r4, sp, #36	; 0x24
   d637c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d637e:	682b      	ldr	r3, [r5, #0]
  if (!(_client_udp_ubi.beginPacket(serverIpAddress, UBIDOTS_TCP_PORT) && _client_udp_ubi.write(payload) &&
   d6380:	4816      	ldr	r0, [pc, #88]	; (d63dc <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc4>)
   d6382:	7023      	strb	r3, [r4, #0]
   d6384:	f242 3234 	movw	r2, #9012	; 0x2334
   d6388:	a908      	add	r1, sp, #32
   d638a:	f000 fe75 	bl	d7078 <_ZN3UDP11beginPacketE9IPAddresst>
   d638e:	b958      	cbnz	r0, d63a8 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x90>
    if (_debug) {
   d6390:	7d33      	ldrb	r3, [r6, #20]
   d6392:	b123      	cbz	r3, d639e <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x86>
      Serial.println("ERROR sending values with UDP");
   d6394:	f001 fd04 	bl	d7da0 <_Z16_fetch_usbserialv>
   d6398:	4912      	ldr	r1, [pc, #72]	; (d63e4 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xcc>)
   d639a:	f001 f880 	bl	d749e <_ZN5Print7printlnEPKc>
    _client_udp_ubi.stop();
   d639e:	480f      	ldr	r0, [pc, #60]	; (d63dc <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc4>)
   d63a0:	f000 fc76 	bl	d6c90 <_ZN3UDP4stopEv>
    return false;
   d63a4:	2000      	movs	r0, #0
   d63a6:	e014      	b.n	d63d2 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xba>
      if (str == NULL) return 0;
   d63a8:	2f00      	cmp	r7, #0
   d63aa:	d0f1      	beq.n	d6390 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x78>
      return write((const uint8_t *)str, strlen(str));
   d63ac:	4638      	mov	r0, r7
   d63ae:	f003 fb62 	bl	d9a76 <strlen>
   d63b2:	4639      	mov	r1, r7
   d63b4:	4602      	mov	r2, r0
   d63b6:	4809      	ldr	r0, [pc, #36]	; (d63dc <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc4>)
   d63b8:	f000 fc78 	bl	d6cac <_ZN3UDP5writeEPKhj>
  if (!(_client_udp_ubi.beginPacket(serverIpAddress, UBIDOTS_TCP_PORT) && _client_udp_ubi.write(payload) &&
   d63bc:	2800      	cmp	r0, #0
   d63be:	d0e7      	beq.n	d6390 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x78>
        _client_udp_ubi.endPacket())) {
   d63c0:	4806      	ldr	r0, [pc, #24]	; (d63dc <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc4>)
   d63c2:	f000 fcd3 	bl	d6d6c <_ZN3UDP9endPacketEv>
  if (!(_client_udp_ubi.beginPacket(serverIpAddress, UBIDOTS_TCP_PORT) && _client_udp_ubi.write(payload) &&
   d63c6:	2800      	cmp	r0, #0
   d63c8:	d0e2      	beq.n	d6390 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x78>
  _client_udp_ubi.stop();
   d63ca:	4804      	ldr	r0, [pc, #16]	; (d63dc <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc4>)
   d63cc:	f000 fc60 	bl	d6c90 <_ZN3UDP4stopEv>
  return true;
   d63d0:	2001      	movs	r0, #1
}
   d63d2:	b00f      	add	sp, #60	; 0x3c
   d63d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d63d6:	bf00      	nop
   d63d8:	000dbd50 	.word	0x000dbd50
   d63dc:	2003e5f8 	.word	0x2003e5f8
   d63e0:	000dbf1c 	.word	0x000dbf1c
   d63e4:	000dbddc 	.word	0x000dbddc

000d63e8 <_ZN11UbiParticle3getEPKcS1_>:
}

float UbiParticle::get(const char* device_label, const char* variable_label) {
  // Retrieving values is not supported using Particle webhooks
  return ERROR_VALUE;
}
   d63e8:	ed9f 0a01 	vldr	s0, [pc, #4]	; d63f0 <_ZN11UbiParticle3getEPKcS1_+0x8>
   d63ec:	4770      	bx	lr
   d63ee:	bf00      	nop
   d63f0:	cda2425f 	.word	0xcda2425f

000d63f4 <_ZN11UbiParticle8setDebugEb>:

void UbiParticle::setDebug(bool debug) { _debug = debug; }
   d63f4:	7401      	strb	r1, [r0, #16]
   d63f6:	4770      	bx	lr

000d63f8 <_ZN11UbiParticle17getMultipleValuesEPKcS1_>:
   d63f8:	2200      	movs	r2, #0
	  : _Node_allocator()
   d63fa:	1d01      	adds	r1, r0, #4
      _M_header._M_left = &_M_header;
   d63fc:	e9c0 2102 	strd	r2, r1, [r0, #8]
      _M_node_count = 0;
   d6400:	e9c0 1204 	strd	r1, r2, [r0, #16]
      _M_header._M_color = _S_red;
   d6404:	7102      	strb	r2, [r0, #4]

tcpMap UbiParticle::getMultipleValues(const char* deviceLabel, const char* variableLabels) {
  tcpMap results;
  return results;
}
   d6406:	4770      	bx	lr

000d6408 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags>:
bool UbiParticle::sendData(const char* device_label, const char* device_name, char* payload, UbiFlags* flags) {
   d6408:	b530      	push	{r4, r5, lr}
   d640a:	b085      	sub	sp, #20
   d640c:	461a      	mov	r2, r3
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d640e:	9b08      	ldr	r3, [sp, #32]
   d6410:	781b      	ldrb	r3, [r3, #0]
   d6412:	f88d 3000 	strb.w	r3, [sp]
   d6416:	a802      	add	r0, sp, #8
   d6418:	233c      	movs	r3, #60	; 0x3c
   d641a:	f001 fa5d 	bl	d78d8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d641e:	2000      	movs	r0, #0
      }

    private:
      element_type*
      _M_get() const noexcept
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d6420:	9c02      	ldr	r4, [sp, #8]
   d6422:	f000 f9f3 	bl	d680c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d6426:	b120      	cbz	r0, d6432 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x2a>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
   d6428:	7863      	ldrb	r3, [r4, #1]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   d642a:	b913      	cbnz	r3, d6432 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x2a>
        spark_process();
   d642c:	f000 fa62 	bl	d68f4 <spark_process>
    }
   d6430:	e7fa      	b.n	d6428 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x20>
   d6432:	7863      	ldrb	r3, [r4, #1]
   d6434:	f3bf 8f5b 	dmb	ish
   d6438:	1c65      	adds	r5, r4, #1
        if (this->acquireDone() && this->isSucceeded()) {
   d643a:	b9ab      	cbnz	r3, d6468 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x60>
        return std::move(defaultValue);
   d643c:	2500      	movs	r5, #0
	if (_M_pi != nullptr)
   d643e:	9c03      	ldr	r4, [sp, #12]
   d6440:	b17c      	cbz	r4, d6462 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x5a>
      if (--_M_use_count == 0)
   d6442:	6863      	ldr	r3, [r4, #4]
   d6444:	3b01      	subs	r3, #1
   d6446:	6063      	str	r3, [r4, #4]
   d6448:	b95b      	cbnz	r3, d6462 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x5a>
          _M_dispose();
   d644a:	6823      	ldr	r3, [r4, #0]
   d644c:	4620      	mov	r0, r4
   d644e:	689b      	ldr	r3, [r3, #8]
   d6450:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d6452:	68a3      	ldr	r3, [r4, #8]
   d6454:	3b01      	subs	r3, #1
   d6456:	60a3      	str	r3, [r4, #8]
   d6458:	b91b      	cbnz	r3, d6462 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x5a>
            _M_destroy();
   d645a:	6823      	ldr	r3, [r4, #0]
   d645c:	4620      	mov	r0, r4
   d645e:	68db      	ldr	r3, [r3, #12]
   d6460:	4798      	blx	r3
}
   d6462:	4628      	mov	r0, r5
   d6464:	b005      	add	sp, #20
   d6466:	bd30      	pop	{r4, r5, pc}
        return (application_thread_current(nullptr) != 0);
   d6468:	2000      	movs	r0, #0
   d646a:	f000 f9cf 	bl	d680c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d646e:	b120      	cbz	r0, d647a <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x72>
   d6470:	782b      	ldrb	r3, [r5, #0]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   d6472:	b913      	cbnz	r3, d647a <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x72>
        spark_process();
   d6474:	f000 fa3e 	bl	d68f4 <spark_process>
    }
   d6478:	e7fa      	b.n	d6470 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x68>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d647a:	7823      	ldrb	r3, [r4, #0]
        if (this->acquireDone() && this->isSucceeded()) {
   d647c:	2b01      	cmp	r3, #1
   d647e:	d1dd      	bne.n	d643c <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x34>
            return result_;
   d6480:	7b25      	ldrb	r5, [r4, #12]
   d6482:	e7dc      	b.n	d643e <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x36>

000d6484 <_ZN11UbiParticleC1EPKciS1_S1_>:
UbiParticle::UbiParticle(const char* host, const int port, const char* user_agent, const char* token) {
   d6484:	b510      	push	{r4, lr}
   d6486:	4c04      	ldr	r4, [pc, #16]	; (d6498 <_ZN11UbiParticleC1EPKciS1_S1_+0x14>)
   d6488:	6004      	str	r4, [r0, #0]
  _user_agent = user_agent;
   d648a:	e9c0 1301 	strd	r1, r3, [r0, #4]
UbiParticle::UbiParticle(const char* host, const int port, const char* user_agent, const char* token) {
   d648e:	2400      	movs	r4, #0
  _token = token;
   d6490:	9b02      	ldr	r3, [sp, #8]
UbiParticle::UbiParticle(const char* host, const int port, const char* user_agent, const char* token) {
   d6492:	7404      	strb	r4, [r0, #16]
  _token = token;
   d6494:	60c3      	str	r3, [r0, #12]
}
   d6496:	bd10      	pop	{r4, pc}
   d6498:	000dbe1c 	.word	0x000dbe1c

000d649c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d649c:	b508      	push	{r3, lr}
   d649e:	4b02      	ldr	r3, [pc, #8]	; (d64a8 <netdb_freeaddrinfo+0xc>)
   d64a0:	681b      	ldr	r3, [r3, #0]
   d64a2:	689b      	ldr	r3, [r3, #8]
   d64a4:	9301      	str	r3, [sp, #4]
   d64a6:	bd08      	pop	{r3, pc}
   d64a8:	00030268 	.word	0x00030268

000d64ac <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d64ac:	b508      	push	{r3, lr}
   d64ae:	4b02      	ldr	r3, [pc, #8]	; (d64b8 <netdb_getaddrinfo+0xc>)
   d64b0:	681b      	ldr	r3, [r3, #0]
   d64b2:	68db      	ldr	r3, [r3, #12]
   d64b4:	9301      	str	r3, [sp, #4]
   d64b6:	bd08      	pop	{r3, pc}
   d64b8:	00030268 	.word	0x00030268

000d64bc <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d64bc:	b508      	push	{r3, lr}
   d64be:	4b02      	ldr	r3, [pc, #8]	; (d64c8 <HAL_Validate_Pin_Function+0xc>)
   d64c0:	681b      	ldr	r3, [r3, #0]
   d64c2:	685b      	ldr	r3, [r3, #4]
   d64c4:	9301      	str	r3, [sp, #4]
   d64c6:	bd08      	pop	{r3, pc}
   d64c8:	0003022c 	.word	0x0003022c

000d64cc <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d64cc:	b508      	push	{r3, lr}
   d64ce:	4b02      	ldr	r3, [pc, #8]	; (d64d8 <HAL_Pin_Mode+0xc>)
   d64d0:	681b      	ldr	r3, [r3, #0]
   d64d2:	689b      	ldr	r3, [r3, #8]
   d64d4:	9301      	str	r3, [sp, #4]
   d64d6:	bd08      	pop	{r3, pc}
   d64d8:	0003022c 	.word	0x0003022c

000d64dc <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d64dc:	b508      	push	{r3, lr}
   d64de:	4b02      	ldr	r3, [pc, #8]	; (d64e8 <HAL_Get_Pin_Mode+0xc>)
   d64e0:	681b      	ldr	r3, [r3, #0]
   d64e2:	68db      	ldr	r3, [r3, #12]
   d64e4:	9301      	str	r3, [sp, #4]
   d64e6:	bd08      	pop	{r3, pc}
   d64e8:	0003022c 	.word	0x0003022c

000d64ec <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d64ec:	b508      	push	{r3, lr}
   d64ee:	4b02      	ldr	r3, [pc, #8]	; (d64f8 <HAL_GPIO_Write+0xc>)
   d64f0:	681b      	ldr	r3, [r3, #0]
   d64f2:	691b      	ldr	r3, [r3, #16]
   d64f4:	9301      	str	r3, [sp, #4]
   d64f6:	bd08      	pop	{r3, pc}
   d64f8:	0003022c 	.word	0x0003022c

000d64fc <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d64fc:	b508      	push	{r3, lr}
   d64fe:	4b02      	ldr	r3, [pc, #8]	; (d6508 <HAL_GPIO_Read+0xc>)
   d6500:	681b      	ldr	r3, [r3, #0]
   d6502:	695b      	ldr	r3, [r3, #20]
   d6504:	9301      	str	r3, [sp, #4]
   d6506:	bd08      	pop	{r3, pc}
   d6508:	0003022c 	.word	0x0003022c

000d650c <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d650c:	b508      	push	{r3, lr}
   d650e:	4b02      	ldr	r3, [pc, #8]	; (d6518 <HAL_Interrupts_Attach+0xc>)
   d6510:	681b      	ldr	r3, [r3, #0]
   d6512:	699b      	ldr	r3, [r3, #24]
   d6514:	9301      	str	r3, [sp, #4]
   d6516:	bd08      	pop	{r3, pc}
   d6518:	0003022c 	.word	0x0003022c

000d651c <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   d651c:	b508      	push	{r3, lr}
   d651e:	4b02      	ldr	r3, [pc, #8]	; (d6528 <HAL_Interrupts_Detach+0xc>)
   d6520:	681b      	ldr	r3, [r3, #0]
   d6522:	69db      	ldr	r3, [r3, #28]
   d6524:	9301      	str	r3, [sp, #4]
   d6526:	bd08      	pop	{r3, pc}
   d6528:	0003022c 	.word	0x0003022c

000d652c <HAL_DAC_Write>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
   d652c:	b508      	push	{r3, lr}
   d652e:	4b02      	ldr	r3, [pc, #8]	; (d6538 <HAL_DAC_Write+0xc>)
   d6530:	681b      	ldr	r3, [r3, #0]
   d6532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6534:	9301      	str	r3, [sp, #4]
   d6536:	bd08      	pop	{r3, pc}
   d6538:	0003022c 	.word	0x0003022c

000d653c <hal_pwm_write_ext>:
DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(pin_t))
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, hal_pwm_get_resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, hal_pwm_set_resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, hal_pwm_write_ext, void(uint16_t, uint32_t))
   d653c:	b508      	push	{r3, lr}
   d653e:	4b02      	ldr	r3, [pc, #8]	; (d6548 <hal_pwm_write_ext+0xc>)
   d6540:	681b      	ldr	r3, [r3, #0]
   d6542:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   d6544:	9301      	str	r3, [sp, #4]
   d6546:	bd08      	pop	{r3, pc}
   d6548:	0003022c 	.word	0x0003022c

000d654c <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d654c:	b508      	push	{r3, lr}
   d654e:	4b02      	ldr	r3, [pc, #8]	; (d6558 <if_index_to_name+0xc>)
   d6550:	681b      	ldr	r3, [r3, #0]
   d6552:	695b      	ldr	r3, [r3, #20]
   d6554:	9301      	str	r3, [sp, #4]
   d6556:	bd08      	pop	{r3, pc}
   d6558:	0003026c 	.word	0x0003026c

000d655c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d655c:	b508      	push	{r3, lr}
   d655e:	4b02      	ldr	r3, [pc, #8]	; (d6568 <HAL_RNG_GetRandomNumber+0xc>)
   d6560:	681b      	ldr	r3, [r3, #0]
   d6562:	685b      	ldr	r3, [r3, #4]
   d6564:	9301      	str	r3, [sp, #4]
   d6566:	bd08      	pop	{r3, pc}
   d6568:	00030218 	.word	0x00030218

000d656c <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d656c:	b508      	push	{r3, lr}
   d656e:	4b02      	ldr	r3, [pc, #8]	; (d6578 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d6570:	681b      	ldr	r3, [r3, #0]
   d6572:	695b      	ldr	r3, [r3, #20]
   d6574:	9301      	str	r3, [sp, #4]
   d6576:	bd08      	pop	{r3, pc}
   d6578:	00030218 	.word	0x00030218

000d657c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d657c:	b508      	push	{r3, lr}
   d657e:	4b02      	ldr	r3, [pc, #8]	; (d6588 <os_mutex_recursive_create+0xc>)
   d6580:	681b      	ldr	r3, [r3, #0]
   d6582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6584:	9301      	str	r3, [sp, #4]
   d6586:	bd08      	pop	{r3, pc}
   d6588:	00030248 	.word	0x00030248

000d658c <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d658c:	b508      	push	{r3, lr}
   d658e:	4b02      	ldr	r3, [pc, #8]	; (d6598 <os_mutex_recursive_destroy+0xc>)
   d6590:	681b      	ldr	r3, [r3, #0]
   d6592:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d6594:	9301      	str	r3, [sp, #4]
   d6596:	bd08      	pop	{r3, pc}
   d6598:	00030248 	.word	0x00030248

000d659c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d659c:	b508      	push	{r3, lr}
   d659e:	4b02      	ldr	r3, [pc, #8]	; (d65a8 <inet_inet_ntop+0xc>)
   d65a0:	681b      	ldr	r3, [r3, #0]
   d65a2:	695b      	ldr	r3, [r3, #20]
   d65a4:	9301      	str	r3, [sp, #4]
   d65a6:	bd08      	pop	{r3, pc}
   d65a8:	00030264 	.word	0x00030264

000d65ac <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d65ac:	b508      	push	{r3, lr}
   d65ae:	4b02      	ldr	r3, [pc, #8]	; (d65b8 <inet_htonl+0xc>)
   d65b0:	681b      	ldr	r3, [r3, #0]
   d65b2:	6a1b      	ldr	r3, [r3, #32]
   d65b4:	9301      	str	r3, [sp, #4]
   d65b6:	bd08      	pop	{r3, pc}
   d65b8:	00030264 	.word	0x00030264

000d65bc <inet_ntohs>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
   d65bc:	b508      	push	{r3, lr}
   d65be:	4b02      	ldr	r3, [pc, #8]	; (d65c8 <inet_ntohs+0xc>)
   d65c0:	681b      	ldr	r3, [r3, #0]
   d65c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d65c4:	9301      	str	r3, [sp, #4]
   d65c6:	bd08      	pop	{r3, pc}
   d65c8:	00030264 	.word	0x00030264

000d65cc <inet_htons>:
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d65cc:	b508      	push	{r3, lr}
   d65ce:	4b02      	ldr	r3, [pc, #8]	; (d65d8 <inet_htons+0xc>)
   d65d0:	681b      	ldr	r3, [r3, #0]
   d65d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d65d4:	9301      	str	r3, [sp, #4]
   d65d6:	bd08      	pop	{r3, pc}
   d65d8:	00030264 	.word	0x00030264

000d65dc <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d65dc:	b508      	push	{r3, lr}
   d65de:	4b02      	ldr	r3, [pc, #8]	; (d65e8 <hal_usart_init+0xc>)
   d65e0:	681b      	ldr	r3, [r3, #0]
   d65e2:	681b      	ldr	r3, [r3, #0]
   d65e4:	9301      	str	r3, [sp, #4]
   d65e6:	bd08      	pop	{r3, pc}
   d65e8:	0003023c 	.word	0x0003023c

000d65ec <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d65ec:	b508      	push	{r3, lr}
   d65ee:	4b02      	ldr	r3, [pc, #8]	; (d65f8 <hal_usart_write+0xc>)
   d65f0:	681b      	ldr	r3, [r3, #0]
   d65f2:	68db      	ldr	r3, [r3, #12]
   d65f4:	9301      	str	r3, [sp, #4]
   d65f6:	bd08      	pop	{r3, pc}
   d65f8:	0003023c 	.word	0x0003023c

000d65fc <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d65fc:	b508      	push	{r3, lr}
   d65fe:	4b02      	ldr	r3, [pc, #8]	; (d6608 <hal_usart_available+0xc>)
   d6600:	681b      	ldr	r3, [r3, #0]
   d6602:	691b      	ldr	r3, [r3, #16]
   d6604:	9301      	str	r3, [sp, #4]
   d6606:	bd08      	pop	{r3, pc}
   d6608:	0003023c 	.word	0x0003023c

000d660c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d660c:	b508      	push	{r3, lr}
   d660e:	4b02      	ldr	r3, [pc, #8]	; (d6618 <hal_usart_read+0xc>)
   d6610:	681b      	ldr	r3, [r3, #0]
   d6612:	695b      	ldr	r3, [r3, #20]
   d6614:	9301      	str	r3, [sp, #4]
   d6616:	bd08      	pop	{r3, pc}
   d6618:	0003023c 	.word	0x0003023c

000d661c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d661c:	b508      	push	{r3, lr}
   d661e:	4b02      	ldr	r3, [pc, #8]	; (d6628 <hal_usart_peek+0xc>)
   d6620:	681b      	ldr	r3, [r3, #0]
   d6622:	699b      	ldr	r3, [r3, #24]
   d6624:	9301      	str	r3, [sp, #4]
   d6626:	bd08      	pop	{r3, pc}
   d6628:	0003023c 	.word	0x0003023c

000d662c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d662c:	b508      	push	{r3, lr}
   d662e:	4b02      	ldr	r3, [pc, #8]	; (d6638 <hal_usart_flush+0xc>)
   d6630:	681b      	ldr	r3, [r3, #0]
   d6632:	69db      	ldr	r3, [r3, #28]
   d6634:	9301      	str	r3, [sp, #4]
   d6636:	bd08      	pop	{r3, pc}
   d6638:	0003023c 	.word	0x0003023c

000d663c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d663c:	b508      	push	{r3, lr}
   d663e:	4b02      	ldr	r3, [pc, #8]	; (d6648 <hal_usart_is_enabled+0xc>)
   d6640:	681b      	ldr	r3, [r3, #0]
   d6642:	6a1b      	ldr	r3, [r3, #32]
   d6644:	9301      	str	r3, [sp, #4]
   d6646:	bd08      	pop	{r3, pc}
   d6648:	0003023c 	.word	0x0003023c

000d664c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d664c:	b508      	push	{r3, lr}
   d664e:	4b02      	ldr	r3, [pc, #8]	; (d6658 <hal_usart_available_data_for_write+0xc>)
   d6650:	681b      	ldr	r3, [r3, #0]
   d6652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6654:	9301      	str	r3, [sp, #4]
   d6656:	bd08      	pop	{r3, pc}
   d6658:	0003023c 	.word	0x0003023c

000d665c <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d665c:	b508      	push	{r3, lr}
   d665e:	4b02      	ldr	r3, [pc, #8]	; (d6668 <hal_i2c_write+0xc>)
   d6660:	681b      	ldr	r3, [r3, #0]
   d6662:	6a1b      	ldr	r3, [r3, #32]
   d6664:	9301      	str	r3, [sp, #4]
   d6666:	bd08      	pop	{r3, pc}
   d6668:	00030228 	.word	0x00030228

000d666c <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d666c:	b508      	push	{r3, lr}
   d666e:	4b02      	ldr	r3, [pc, #8]	; (d6678 <hal_i2c_available+0xc>)
   d6670:	681b      	ldr	r3, [r3, #0]
   d6672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6674:	9301      	str	r3, [sp, #4]
   d6676:	bd08      	pop	{r3, pc}
   d6678:	00030228 	.word	0x00030228

000d667c <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d667c:	b508      	push	{r3, lr}
   d667e:	4b02      	ldr	r3, [pc, #8]	; (d6688 <hal_i2c_read+0xc>)
   d6680:	681b      	ldr	r3, [r3, #0]
   d6682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6684:	9301      	str	r3, [sp, #4]
   d6686:	bd08      	pop	{r3, pc}
   d6688:	00030228 	.word	0x00030228

000d668c <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d668c:	b508      	push	{r3, lr}
   d668e:	4b02      	ldr	r3, [pc, #8]	; (d6698 <hal_i2c_peek+0xc>)
   d6690:	681b      	ldr	r3, [r3, #0]
   d6692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6694:	9301      	str	r3, [sp, #4]
   d6696:	bd08      	pop	{r3, pc}
   d6698:	00030228 	.word	0x00030228

000d669c <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d669c:	b508      	push	{r3, lr}
   d669e:	4b02      	ldr	r3, [pc, #8]	; (d66a8 <hal_i2c_flush+0xc>)
   d66a0:	681b      	ldr	r3, [r3, #0]
   d66a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d66a4:	9301      	str	r3, [sp, #4]
   d66a6:	bd08      	pop	{r3, pc}
   d66a8:	00030228 	.word	0x00030228

000d66ac <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d66ac:	b508      	push	{r3, lr}
   d66ae:	4b02      	ldr	r3, [pc, #8]	; (d66b8 <hal_i2c_is_enabled+0xc>)
   d66b0:	681b      	ldr	r3, [r3, #0]
   d66b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d66b4:	9301      	str	r3, [sp, #4]
   d66b6:	bd08      	pop	{r3, pc}
   d66b8:	00030228 	.word	0x00030228

000d66bc <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d66bc:	b508      	push	{r3, lr}
   d66be:	4b02      	ldr	r3, [pc, #8]	; (d66c8 <hal_i2c_init+0xc>)
   d66c0:	681b      	ldr	r3, [r3, #0]
   d66c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d66c4:	9301      	str	r3, [sp, #4]
   d66c6:	bd08      	pop	{r3, pc}
   d66c8:	00030228 	.word	0x00030228

000d66cc <sock_bind>:
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, sock_accept, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
   d66cc:	b508      	push	{r3, lr}
   d66ce:	4b02      	ldr	r3, [pc, #8]	; (d66d8 <sock_bind+0xc>)
   d66d0:	681b      	ldr	r3, [r3, #0]
   d66d2:	685b      	ldr	r3, [r3, #4]
   d66d4:	9301      	str	r3, [sp, #4]
   d66d6:	bd08      	pop	{r3, pc}
   d66d8:	00030238 	.word	0x00030238

000d66dc <sock_setsockopt>:
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d66dc:	b508      	push	{r3, lr}
   d66de:	4b02      	ldr	r3, [pc, #8]	; (d66e8 <sock_setsockopt+0xc>)
   d66e0:	681b      	ldr	r3, [r3, #0]
   d66e2:	699b      	ldr	r3, [r3, #24]
   d66e4:	9301      	str	r3, [sp, #4]
   d66e6:	bd08      	pop	{r3, pc}
   d66e8:	00030238 	.word	0x00030238

000d66ec <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d66ec:	b508      	push	{r3, lr}
   d66ee:	4b02      	ldr	r3, [pc, #8]	; (d66f8 <sock_close+0xc>)
   d66f0:	681b      	ldr	r3, [r3, #0]
   d66f2:	69db      	ldr	r3, [r3, #28]
   d66f4:	9301      	str	r3, [sp, #4]
   d66f6:	bd08      	pop	{r3, pc}
   d66f8:	00030238 	.word	0x00030238

000d66fc <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d66fc:	b508      	push	{r3, lr}
   d66fe:	4b02      	ldr	r3, [pc, #8]	; (d6708 <sock_connect+0xc>)
   d6700:	681b      	ldr	r3, [r3, #0]
   d6702:	6a1b      	ldr	r3, [r3, #32]
   d6704:	9301      	str	r3, [sp, #4]
   d6706:	bd08      	pop	{r3, pc}
   d6708:	00030238 	.word	0x00030238

000d670c <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d670c:	b508      	push	{r3, lr}
   d670e:	4b02      	ldr	r3, [pc, #8]	; (d6718 <sock_recv+0xc>)
   d6710:	681b      	ldr	r3, [r3, #0]
   d6712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6714:	9301      	str	r3, [sp, #4]
   d6716:	bd08      	pop	{r3, pc}
   d6718:	00030238 	.word	0x00030238

000d671c <sock_recvfrom>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
   d671c:	b508      	push	{r3, lr}
   d671e:	4b02      	ldr	r3, [pc, #8]	; (d6728 <sock_recvfrom+0xc>)
   d6720:	681b      	ldr	r3, [r3, #0]
   d6722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6724:	9301      	str	r3, [sp, #4]
   d6726:	bd08      	pop	{r3, pc}
   d6728:	00030238 	.word	0x00030238

000d672c <sock_send>:
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d672c:	b508      	push	{r3, lr}
   d672e:	4b02      	ldr	r3, [pc, #8]	; (d6738 <sock_send+0xc>)
   d6730:	681b      	ldr	r3, [r3, #0]
   d6732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6734:	9301      	str	r3, [sp, #4]
   d6736:	bd08      	pop	{r3, pc}
   d6738:	00030238 	.word	0x00030238

000d673c <sock_sendto>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
   d673c:	b508      	push	{r3, lr}
   d673e:	4b02      	ldr	r3, [pc, #8]	; (d6748 <sock_sendto+0xc>)
   d6740:	681b      	ldr	r3, [r3, #0]
   d6742:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6744:	9301      	str	r3, [sp, #4]
   d6746:	bd08      	pop	{r3, pc}
   d6748:	00030238 	.word	0x00030238

000d674c <sock_socket>:
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d674c:	b508      	push	{r3, lr}
   d674e:	4b02      	ldr	r3, [pc, #8]	; (d6758 <sock_socket+0xc>)
   d6750:	681b      	ldr	r3, [r3, #0]
   d6752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d6754:	9301      	str	r3, [sp, #4]
   d6756:	bd08      	pop	{r3, pc}
   d6758:	00030238 	.word	0x00030238

000d675c <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d675c:	b508      	push	{r3, lr}
   d675e:	4b02      	ldr	r3, [pc, #8]	; (d6768 <hal_spi_init+0xc>)
   d6760:	681b      	ldr	r3, [r3, #0]
   d6762:	69db      	ldr	r3, [r3, #28]
   d6764:	9301      	str	r3, [sp, #4]
   d6766:	bd08      	pop	{r3, pc}
   d6768:	00030230 	.word	0x00030230

000d676c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d676c:	b508      	push	{r3, lr}
   d676e:	4b02      	ldr	r3, [pc, #8]	; (d6778 <hal_spi_is_enabled+0xc>)
   d6770:	681b      	ldr	r3, [r3, #0]
   d6772:	6a1b      	ldr	r3, [r3, #32]
   d6774:	9301      	str	r3, [sp, #4]
   d6776:	bd08      	pop	{r3, pc}
   d6778:	00030230 	.word	0x00030230

000d677c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d677c:	b508      	push	{r3, lr}
   d677e:	4b02      	ldr	r3, [pc, #8]	; (d6788 <HAL_USB_USART_Init+0xc>)
   d6780:	681b      	ldr	r3, [r3, #0]
   d6782:	681b      	ldr	r3, [r3, #0]
   d6784:	9301      	str	r3, [sp, #4]
   d6786:	bd08      	pop	{r3, pc}
   d6788:	0003024c 	.word	0x0003024c

000d678c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d678c:	b508      	push	{r3, lr}
   d678e:	4b02      	ldr	r3, [pc, #8]	; (d6798 <HAL_USB_USART_Available_Data+0xc>)
   d6790:	681b      	ldr	r3, [r3, #0]
   d6792:	691b      	ldr	r3, [r3, #16]
   d6794:	9301      	str	r3, [sp, #4]
   d6796:	bd08      	pop	{r3, pc}
   d6798:	0003024c 	.word	0x0003024c

000d679c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d679c:	b508      	push	{r3, lr}
   d679e:	4b02      	ldr	r3, [pc, #8]	; (d67a8 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d67a0:	681b      	ldr	r3, [r3, #0]
   d67a2:	695b      	ldr	r3, [r3, #20]
   d67a4:	9301      	str	r3, [sp, #4]
   d67a6:	bd08      	pop	{r3, pc}
   d67a8:	0003024c 	.word	0x0003024c

000d67ac <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d67ac:	b508      	push	{r3, lr}
   d67ae:	4b02      	ldr	r3, [pc, #8]	; (d67b8 <HAL_USB_USART_Receive_Data+0xc>)
   d67b0:	681b      	ldr	r3, [r3, #0]
   d67b2:	699b      	ldr	r3, [r3, #24]
   d67b4:	9301      	str	r3, [sp, #4]
   d67b6:	bd08      	pop	{r3, pc}
   d67b8:	0003024c 	.word	0x0003024c

000d67bc <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d67bc:	b508      	push	{r3, lr}
   d67be:	4b02      	ldr	r3, [pc, #8]	; (d67c8 <HAL_USB_USART_Send_Data+0xc>)
   d67c0:	681b      	ldr	r3, [r3, #0]
   d67c2:	69db      	ldr	r3, [r3, #28]
   d67c4:	9301      	str	r3, [sp, #4]
   d67c6:	bd08      	pop	{r3, pc}
   d67c8:	0003024c 	.word	0x0003024c

000d67cc <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d67cc:	b508      	push	{r3, lr}
   d67ce:	4b02      	ldr	r3, [pc, #8]	; (d67d8 <HAL_USB_USART_Flush_Data+0xc>)
   d67d0:	681b      	ldr	r3, [r3, #0]
   d67d2:	6a1b      	ldr	r3, [r3, #32]
   d67d4:	9301      	str	r3, [sp, #4]
   d67d6:	bd08      	pop	{r3, pc}
   d67d8:	0003024c 	.word	0x0003024c

000d67dc <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d67dc:	b508      	push	{r3, lr}
   d67de:	4b02      	ldr	r3, [pc, #8]	; (d67e8 <log_message+0xc>)
   d67e0:	681b      	ldr	r3, [r3, #0]
   d67e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d67e4:	9301      	str	r3, [sp, #4]
   d67e6:	bd08      	pop	{r3, pc}
   d67e8:	00030260 	.word	0x00030260

000d67ec <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d67ec:	b508      	push	{r3, lr}
   d67ee:	4b02      	ldr	r3, [pc, #8]	; (d67f8 <set_system_mode+0xc>)
   d67f0:	681b      	ldr	r3, [r3, #0]
   d67f2:	685b      	ldr	r3, [r3, #4]
   d67f4:	9301      	str	r3, [sp, #4]
   d67f6:	bd08      	pop	{r3, pc}
   d67f8:	00030220 	.word	0x00030220

000d67fc <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d67fc:	b508      	push	{r3, lr}
   d67fe:	4b02      	ldr	r3, [pc, #8]	; (d6808 <system_delay_ms+0xc>)
   d6800:	681b      	ldr	r3, [r3, #0]
   d6802:	695b      	ldr	r3, [r3, #20]
   d6804:	9301      	str	r3, [sp, #4]
   d6806:	bd08      	pop	{r3, pc}
   d6808:	00030220 	.word	0x00030220

000d680c <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d680c:	b508      	push	{r3, lr}
   d680e:	4b02      	ldr	r3, [pc, #8]	; (d6818 <application_thread_current+0xc>)
   d6810:	681b      	ldr	r3, [r3, #0]
   d6812:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d6814:	9301      	str	r3, [sp, #4]
   d6816:	bd08      	pop	{r3, pc}
   d6818:	00030220 	.word	0x00030220

000d681c <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d681c:	b508      	push	{r3, lr}
   d681e:	4b02      	ldr	r3, [pc, #8]	; (d6828 <application_thread_invoke+0xc>)
   d6820:	681b      	ldr	r3, [r3, #0]
   d6822:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d6824:	9301      	str	r3, [sp, #4]
   d6826:	bd08      	pop	{r3, pc}
   d6828:	00030220 	.word	0x00030220

000d682c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d682c:	b508      	push	{r3, lr}
   d682e:	4b03      	ldr	r3, [pc, #12]	; (d683c <system_ctrl_set_app_request_handler+0x10>)
   d6830:	681b      	ldr	r3, [r3, #0]
   d6832:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d6836:	9301      	str	r3, [sp, #4]
   d6838:	bd08      	pop	{r3, pc}
   d683a:	0000      	.short	0x0000
   d683c:	00030220 	.word	0x00030220

000d6840 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d6840:	b508      	push	{r3, lr}
   d6842:	4b03      	ldr	r3, [pc, #12]	; (d6850 <system_ctrl_set_result+0x10>)
   d6844:	681b      	ldr	r3, [r3, #0]
   d6846:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d684a:	9301      	str	r3, [sp, #4]
   d684c:	bd08      	pop	{r3, pc}
   d684e:	0000      	.short	0x0000
   d6850:	00030220 	.word	0x00030220

000d6854 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d6854:	b508      	push	{r3, lr}
   d6856:	4b02      	ldr	r3, [pc, #8]	; (d6860 <network_connect+0xc>)
   d6858:	681b      	ldr	r3, [r3, #0]
   d685a:	685b      	ldr	r3, [r3, #4]
   d685c:	9301      	str	r3, [sp, #4]
   d685e:	bd08      	pop	{r3, pc}
   d6860:	00030240 	.word	0x00030240

000d6864 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d6864:	b508      	push	{r3, lr}
   d6866:	4b02      	ldr	r3, [pc, #8]	; (d6870 <network_connecting+0xc>)
   d6868:	681b      	ldr	r3, [r3, #0]
   d686a:	689b      	ldr	r3, [r3, #8]
   d686c:	9301      	str	r3, [sp, #4]
   d686e:	bd08      	pop	{r3, pc}
   d6870:	00030240 	.word	0x00030240

000d6874 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d6874:	b508      	push	{r3, lr}
   d6876:	4b02      	ldr	r3, [pc, #8]	; (d6880 <network_disconnect+0xc>)
   d6878:	681b      	ldr	r3, [r3, #0]
   d687a:	68db      	ldr	r3, [r3, #12]
   d687c:	9301      	str	r3, [sp, #4]
   d687e:	bd08      	pop	{r3, pc}
   d6880:	00030240 	.word	0x00030240

000d6884 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d6884:	b508      	push	{r3, lr}
   d6886:	4b02      	ldr	r3, [pc, #8]	; (d6890 <network_ready+0xc>)
   d6888:	681b      	ldr	r3, [r3, #0]
   d688a:	691b      	ldr	r3, [r3, #16]
   d688c:	9301      	str	r3, [sp, #4]
   d688e:	bd08      	pop	{r3, pc}
   d6890:	00030240 	.word	0x00030240

000d6894 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d6894:	b508      	push	{r3, lr}
   d6896:	4b02      	ldr	r3, [pc, #8]	; (d68a0 <network_on+0xc>)
   d6898:	681b      	ldr	r3, [r3, #0]
   d689a:	695b      	ldr	r3, [r3, #20]
   d689c:	9301      	str	r3, [sp, #4]
   d689e:	bd08      	pop	{r3, pc}
   d68a0:	00030240 	.word	0x00030240

000d68a4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d68a4:	b508      	push	{r3, lr}
   d68a6:	4b02      	ldr	r3, [pc, #8]	; (d68b0 <network_off+0xc>)
   d68a8:	681b      	ldr	r3, [r3, #0]
   d68aa:	699b      	ldr	r3, [r3, #24]
   d68ac:	9301      	str	r3, [sp, #4]
   d68ae:	bd08      	pop	{r3, pc}
   d68b0:	00030240 	.word	0x00030240

000d68b4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d68b4:	b508      	push	{r3, lr}
   d68b6:	4b02      	ldr	r3, [pc, #8]	; (d68c0 <network_listen+0xc>)
   d68b8:	681b      	ldr	r3, [r3, #0]
   d68ba:	69db      	ldr	r3, [r3, #28]
   d68bc:	9301      	str	r3, [sp, #4]
   d68be:	bd08      	pop	{r3, pc}
   d68c0:	00030240 	.word	0x00030240

000d68c4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d68c4:	b508      	push	{r3, lr}
   d68c6:	4b02      	ldr	r3, [pc, #8]	; (d68d0 <network_listening+0xc>)
   d68c8:	681b      	ldr	r3, [r3, #0]
   d68ca:	6a1b      	ldr	r3, [r3, #32]
   d68cc:	9301      	str	r3, [sp, #4]
   d68ce:	bd08      	pop	{r3, pc}
   d68d0:	00030240 	.word	0x00030240

000d68d4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d68d4:	b508      	push	{r3, lr}
   d68d6:	4b02      	ldr	r3, [pc, #8]	; (d68e0 <network_set_listen_timeout+0xc>)
   d68d8:	681b      	ldr	r3, [r3, #0]
   d68da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d68dc:	9301      	str	r3, [sp, #4]
   d68de:	bd08      	pop	{r3, pc}
   d68e0:	00030240 	.word	0x00030240

000d68e4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d68e4:	b508      	push	{r3, lr}
   d68e6:	4b02      	ldr	r3, [pc, #8]	; (d68f0 <network_get_listen_timeout+0xc>)
   d68e8:	681b      	ldr	r3, [r3, #0]
   d68ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d68ec:	9301      	str	r3, [sp, #4]
   d68ee:	bd08      	pop	{r3, pc}
   d68f0:	00030240 	.word	0x00030240

000d68f4 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d68f4:	b508      	push	{r3, lr}
   d68f6:	4b02      	ldr	r3, [pc, #8]	; (d6900 <spark_process+0xc>)
   d68f8:	681b      	ldr	r3, [r3, #0]
   d68fa:	689b      	ldr	r3, [r3, #8]
   d68fc:	9301      	str	r3, [sp, #4]
   d68fe:	bd08      	pop	{r3, pc}
   d6900:	00030244 	.word	0x00030244

000d6904 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d6904:	b508      	push	{r3, lr}
   d6906:	4b02      	ldr	r3, [pc, #8]	; (d6910 <spark_cloud_flag_connected+0xc>)
   d6908:	681b      	ldr	r3, [r3, #0]
   d690a:	695b      	ldr	r3, [r3, #20]
   d690c:	9301      	str	r3, [sp, #4]
   d690e:	bd08      	pop	{r3, pc}
   d6910:	00030244 	.word	0x00030244

000d6914 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d6914:	b508      	push	{r3, lr}
   d6916:	4b02      	ldr	r3, [pc, #8]	; (d6920 <spark_deviceID+0xc>)
   d6918:	681b      	ldr	r3, [r3, #0]
   d691a:	69db      	ldr	r3, [r3, #28]
   d691c:	9301      	str	r3, [sp, #4]
   d691e:	bd08      	pop	{r3, pc}
   d6920:	00030244 	.word	0x00030244

000d6924 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d6924:	b508      	push	{r3, lr}
   d6926:	4b02      	ldr	r3, [pc, #8]	; (d6930 <spark_send_event+0xc>)
   d6928:	681b      	ldr	r3, [r3, #0]
   d692a:	6a1b      	ldr	r3, [r3, #32]
   d692c:	9301      	str	r3, [sp, #4]
   d692e:	bd08      	pop	{r3, pc}
   d6930:	00030244 	.word	0x00030244

000d6934 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   d6934:	b508      	push	{r3, lr}
   d6936:	4b02      	ldr	r3, [pc, #8]	; (d6940 <spark_subscribe+0xc>)
   d6938:	681b      	ldr	r3, [r3, #0]
   d693a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d693c:	9301      	str	r3, [sp, #4]
   d693e:	bd08      	pop	{r3, pc}
   d6940:	00030244 	.word	0x00030244

000d6944 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d6944:	b508      	push	{r3, lr}
   d6946:	4b02      	ldr	r3, [pc, #8]	; (d6950 <spark_set_random_seed_from_cloud_handler+0xc>)
   d6948:	681b      	ldr	r3, [r3, #0]
   d694a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d694c:	9301      	str	r3, [sp, #4]
   d694e:	bd08      	pop	{r3, pc}
   d6950:	00030244 	.word	0x00030244

000d6954 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d6954:	b508      	push	{r3, lr}
   d6956:	4b02      	ldr	r3, [pc, #8]	; (d6960 <malloc+0xc>)
   d6958:	681b      	ldr	r3, [r3, #0]
   d695a:	681b      	ldr	r3, [r3, #0]
   d695c:	9301      	str	r3, [sp, #4]
   d695e:	bd08      	pop	{r3, pc}
   d6960:	0003021c 	.word	0x0003021c

000d6964 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d6964:	b508      	push	{r3, lr}
   d6966:	4b02      	ldr	r3, [pc, #8]	; (d6970 <free+0xc>)
   d6968:	681b      	ldr	r3, [r3, #0]
   d696a:	685b      	ldr	r3, [r3, #4]
   d696c:	9301      	str	r3, [sp, #4]
   d696e:	bd08      	pop	{r3, pc}
   d6970:	0003021c 	.word	0x0003021c

000d6974 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d6974:	b508      	push	{r3, lr}
   d6976:	4b02      	ldr	r3, [pc, #8]	; (d6980 <realloc+0xc>)
   d6978:	681b      	ldr	r3, [r3, #0]
   d697a:	689b      	ldr	r3, [r3, #8]
   d697c:	9301      	str	r3, [sp, #4]
   d697e:	bd08      	pop	{r3, pc}
   d6980:	0003021c 	.word	0x0003021c

000d6984 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   d6984:	b508      	push	{r3, lr}
   d6986:	4b02      	ldr	r3, [pc, #8]	; (d6990 <sprintf+0xc>)
   d6988:	681b      	ldr	r3, [r3, #0]
   d698a:	68db      	ldr	r3, [r3, #12]
   d698c:	9301      	str	r3, [sp, #4]
   d698e:	bd08      	pop	{r3, pc}
   d6990:	0003021c 	.word	0x0003021c

000d6994 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d6994:	b508      	push	{r3, lr}
   d6996:	4b02      	ldr	r3, [pc, #8]	; (d69a0 <abort+0xc>)
   d6998:	681b      	ldr	r3, [r3, #0]
   d699a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d699c:	9301      	str	r3, [sp, #4]
   d699e:	bd08      	pop	{r3, pc}
   d69a0:	0003021c 	.word	0x0003021c

000d69a4 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d69a4:	b508      	push	{r3, lr}
   d69a6:	4b02      	ldr	r3, [pc, #8]	; (d69b0 <_malloc_r+0xc>)
   d69a8:	681b      	ldr	r3, [r3, #0]
   d69aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d69ac:	9301      	str	r3, [sp, #4]
   d69ae:	bd08      	pop	{r3, pc}
   d69b0:	0003021c 	.word	0x0003021c

000d69b4 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d69b4:	b508      	push	{r3, lr}
   d69b6:	4b02      	ldr	r3, [pc, #8]	; (d69c0 <__errno+0xc>)
   d69b8:	681b      	ldr	r3, [r3, #0]
   d69ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d69bc:	9301      	str	r3, [sp, #4]
   d69be:	bd08      	pop	{r3, pc}
   d69c0:	0003021c 	.word	0x0003021c

000d69c4 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d69c4:	b508      	push	{r3, lr}
   d69c6:	4b02      	ldr	r3, [pc, #8]	; (d69d0 <newlib_impure_ptr_callback+0xc>)
   d69c8:	681b      	ldr	r3, [r3, #0]
   d69ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d69cc:	9301      	str	r3, [sp, #4]
   d69ce:	bd08      	pop	{r3, pc}
   d69d0:	0003021c 	.word	0x0003021c

000d69d4 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d69d4:	2200      	movs	r2, #0
   d69d6:	6840      	ldr	r0, [r0, #4]
   d69d8:	4611      	mov	r1, r2
   d69da:	f7ff bf73 	b.w	d68c4 <network_listening>

000d69de <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d69de:	2200      	movs	r2, #0
   d69e0:	6840      	ldr	r0, [r0, #4]
   d69e2:	4611      	mov	r1, r2
   d69e4:	f7ff bf7e 	b.w	d68e4 <network_get_listen_timeout>

000d69e8 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d69e8:	6840      	ldr	r0, [r0, #4]
   d69ea:	2200      	movs	r2, #0
   d69ec:	f7ff bf72 	b.w	d68d4 <network_set_listen_timeout>

000d69f0 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d69f0:	6840      	ldr	r0, [r0, #4]
   d69f2:	2200      	movs	r2, #0
   d69f4:	f081 0101 	eor.w	r1, r1, #1
   d69f8:	f7ff bf5c 	b.w	d68b4 <network_listen>

000d69fc <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d69fc:	2300      	movs	r3, #0
   d69fe:	6840      	ldr	r0, [r0, #4]
   d6a00:	461a      	mov	r2, r3
   d6a02:	4619      	mov	r1, r3
   d6a04:	f7ff bf4e 	b.w	d68a4 <network_off>

000d6a08 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d6a08:	2300      	movs	r3, #0
   d6a0a:	6840      	ldr	r0, [r0, #4]
   d6a0c:	461a      	mov	r2, r3
   d6a0e:	4619      	mov	r1, r3
   d6a10:	f7ff bf40 	b.w	d6894 <network_on>

000d6a14 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6a14:	2200      	movs	r2, #0
   d6a16:	6840      	ldr	r0, [r0, #4]
   d6a18:	4611      	mov	r1, r2
   d6a1a:	f7ff bf33 	b.w	d6884 <network_ready>

000d6a1e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d6a1e:	2200      	movs	r2, #0
   d6a20:	6840      	ldr	r0, [r0, #4]
   d6a22:	4611      	mov	r1, r2
   d6a24:	f7ff bf1e 	b.w	d6864 <network_connecting>

000d6a28 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6a28:	6840      	ldr	r0, [r0, #4]
   d6a2a:	2200      	movs	r2, #0
   d6a2c:	2102      	movs	r1, #2
   d6a2e:	f7ff bf21 	b.w	d6874 <network_disconnect>

000d6a32 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d6a32:	2300      	movs	r3, #0
   d6a34:	6840      	ldr	r0, [r0, #4]
   d6a36:	461a      	mov	r2, r3
   d6a38:	f7ff bf0c 	b.w	d6854 <network_connect>

000d6a3c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d6a3c:	4b02      	ldr	r3, [pc, #8]	; (d6a48 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d6a3e:	2203      	movs	r2, #3
   d6a40:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d6a42:	4a02      	ldr	r2, [pc, #8]	; (d6a4c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d6a44:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d6a46:	4770      	bx	lr
   d6a48:	2003e644 	.word	0x2003e644
   d6a4c:	000dbe34 	.word	0x000dbe34

000d6a50 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d6a50:	b510      	push	{r4, lr}
   d6a52:	4604      	mov	r4, r0
   d6a54:	4608      	mov	r0, r1
{
    _spi = spi;
   d6a56:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d6a58:	f7ff fe80 	bl	d675c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d6a5c:	2300      	movs	r3, #0
   d6a5e:	6063      	str	r3, [r4, #4]
}
   d6a60:	4620      	mov	r0, r4
   d6a62:	bd10      	pop	{r4, pc}

000d6a64 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d6a64:	b510      	push	{r4, lr}
   d6a66:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d6a68:	6800      	ldr	r0, [r0, #0]
   d6a6a:	b118      	cbz	r0, d6a74 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d6a6c:	f7ff ff7a 	bl	d6964 <free>
            wakeupSource_ = nullptr;
   d6a70:	2300      	movs	r3, #0
   d6a72:	6023      	str	r3, [r4, #0]
        }
    }
   d6a74:	bd10      	pop	{r4, pc}

000d6a76 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d6a76:	b510      	push	{r4, lr}
   d6a78:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d6a7a:	f7ff fff3 	bl	d6a64 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
   d6a7e:	4620      	mov	r0, r4
   d6a80:	bd10      	pop	{r4, pc}
	...

000d6a84 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d6a84:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d6a86:	4b09      	ldr	r3, [pc, #36]	; (d6aac <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   d6a88:	4c09      	ldr	r4, [pc, #36]	; (d6ab0 <_GLOBAL__sub_I_System+0x2c>)
   d6a8a:	2202      	movs	r2, #2
   d6a8c:	2000      	movs	r0, #0
   d6a8e:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d6a90:	4b08      	ldr	r3, [pc, #32]	; (d6ab4 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d6a92:	6020      	str	r0, [r4, #0]
   d6a94:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d6a96:	71a0      	strb	r0, [r4, #6]
   d6a98:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d6a9a:	f7ff fea7 	bl	d67ec <set_system_mode>
SystemClass System;
   d6a9e:	4620      	mov	r0, r4
   d6aa0:	4a05      	ldr	r2, [pc, #20]	; (d6ab8 <_GLOBAL__sub_I_System+0x34>)
   d6aa2:	4906      	ldr	r1, [pc, #24]	; (d6abc <_GLOBAL__sub_I_System+0x38>)
   d6aa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d6aa8:	f001 bf2c 	b.w	d8904 <__aeabi_atexit>
   d6aac:	2003e658 	.word	0x2003e658
   d6ab0:	2003e64c 	.word	0x2003e64c
   d6ab4:	ffff0000 	.word	0xffff0000
   d6ab8:	2003e468 	.word	0x2003e468
   d6abc:	000d6a77 	.word	0x000d6a77

000d6ac0 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d6ac0:	b510      	push	{r4, lr}
   d6ac2:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d6ac4:	f002 ffd7 	bl	d9a76 <strlen>
   d6ac8:	3801      	subs	r0, #1
   d6aca:	1823      	adds	r3, r4, r0
   d6acc:	4620      	mov	r0, r4
	while(i<j){
   d6ace:	4283      	cmp	r3, r0
   d6ad0:	d906      	bls.n	d6ae0 <_Z11str_reversePc+0x20>
		c = *i;
   d6ad2:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d6ad4:	7819      	ldrb	r1, [r3, #0]
   d6ad6:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d6ada:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   d6ade:	e7f6      	b.n	d6ace <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   d6ae0:	bd10      	pop	{r4, pc}

000d6ae2 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d6ae2:	b570      	push	{r4, r5, r6, lr}
   d6ae4:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d6ae6:	1e91      	subs	r1, r2, #2
   d6ae8:	2922      	cmp	r1, #34	; 0x22
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d6aea:	4605      	mov	r5, r0
	if(radix<2 || radix>36){
   d6aec:	d822      	bhi.n	d6b34 <ultoa+0x52>
		return NULL;
	}
	char* ptr=buffer;
   d6aee:	4620      	mov	r0, r4

	div_t result;
	while(a){
   d6af0:	b16d      	cbz	r5, d6b0e <ultoa+0x2c>
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d6af2:	fbb5 f6f2 	udiv	r6, r5, r2
            result.rem = a%radix;
   d6af6:	fb02 5516 	mls	r5, r2, r6, r5
            *ptr = result.rem;
   d6afa:	b2e9      	uxtb	r1, r5
            if(result.rem<10){
   d6afc:	2d09      	cmp	r5, #9
                *ptr += '0';
   d6afe:	bf94      	ite	ls
   d6b00:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d6b02:	3157      	addhi	r1, #87	; 0x57
   d6b04:	b2c9      	uxtb	r1, r1
   d6b06:	f800 1b01 	strb.w	r1, [r0], #1
            }
            ++ptr;
            a = result.quot;
   d6b0a:	4635      	mov	r5, r6
	while(a){
   d6b0c:	e7f0      	b.n	d6af0 <ultoa+0xe>
   d6b0e:	4602      	mov	r2, r0
	}
        while (ptr < buffer+pad)
   d6b10:	4423      	add	r3, r4
            *ptr++ = '0';
   d6b12:	2130      	movs	r1, #48	; 0x30
        while (ptr < buffer+pad)
   d6b14:	4293      	cmp	r3, r2
   d6b16:	d902      	bls.n	d6b1e <ultoa+0x3c>
            *ptr++ = '0';
   d6b18:	f802 1b01 	strb.w	r1, [r2], #1
        while (ptr < buffer+pad)
   d6b1c:	e7fa      	b.n	d6b14 <ultoa+0x32>
   d6b1e:	1a1a      	subs	r2, r3, r0
   d6b20:	4283      	cmp	r3, r0
   d6b22:	bf38      	it	cc
   d6b24:	2200      	movcc	r2, #0

	*ptr = '\0';
   d6b26:	2300      	movs	r3, #0
   d6b28:	5483      	strb	r3, [r0, r2]
	str_reverse(buffer);
   d6b2a:	4620      	mov	r0, r4
   d6b2c:	f7ff ffc8 	bl	d6ac0 <_Z11str_reversePc>
	return buffer;
   d6b30:	4620      	mov	r0, r4
}
   d6b32:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   d6b34:	2000      	movs	r0, #0
   d6b36:	e7fc      	b.n	d6b32 <ultoa+0x50>

000d6b38 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d6b38:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   d6b3a:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d6b3c:	460c      	mov	r4, r1
   d6b3e:	4615      	mov	r5, r2
	if(a<0){
   d6b40:	da0e      	bge.n	d6b60 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d6b42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   d6b46:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d6b4a:	bf14      	ite	ne
   d6b4c:	4258      	negne	r0, r3
   d6b4e:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   d6b50:	2301      	movs	r3, #1
		*buffer = '-';
   d6b52:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   d6b54:	462a      	mov	r2, r5
   d6b56:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   d6b58:	f7ff ffc3 	bl	d6ae2 <ultoa>
	}
	return buffer;
}
   d6b5c:	4620      	mov	r0, r4
   d6b5e:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   d6b60:	2301      	movs	r3, #1
   d6b62:	e7f9      	b.n	d6b58 <itoa+0x20>

000d6b64 <_ZN3UDP13receivePacketEPcjm>:
     * @param buffer        The buffer to read data to
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
   d6b64:	b410      	push	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   d6b66:	6804      	ldr	r4, [r0, #0]
   d6b68:	6b24      	ldr	r4, [r4, #48]	; 0x30
   d6b6a:	46a4      	mov	ip, r4
    }
   d6b6c:	f85d 4b04 	ldr.w	r4, [sp], #4
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   d6b70:	4760      	bx	ip

000d6b72 <_ZN3UDP4readEPcj>:
     * @return
     */
    virtual int read();
    virtual int read(unsigned char* buffer, size_t len);

    virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
   d6b72:	6803      	ldr	r3, [r0, #0]
   d6b74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d6b76:	4718      	bx	r3

000d6b78 <_ZN3UDP10remotePortEv>:
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
    virtual uint16_t remotePort() { return _remotePort; };
   d6b78:	8e80      	ldrh	r0, [r0, #52]	; 0x34
   d6b7a:	4770      	bx	lr

000d6b7c <_ZN3UDP9availableEv>:
    }
    return bound;
}

int UDP::available() {
    return _total - _offset;
   d6b7c:	8f02      	ldrh	r2, [r0, #56]	; 0x38
   d6b7e:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
}
   d6b80:	1a10      	subs	r0, r2, r0
   d6b82:	4770      	bx	lr

000d6b84 <_ZN3UDP5writeEh>:
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   d6b84:	b507      	push	{r0, r1, r2, lr}
    return write(&byte, 1);
   d6b86:	6803      	ldr	r3, [r0, #0]
size_t UDP::write(uint8_t byte) {
   d6b88:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&byte, 1);
   d6b8c:	68db      	ldr	r3, [r3, #12]
   d6b8e:	2201      	movs	r2, #1
   d6b90:	f10d 0107 	add.w	r1, sp, #7
   d6b94:	4798      	blx	r3
}
   d6b96:	b003      	add	sp, #12
   d6b98:	f85d fb04 	ldr.w	pc, [sp], #4

000d6b9c <_ZN3UDP4readEv>:
        }
    }
    return ret;
}

int UDP::read() {
   d6b9c:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset++] : -1;
   d6b9e:	6803      	ldr	r3, [r0, #0]
   d6ba0:	691b      	ldr	r3, [r3, #16]
int UDP::read() {
   d6ba2:	4604      	mov	r4, r0
    return available() ? _buffer[_offset++] : -1;
   d6ba4:	4798      	blx	r3
   d6ba6:	b128      	cbz	r0, d6bb4 <_ZN3UDP4readEv+0x18>
   d6ba8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d6baa:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   d6bac:	1c59      	adds	r1, r3, #1
   d6bae:	86e1      	strh	r1, [r4, #54]	; 0x36
   d6bb0:	5cd0      	ldrb	r0, [r2, r3]
}
   d6bb2:	bd10      	pop	{r4, pc}
    return available() ? _buffer[_offset++] : -1;
   d6bb4:	f04f 30ff 	mov.w	r0, #4294967295
   d6bb8:	e7fb      	b.n	d6bb2 <_ZN3UDP4readEv+0x16>

000d6bba <_ZN3UDP4peekEv>:
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   d6bba:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset] : -1;
   d6bbc:	6803      	ldr	r3, [r0, #0]
   d6bbe:	691b      	ldr	r3, [r3, #16]
int UDP::peek() {
   d6bc0:	4604      	mov	r4, r0
    return available() ? _buffer[_offset] : -1;
   d6bc2:	4798      	blx	r3
   d6bc4:	b118      	cbz	r0, d6bce <_ZN3UDP4peekEv+0x14>
   d6bc6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d6bc8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   d6bca:	5cd0      	ldrb	r0, [r2, r3]
}
   d6bcc:	bd10      	pop	{r4, pc}
    return available() ? _buffer[_offset] : -1;
   d6bce:	f04f 30ff 	mov.w	r0, #4294967295
   d6bd2:	e7fb      	b.n	d6bcc <_ZN3UDP4peekEv+0x12>

000d6bd4 <_ZN3UDP5flushEv>:

void UDP::flush() {
}
   d6bd4:	4770      	bx	lr

000d6bd6 <_ZNK3UDP7printToER5Print>:
void UDP::flush_buffer() {
    _offset = 0;
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
   d6bd6:	b410      	push	{r4}
   d6bd8:	4603      	mov	r3, r0
   d6bda:	4608      	mov	r0, r1
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   d6bdc:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
    int size = _total - _offset;
   d6bde:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
   d6be0:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
    return p.write(_buffer + _offset, size);
   d6be2:	6803      	ldr	r3, [r0, #0]
   d6be4:	1a52      	subs	r2, r2, r1
   d6be6:	68db      	ldr	r3, [r3, #12]
   d6be8:	4421      	add	r1, r4
}
   d6bea:	f85d 4b04 	ldr.w	r4, [sp], #4
    return p.write(_buffer + _offset, size);
   d6bee:	4718      	bx	r3

000d6bf0 <_ZThn16_NK3UDP7printToER5Print>:
    /**
     * Prints the current read parsed packet to the given output.
     * @param p
     * @return
     */
    virtual size_t printTo(Print& p) const;
   d6bf0:	f1a0 0010 	sub.w	r0, r0, #16
   d6bf4:	f7ff bfef 	b.w	d6bd6 <_ZNK3UDP7printToER5Print>

000d6bf8 <_ZN3UDP5beginEtm>:
uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d6bf8:	b570      	push	{r4, r5, r6, lr}
    stop();
   d6bfa:	6803      	ldr	r3, [r0, #0]
uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d6bfc:	b08c      	sub	sp, #48	; 0x30
    stop();
   d6bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d6c00:	4604      	mov	r4, r0
   d6c02:	460e      	mov	r6, r1
   d6c04:	4615      	mov	r5, r2
    stop();
   d6c06:	4798      	blx	r3
    const int one = 1;
   d6c08:	2301      	movs	r3, #1
    struct sockaddr_in6 saddr = {};
   d6c0a:	221c      	movs	r2, #28
   d6c0c:	2100      	movs	r1, #0
   d6c0e:	a805      	add	r0, sp, #20
    const int one = 1;
   d6c10:	9302      	str	r3, [sp, #8]
    struct sockaddr_in6 saddr = {};
   d6c12:	f002 fec7 	bl	d99a4 <memset>
    saddr.sin6_len = sizeof(saddr);
   d6c16:	f640 231c 	movw	r3, #2588	; 0xa1c
    saddr.sin6_port = htons(port);
   d6c1a:	4630      	mov	r0, r6
    saddr.sin6_len = sizeof(saddr);
   d6c1c:	f8ad 3014 	strh.w	r3, [sp, #20]
    saddr.sin6_port = htons(port);
   d6c20:	f7ff fcd4 	bl	d65cc <inet_htons>
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d6c24:	2211      	movs	r2, #17
    saddr.sin6_port = htons(port);
   d6c26:	f8ad 0016 	strh.w	r0, [sp, #22]
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d6c2a:	2102      	movs	r1, #2
   d6c2c:	200a      	movs	r0, #10
   d6c2e:	f7ff fd8d 	bl	d674c <sock_socket>
    if (_sock < 0) {
   d6c32:	2800      	cmp	r0, #0
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d6c34:	6160      	str	r0, [r4, #20]
    if (_sock < 0) {
   d6c36:	db25      	blt.n	d6c84 <_ZN3UDP5beginEtm+0x8c>
    if (sock_setsockopt(_sock, SOL_SOCKET, SO_REUSEADDR, &one, sizeof(one))) {
   d6c38:	2204      	movs	r2, #4
   d6c3a:	9200      	str	r2, [sp, #0]
   d6c3c:	ab02      	add	r3, sp, #8
   d6c3e:	f640 71ff 	movw	r1, #4095	; 0xfff
   d6c42:	f7ff fd4b 	bl	d66dc <sock_setsockopt>
   d6c46:	b9e8      	cbnz	r0, d6c84 <_ZN3UDP5beginEtm+0x8c>
    if (nif != 0) {
   d6c48:	b195      	cbz	r5, d6c70 <_ZN3UDP5beginEtm+0x78>
        struct ifreq ifr = {};
   d6c4a:	9003      	str	r0, [sp, #12]
   d6c4c:	f8ad 0010 	strh.w	r0, [sp, #16]
        if (if_index_to_name(nif, ifr.ifr_name)) {
   d6c50:	a903      	add	r1, sp, #12
   d6c52:	b2e8      	uxtb	r0, r5
   d6c54:	f7ff fc7a 	bl	d654c <if_index_to_name>
   d6c58:	b9a0      	cbnz	r0, d6c84 <_ZN3UDP5beginEtm+0x8c>
        if (sock_setsockopt(_sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr))) {
   d6c5a:	2306      	movs	r3, #6
   d6c5c:	9300      	str	r3, [sp, #0]
   d6c5e:	6960      	ldr	r0, [r4, #20]
   d6c60:	ab03      	add	r3, sp, #12
   d6c62:	f241 020b 	movw	r2, #4107	; 0x100b
   d6c66:	f640 71ff 	movw	r1, #4095	; 0xfff
   d6c6a:	f7ff fd37 	bl	d66dc <sock_setsockopt>
   d6c6e:	b948      	cbnz	r0, d6c84 <_ZN3UDP5beginEtm+0x8c>
    if (sock_bind(_sock, (const struct sockaddr*)&saddr, sizeof(saddr))) {
   d6c70:	6960      	ldr	r0, [r4, #20]
   d6c72:	221c      	movs	r2, #28
   d6c74:	a905      	add	r1, sp, #20
   d6c76:	f7ff fd29 	bl	d66cc <sock_bind>
   d6c7a:	b918      	cbnz	r0, d6c84 <_ZN3UDP5beginEtm+0x8c>
    _nif = nif;
   d6c7c:	6465      	str	r5, [r4, #68]	; 0x44
    bound = true;
   d6c7e:	2001      	movs	r0, #1
}
   d6c80:	b00c      	add	sp, #48	; 0x30
   d6c82:	bd70      	pop	{r4, r5, r6, pc}
        stop();
   d6c84:	6823      	ldr	r3, [r4, #0]
   d6c86:	4620      	mov	r0, r4
   d6c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6c8a:	4798      	blx	r3
   d6c8c:	2000      	movs	r0, #0
   d6c8e:	e7f7      	b.n	d6c80 <_ZN3UDP5beginEtm+0x88>

000d6c90 <_ZN3UDP4stopEv>:
void UDP::stop() {
   d6c90:	b510      	push	{r4, lr}
   d6c92:	4604      	mov	r4, r0
    if (isOpen(_sock)) {
   d6c94:	6940      	ldr	r0, [r0, #20]
   d6c96:	2800      	cmp	r0, #0
   d6c98:	db01      	blt.n	d6c9e <_ZN3UDP4stopEv+0xe>
        sock_close(_sock);
   d6c9a:	f7ff fd27 	bl	d66ec <sock_close>
    _sock = -1;
   d6c9e:	f04f 33ff 	mov.w	r3, #4294967295
   d6ca2:	6163      	str	r3, [r4, #20]
    _offset = 0;
   d6ca4:	2300      	movs	r3, #0
   d6ca6:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d6ca8:	8723      	strh	r3, [r4, #56]	; 0x38
}
   d6caa:	bd10      	pop	{r4, pc}

000d6cac <_ZN3UDP5writeEPKhj>:
size_t UDP::write(const uint8_t *buffer, size_t size) {
   d6cac:	b570      	push	{r4, r5, r6, lr}
   d6cae:	4605      	mov	r5, r0
    size_t available = _buffer ? _buffer_size - _offset : 0;
   d6cb0:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   d6cb2:	8eee      	ldrh	r6, [r5, #54]	; 0x36
   d6cb4:	b168      	cbz	r0, d6cd2 <_ZN3UDP5writeEPKhj+0x26>
   d6cb6:	6c2b      	ldr	r3, [r5, #64]	; 0x40
   d6cb8:	1b9c      	subs	r4, r3, r6
    if (size > available) {
   d6cba:	4294      	cmp	r4, r2
   d6cbc:	bf28      	it	cs
   d6cbe:	4614      	movcs	r4, r2
    memcpy(_buffer + _offset, buffer, size);
   d6cc0:	4622      	mov	r2, r4
   d6cc2:	4430      	add	r0, r6
   d6cc4:	f002 fe60 	bl	d9988 <memcpy>
    _offset += size;
   d6cc8:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
   d6cca:	4423      	add	r3, r4
   d6ccc:	86eb      	strh	r3, [r5, #54]	; 0x36
}
   d6cce:	4620      	mov	r0, r4
   d6cd0:	bd70      	pop	{r4, r5, r6, pc}
    size_t available = _buffer ? _buffer_size - _offset : 0;
   d6cd2:	4604      	mov	r4, r0
   d6cd4:	e7f1      	b.n	d6cba <_ZN3UDP5writeEPKhj+0xe>

000d6cd6 <_ZN3UDP4readEPhj>:
int UDP::read(unsigned char* buffer, size_t len) {
   d6cd6:	b5d0      	push	{r4, r6, r7, lr}
    if (available()) {
   d6cd8:	6803      	ldr	r3, [r0, #0]
   d6cda:	691b      	ldr	r3, [r3, #16]
int UDP::read(unsigned char* buffer, size_t len) {
   d6cdc:	4604      	mov	r4, r0
   d6cde:	460f      	mov	r7, r1
   d6ce0:	4616      	mov	r6, r2
    if (available()) {
   d6ce2:	4798      	blx	r3
   d6ce4:	b190      	cbz	r0, d6d0c <_ZN3UDP4readEPhj+0x36>
        read = min(int(len), available());
   d6ce6:	6823      	ldr	r3, [r4, #0]
   d6ce8:	4620      	mov	r0, r4
   d6cea:	691b      	ldr	r3, [r3, #16]
   d6cec:	4798      	blx	r3
        memcpy(buffer, &_buffer[_offset], read);
   d6cee:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d6cf0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d6cf2:	4286      	cmp	r6, r0
   d6cf4:	bfa8      	it	ge
   d6cf6:	4606      	movge	r6, r0
   d6cf8:	4419      	add	r1, r3
   d6cfa:	4632      	mov	r2, r6
   d6cfc:	4638      	mov	r0, r7
   d6cfe:	f002 fe43 	bl	d9988 <memcpy>
        _offset += read;
   d6d02:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d6d04:	4433      	add	r3, r6
   d6d06:	86e3      	strh	r3, [r4, #54]	; 0x36
}
   d6d08:	4630      	mov	r0, r6
   d6d0a:	bdd0      	pop	{r4, r6, r7, pc}
    int read = -1;
   d6d0c:	f04f 36ff 	mov.w	r6, #4294967295
    return read;
   d6d10:	e7fa      	b.n	d6d08 <_ZN3UDP4readEPhj+0x32>
	...

000d6d14 <_ZN3UDP8remoteIPEv>:
    virtual IPAddress remoteIP() { return _remoteIP; };
   d6d14:	b570      	push	{r4, r5, r6, lr}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d6d16:	4604      	mov	r4, r0
   d6d18:	4b05      	ldr	r3, [pc, #20]	; (d6d30 <_ZN3UDP8remoteIPEv+0x1c>)
   d6d1a:	f844 3b04 	str.w	r3, [r4], #4
   d6d1e:	f101 0520 	add.w	r5, r1, #32
   d6d22:	4606      	mov	r6, r0
   d6d24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6d26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6d28:	682b      	ldr	r3, [r5, #0]
   d6d2a:	7023      	strb	r3, [r4, #0]
   d6d2c:	4630      	mov	r0, r6
   d6d2e:	bd70      	pop	{r4, r5, r6, pc}
   d6d30:	000dbf1c 	.word	0x000dbf1c

000d6d34 <_ZN3UDP10sendPacketEPKcj9IPAddresst>:
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d6d34:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6d36:	4696      	mov	lr, r2
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d6d38:	6802      	ldr	r2, [r0, #0]
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d6d3a:	b089      	sub	sp, #36	; 0x24
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d6d3c:	6a97      	ldr	r7, [r2, #40]	; 0x28
   d6d3e:	4a0a      	ldr	r2, [pc, #40]	; (d6d68 <_ZN3UDP10sendPacketEPKcj9IPAddresst+0x34>)
   d6d40:	9202      	str	r2, [sp, #8]
   d6d42:	1d1c      	adds	r4, r3, #4
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d6d44:	468c      	mov	ip, r1
   d6d46:	4606      	mov	r6, r0
   d6d48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d6d4a:	ad03      	add	r5, sp, #12
   d6d4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d6d4e:	6823      	ldr	r3, [r4, #0]
   d6d50:	702b      	strb	r3, [r5, #0]
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d6d52:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   d6d56:	9300      	str	r3, [sp, #0]
   d6d58:	4672      	mov	r2, lr
   d6d5a:	ab02      	add	r3, sp, #8
   d6d5c:	4661      	mov	r1, ip
   d6d5e:	4630      	mov	r0, r6
   d6d60:	47b8      	blx	r7
    }
   d6d62:	b009      	add	sp, #36	; 0x24
   d6d64:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6d66:	bf00      	nop
   d6d68:	000dbf1c 	.word	0x000dbf1c

000d6d6c <_ZN3UDP9endPacketEv>:
int UDP::endPacket() {
   d6d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d6d6e:	6803      	ldr	r3, [r0, #0]
int UDP::endPacket() {
   d6d70:	b089      	sub	sp, #36	; 0x24
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d6d72:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   d6d74:	4b0c      	ldr	r3, [pc, #48]	; (d6da8 <_ZN3UDP9endPacketEv+0x3c>)
   d6d76:	9302      	str	r3, [sp, #8]
   d6d78:	f100 0620 	add.w	r6, r0, #32
int UDP::endPacket() {
   d6d7c:	4604      	mov	r4, r0
   d6d7e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d6d80:	ad03      	add	r5, sp, #12
   d6d82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d6d84:	6833      	ldr	r3, [r6, #0]
   d6d86:	702b      	strb	r3, [r5, #0]
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d6d88:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   d6d8a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
   d6d8c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d6d8e:	9300      	str	r3, [sp, #0]
   d6d90:	4620      	mov	r0, r4
   d6d92:	ab02      	add	r3, sp, #8
   d6d94:	47b8      	blx	r7
    flush(); // wait for send to complete
   d6d96:	6823      	ldr	r3, [r4, #0]
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d6d98:	4605      	mov	r5, r0
    flush(); // wait for send to complete
   d6d9a:	69db      	ldr	r3, [r3, #28]
   d6d9c:	4620      	mov	r0, r4
   d6d9e:	4798      	blx	r3
}
   d6da0:	4628      	mov	r0, r5
   d6da2:	b009      	add	sp, #36	; 0x24
   d6da4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6da6:	bf00      	nop
   d6da8:	000dbf1c 	.word	0x000dbf1c

000d6dac <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>:

namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   d6dac:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (saddr->sa_family == AF_INET) {
   d6dae:	7843      	ldrb	r3, [r0, #1]
   d6db0:	2b02      	cmp	r3, #2
inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   d6db2:	b08d      	sub	sp, #52	; 0x34
   d6db4:	4605      	mov	r5, r0
   d6db6:	460c      	mov	r4, r1
   d6db8:	4617      	mov	r7, r2
    if (saddr->sa_family == AF_INET) {
   d6dba:	d104      	bne.n	d6dc6 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x1a>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d6dbc:	1d01      	adds	r1, r0, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d6dbe:	4620      	mov	r0, r4
   d6dc0:	f000 ff8a 	bl	d7cd8 <_ZN9IPAddressaSEPKh>
   d6dc4:	e022      	b.n	d6e0c <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x60>
    else if (saddr->sa_family == AF_INET6) {
   d6dc6:	2b0a      	cmp	r3, #10
   d6dc8:	d125      	bne.n	d6e16 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6a>
        HAL_IPAddress a = {};
   d6dca:	2211      	movs	r2, #17
   d6dcc:	2100      	movs	r1, #0
   d6dce:	a801      	add	r0, sp, #4
   d6dd0:	f002 fde8 	bl	d99a4 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d6dd4:	68ab      	ldr	r3, [r5, #8]
   d6dd6:	b303      	cbz	r3, d6e1a <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6e>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d6dd8:	f105 0308 	add.w	r3, r5, #8
   d6ddc:	ae01      	add	r6, sp, #4
   d6dde:	f105 0c18 	add.w	ip, r5, #24
   d6de2:	6818      	ldr	r0, [r3, #0]
   d6de4:	6859      	ldr	r1, [r3, #4]
   d6de6:	4632      	mov	r2, r6
   d6de8:	c203      	stmia	r2!, {r0, r1}
   d6dea:	3308      	adds	r3, #8
   d6dec:	4563      	cmp	r3, ip
   d6dee:	4616      	mov	r6, r2
   d6df0:	d1f7      	bne.n	d6de2 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x36>
            a.v = 6;
   d6df2:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d6df4:	a901      	add	r1, sp, #4
   d6df6:	a806      	add	r0, sp, #24
   d6df8:	ae07      	add	r6, sp, #28
            a.v = 6;
   d6dfa:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d6dfe:	f000 ff29 	bl	d7c54 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d6e02:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d6e04:	3404      	adds	r4, #4
   d6e06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6e08:	6833      	ldr	r3, [r6, #0]
   d6e0a:	7023      	strb	r3, [r4, #0]
        }
        if (port) {
   d6e0c:	b11f      	cbz	r7, d6e16 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6a>
            *port = ntohs(in6addr->sin6_port);
   d6e0e:	8868      	ldrh	r0, [r5, #2]
   d6e10:	f7ff fbd4 	bl	d65bc <inet_ntohs>
   d6e14:	8038      	strh	r0, [r7, #0]
        }
    }
#endif // HAL_IPv6
}
   d6e16:	b00d      	add	sp, #52	; 0x34
   d6e18:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d6e1a:	68eb      	ldr	r3, [r5, #12]
   d6e1c:	2b00      	cmp	r3, #0
   d6e1e:	d1db      	bne.n	d6dd8 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x2c>
   d6e20:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d6e24:	692e      	ldr	r6, [r5, #16]
   d6e26:	f7ff fbc1 	bl	d65ac <inet_htonl>
   d6e2a:	4286      	cmp	r6, r0
   d6e2c:	d1d4      	bne.n	d6dd8 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x2c>
            addr = (const uint8_t*)(&ptr[3]);
   d6e2e:	f105 0114 	add.w	r1, r5, #20
   d6e32:	e7c4      	b.n	d6dbe <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x12>

000d6e34 <_ZN3UDP11beginPacketEPKct>:
int UDP::beginPacket(const char *host, uint16_t port) {
   d6e34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6e38:	4617      	mov	r7, r2
   d6e3a:	b08e      	sub	sp, #56	; 0x38
    struct addrinfo* ais = nullptr;
   d6e3c:	2200      	movs	r2, #0
int UDP::beginPacket(const char *host, uint16_t port) {
   d6e3e:	4606      	mov	r6, r0
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   d6e40:	ab01      	add	r3, sp, #4
int UDP::beginPacket(const char *host, uint16_t port) {
   d6e42:	4608      	mov	r0, r1
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   d6e44:	4611      	mov	r1, r2
    struct addrinfo* ais = nullptr;
   d6e46:	9201      	str	r2, [sp, #4]
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   d6e48:	f7ff fb30 	bl	d64ac <netdb_getaddrinfo>
   d6e4c:	1e04      	subs	r4, r0, #0
   d6e4e:	db20      	blt.n	d6e92 <_ZN3UDP11beginPacketEPKct+0x5e>
    if (ais && ais->ai_addr) {
   d6e50:	9b01      	ldr	r3, [sp, #4]
   d6e52:	b32b      	cbz	r3, d6ea0 <_ZN3UDP11beginPacketEPKct+0x6c>
   d6e54:	695b      	ldr	r3, [r3, #20]
   d6e56:	b31b      	cbz	r3, d6ea0 <_ZN3UDP11beginPacketEPKct+0x6c>
        IPAddress addr;
   d6e58:	a802      	add	r0, sp, #8
   d6e5a:	f000 feed 	bl	d7c38 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d6e5e:	9b01      	ldr	r3, [sp, #4]
   d6e60:	2200      	movs	r2, #0
   d6e62:	6958      	ldr	r0, [r3, #20]
   d6e64:	a902      	add	r1, sp, #8
   d6e66:	f7ff ffa1 	bl	d6dac <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d6e6a:	a802      	add	r0, sp, #8
   d6e6c:	f000 ff04 	bl	d7c78 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d6e70:	b1b0      	cbz	r0, d6ea0 <_ZN3UDP11beginPacketEPKct+0x6c>
            return beginPacket(addr, port);
   d6e72:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   d6e74:	ad03      	add	r5, sp, #12
   d6e76:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
   d6e7a:	4b0b      	ldr	r3, [pc, #44]	; (d6ea8 <_ZN3UDP11beginPacketEPKct+0x74>)
   d6e7c:	9308      	str	r3, [sp, #32]
   d6e7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6e80:	ac09      	add	r4, sp, #36	; 0x24
   d6e82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6e84:	682b      	ldr	r3, [r5, #0]
   d6e86:	7023      	strb	r3, [r4, #0]
   d6e88:	463a      	mov	r2, r7
   d6e8a:	a908      	add	r1, sp, #32
   d6e8c:	4630      	mov	r0, r6
   d6e8e:	47c0      	blx	r8
   d6e90:	4604      	mov	r4, r0
    SCOPE_GUARD({
   d6e92:	9801      	ldr	r0, [sp, #4]
   d6e94:	f7ff fb02 	bl	d649c <netdb_freeaddrinfo>
}
   d6e98:	4620      	mov	r0, r4
   d6e9a:	b00e      	add	sp, #56	; 0x38
   d6e9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return -1;
   d6ea0:	f04f 34ff 	mov.w	r4, #4294967295
   d6ea4:	e7f5      	b.n	d6e92 <_ZN3UDP11beginPacketEPKct+0x5e>
   d6ea6:	bf00      	nop
   d6ea8:	000dbf1c 	.word	0x000dbf1c

000d6eac <_ZN3UDP13receivePacketEPhjm>:
int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   d6eac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (isOpen(_sock) && buffer) {
   d6eb0:	f8d0 9014 	ldr.w	r9, [r0, #20]
   d6eb4:	f1b9 0f00 	cmp.w	r9, #0
int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   d6eb8:	b090      	sub	sp, #64	; 0x40
   d6eba:	4605      	mov	r5, r0
   d6ebc:	460e      	mov	r6, r1
   d6ebe:	4690      	mov	r8, r2
   d6ec0:	461c      	mov	r4, r3
    if (isOpen(_sock) && buffer) {
   d6ec2:	db3c      	blt.n	d6f3e <_ZN3UDP13receivePacketEPhjm+0x92>
   d6ec4:	2900      	cmp	r1, #0
   d6ec6:	d03a      	beq.n	d6f3e <_ZN3UDP13receivePacketEPhjm+0x92>
        sockaddr_storage saddr = {};
   d6ec8:	f04f 0a1c 	mov.w	sl, #28
   d6ecc:	af09      	add	r7, sp, #36	; 0x24
   d6ece:	4652      	mov	r2, sl
   d6ed0:	2100      	movs	r1, #0
   d6ed2:	4638      	mov	r0, r7
   d6ed4:	f002 fd66 	bl	d99a4 <memset>
        socklen_t slen = sizeof(saddr);
   d6ed8:	f8cd a00c 	str.w	sl, [sp, #12]
        if (timeout == 0) {
   d6edc:	b1dc      	cbz	r4, d6f16 <_ZN3UDP13receivePacketEPhjm+0x6a>
            struct timeval tv = {};
   d6ede:	2200      	movs	r2, #0
            tv.tv_sec = timeout / 1000;
   d6ee0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d6ee4:	fbb4 f3f0 	udiv	r3, r4, r0
   d6ee8:	e9cd 3204 	strd	r3, r2, [sp, #16]
            tv.tv_usec = (timeout % 1000) * 1000;
   d6eec:	fb00 4313 	mls	r3, r0, r3, r4
   d6ef0:	4358      	muls	r0, r3
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   d6ef2:	2310      	movs	r3, #16
            struct timeval tv = {};
   d6ef4:	9207      	str	r2, [sp, #28]
            tv.tv_usec = (timeout % 1000) * 1000;
   d6ef6:	9006      	str	r0, [sp, #24]
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   d6ef8:	9300      	str	r3, [sp, #0]
   d6efa:	f241 0206 	movw	r2, #4102	; 0x1006
   d6efe:	446b      	add	r3, sp
   d6f00:	f640 71ff 	movw	r1, #4095	; 0xfff
   d6f04:	4648      	mov	r0, r9
   d6f06:	f7ff fbe9 	bl	d66dc <sock_setsockopt>
            if (ret) {
   d6f0a:	4604      	mov	r4, r0
   d6f0c:	b120      	cbz	r0, d6f18 <_ZN3UDP13receivePacketEPhjm+0x6c>
}
   d6f0e:	4620      	mov	r0, r4
   d6f10:	b010      	add	sp, #64	; 0x40
   d6f12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            flags = MSG_DONTWAIT;
   d6f16:	2408      	movs	r4, #8
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   d6f18:	ab03      	add	r3, sp, #12
   d6f1a:	e9cd 7300 	strd	r7, r3, [sp]
   d6f1e:	6968      	ldr	r0, [r5, #20]
   d6f20:	4623      	mov	r3, r4
   d6f22:	4642      	mov	r2, r8
   d6f24:	4631      	mov	r1, r6
   d6f26:	f7ff fbf9 	bl	d671c <sock_recvfrom>
        if (ret >= 0) {
   d6f2a:	1e04      	subs	r4, r0, #0
   d6f2c:	dbef      	blt.n	d6f0e <_ZN3UDP13receivePacketEPhjm+0x62>
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
   d6f2e:	f105 0234 	add.w	r2, r5, #52	; 0x34
   d6f32:	f105 011c 	add.w	r1, r5, #28
   d6f36:	4638      	mov	r0, r7
   d6f38:	f7ff ff38 	bl	d6dac <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
            LOG_DEBUG(TRACE, "received %d bytes from %s#%d", ret, _remoteIP.toString().c_str(), _remotePort);
   d6f3c:	e7e7      	b.n	d6f0e <_ZN3UDP13receivePacketEPhjm+0x62>
    int ret = -1;
   d6f3e:	f04f 34ff 	mov.w	r4, #4294967295
   d6f42:	e7e4      	b.n	d6f0e <_ZN3UDP13receivePacketEPhjm+0x62>

000d6f44 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>:

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   d6f44:	b538      	push	{r3, r4, r5, lr}
   d6f46:	4605      	mov	r5, r0
   d6f48:	4614      	mov	r4, r2
    if (addr.version() == 6) {
   d6f4a:	7d2b      	ldrb	r3, [r5, #20]
   d6f4c:	2b06      	cmp	r3, #6
inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   d6f4e:	4608      	mov	r0, r1
    if (addr.version() == 6) {
   d6f50:	d110      	bne.n	d6f74 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x30>
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
   d6f52:	f640 231c 	movw	r3, #2588	; 0xa1c
   d6f56:	8013      	strh	r3, [r2, #0]
        in6addr->sin6_family = AF_INET6;
        in6addr->sin6_port = htons(port);
   d6f58:	f7ff fb38 	bl	d65cc <inet_htons>
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   d6f5c:	3408      	adds	r4, #8
   d6f5e:	1d2b      	adds	r3, r5, #4
        in6addr->sin6_port = htons(port);
   d6f60:	f824 0c06 	strh.w	r0, [r4, #-6]
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   d6f64:	3514      	adds	r5, #20
   d6f66:	f853 2b04 	ldr.w	r2, [r3], #4
   d6f6a:	f844 2b04 	str.w	r2, [r4], #4
   d6f6e:	42ab      	cmp	r3, r5
   d6f70:	d1f9      	bne.n	d6f66 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x22>
        const auto& a = addr.raw();
        // NOTE: HAL_IPAddress.ipv4 is host-order :|
        inaddr->sin_addr.s_addr = htonl(a.ipv4);
    }
#endif // HAL_IPv6
}
   d6f72:	bd38      	pop	{r3, r4, r5, pc}
    else if (addr.version() == 4) {
   d6f74:	2b04      	cmp	r3, #4
   d6f76:	d1fc      	bne.n	d6f72 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x2e>
        inaddr->sin_len = sizeof(sockaddr_in);
   d6f78:	f44f 7304 	mov.w	r3, #528	; 0x210
   d6f7c:	8013      	strh	r3, [r2, #0]
        inaddr->sin_port = htons(port);
   d6f7e:	f7ff fb25 	bl	d65cc <inet_htons>
   d6f82:	8060      	strh	r0, [r4, #2]
        inaddr->sin_addr.s_addr = htonl(a.ipv4);
   d6f84:	6868      	ldr	r0, [r5, #4]
   d6f86:	f7ff fb11 	bl	d65ac <inet_htonl>
   d6f8a:	6060      	str	r0, [r4, #4]
}
   d6f8c:	e7f1      	b.n	d6f72 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x2e>

000d6f8e <_ZN3UDP10sendPacketEPKhj9IPAddresst>:
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   d6f8e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6f92:	b08b      	sub	sp, #44	; 0x2c
	sockaddr_storage s = {};
   d6f94:	af03      	add	r7, sp, #12
   d6f96:	f04f 091c 	mov.w	r9, #28
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   d6f9a:	4698      	mov	r8, r3
   d6f9c:	4604      	mov	r4, r0
   d6f9e:	460d      	mov	r5, r1
   d6fa0:	4616      	mov	r6, r2
	sockaddr_storage s = {};
   d6fa2:	2100      	movs	r1, #0
   d6fa4:	464a      	mov	r2, r9
   d6fa6:	4638      	mov	r0, r7
   d6fa8:	f002 fcfc 	bl	d99a4 <memset>
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
   d6fac:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
   d6fb0:	463a      	mov	r2, r7
   d6fb2:	4640      	mov	r0, r8
   d6fb4:	f7ff ffc6 	bl	d6f44 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_UNSPEC) {
   d6fb8:	f89d 300d 	ldrb.w	r3, [sp, #13]
   d6fbc:	b153      	cbz	r3, d6fd4 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x46>
    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
   d6fbe:	e9cd 7900 	strd	r7, r9, [sp]
   d6fc2:	6960      	ldr	r0, [r4, #20]
   d6fc4:	2300      	movs	r3, #0
   d6fc6:	4632      	mov	r2, r6
   d6fc8:	4629      	mov	r1, r5
   d6fca:	f7ff fbb7 	bl	d673c <sock_sendto>
}
   d6fce:	b00b      	add	sp, #44	; 0x2c
   d6fd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return -1;
   d6fd4:	f04f 30ff 	mov.w	r0, #4294967295
   d6fd8:	e7f9      	b.n	d6fce <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x40>
	...

000d6fdc <_ZN3UDPC1Ev>:
UDP::UDP()
   d6fdc:	b538      	push	{r3, r4, r5, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d6fde:	2500      	movs	r5, #0
   d6fe0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6fe4:	e9c0 5301 	strd	r5, r3, [r0, #4]
          _buffer_allocated(false) {
   d6fe8:	4b0b      	ldr	r3, [pc, #44]	; (d7018 <_ZN3UDPC1Ev+0x3c>)
   d6fea:	f103 0208 	add.w	r2, r3, #8
   d6fee:	336c      	adds	r3, #108	; 0x6c
   d6ff0:	6103      	str	r3, [r0, #16]
   d6ff2:	f04f 33ff 	mov.w	r3, #4294967295
UDP::UDP()
   d6ff6:	4604      	mov	r4, r0
          _buffer_allocated(false) {
   d6ff8:	6002      	str	r2, [r0, #0]
   d6ffa:	6143      	str	r3, [r0, #20]
   d6ffc:	301c      	adds	r0, #28
   d6ffe:	f000 fe1b 	bl	d7c38 <_ZN9IPAddressC1Ev>
   d7002:	f44f 7300 	mov.w	r3, #512	; 0x200
   d7006:	e9c4 3510 	strd	r3, r5, [r4, #64]	; 0x40
   d700a:	86e5      	strh	r5, [r4, #54]	; 0x36
   d700c:	8725      	strh	r5, [r4, #56]	; 0x38
   d700e:	63e5      	str	r5, [r4, #60]	; 0x3c
   d7010:	f884 5048 	strb.w	r5, [r4, #72]	; 0x48
}
   d7014:	4620      	mov	r0, r4
   d7016:	bd38      	pop	{r3, r4, r5, pc}
   d7018:	000dbe60 	.word	0x000dbe60

000d701c <_ZN3UDP13releaseBufferEv>:
void UDP::releaseBuffer() {
   d701c:	b510      	push	{r4, lr}
    if (_buffer_allocated && _buffer) {
   d701e:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
void UDP::releaseBuffer() {
   d7022:	4604      	mov	r4, r0
    if (_buffer_allocated && _buffer) {
   d7024:	b123      	cbz	r3, d7030 <_ZN3UDP13releaseBufferEv+0x14>
   d7026:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   d7028:	b110      	cbz	r0, d7030 <_ZN3UDP13releaseBufferEv+0x14>
        delete _buffer;
   d702a:	2101      	movs	r1, #1
   d702c:	f001 fc6f 	bl	d890e <_ZdlPvj>
    _buffer = NULL;
   d7030:	2300      	movs	r3, #0
   d7032:	63e3      	str	r3, [r4, #60]	; 0x3c
    _buffer_allocated = false;
   d7034:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    _buffer_size = 0;
   d7038:	6423      	str	r3, [r4, #64]	; 0x40
    _offset = 0;
   d703a:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d703c:	8723      	strh	r3, [r4, #56]	; 0x38
}
   d703e:	bd10      	pop	{r4, pc}

000d7040 <_ZN3UDP9setBufferEjPh>:
bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
   d7040:	b570      	push	{r4, r5, r6, lr}
   d7042:	4604      	mov	r4, r0
   d7044:	4616      	mov	r6, r2
   d7046:	460d      	mov	r5, r1
    releaseBuffer();
   d7048:	f7ff ffe8 	bl	d701c <_ZN3UDP13releaseBufferEv>
    _buffer_size = 0;
   d704c:	2300      	movs	r3, #0
    _buffer = buffer;
   d704e:	63e6      	str	r6, [r4, #60]	; 0x3c
    _buffer_size = 0;
   d7050:	6423      	str	r3, [r4, #64]	; 0x40
    if (!_buffer && buf_size) {         // requested allocation
   d7052:	b12e      	cbz	r6, d7060 <_ZN3UDP9setBufferEjPh+0x20>
        _buffer_size = buf_size;
   d7054:	6425      	str	r5, [r4, #64]	; 0x40
    return _buffer_size;
   d7056:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
   d7058:	3800      	subs	r0, #0
   d705a:	bf18      	it	ne
   d705c:	2001      	movne	r0, #1
   d705e:	bd70      	pop	{r4, r5, r6, pc}
    if (!_buffer && buf_size) {         // requested allocation
   d7060:	2d00      	cmp	r5, #0
   d7062:	d0f8      	beq.n	d7056 <_ZN3UDP9setBufferEjPh+0x16>
        _buffer = new uint8_t[buf_size];
   d7064:	4628      	mov	r0, r5
   d7066:	f7fd f818 	bl	d409a <_Znaj>
        _buffer_allocated = true;
   d706a:	2301      	movs	r3, #1
        _buffer = new uint8_t[buf_size];
   d706c:	63e0      	str	r0, [r4, #60]	; 0x3c
        _buffer_allocated = true;
   d706e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    if (_buffer) {
   d7072:	2800      	cmp	r0, #0
   d7074:	d0ef      	beq.n	d7056 <_ZN3UDP9setBufferEjPh+0x16>
   d7076:	e7ed      	b.n	d7054 <_ZN3UDP9setBufferEjPh+0x14>

000d7078 <_ZN3UDP11beginPacketE9IPAddresst>:
int UDP::beginPacket(IPAddress ip, uint16_t port) {
   d7078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d707a:	4617      	mov	r7, r2
    if (!_buffer && _buffer_size) {
   d707c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
int UDP::beginPacket(IPAddress ip, uint16_t port) {
   d707e:	4605      	mov	r5, r0
   d7080:	460c      	mov	r4, r1
    if (!_buffer && _buffer_size) {
   d7082:	b91a      	cbnz	r2, d708c <_ZN3UDP11beginPacketE9IPAddresst+0x14>
   d7084:	6c01      	ldr	r1, [r0, #64]	; 0x40
   d7086:	b109      	cbz	r1, d708c <_ZN3UDP11beginPacketE9IPAddresst+0x14>
        setBuffer(_buffer_size);
   d7088:	f7ff ffda 	bl	d7040 <_ZN3UDP9setBufferEjPh>
   d708c:	3404      	adds	r4, #4
   d708e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d7090:	f105 0620 	add.w	r6, r5, #32
   d7094:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d7096:	6823      	ldr	r3, [r4, #0]
   d7098:	7033      	strb	r3, [r6, #0]
    _offset = 0;
   d709a:	2300      	movs	r3, #0
}
   d709c:	6c28      	ldr	r0, [r5, #64]	; 0x40
    _remotePort = port;
   d709e:	86af      	strh	r7, [r5, #52]	; 0x34
    _offset = 0;
   d70a0:	86eb      	strh	r3, [r5, #54]	; 0x36
    _total = 0;
   d70a2:	872b      	strh	r3, [r5, #56]	; 0x38
}
   d70a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d70a6 <_ZN3UDP11parsePacketEm>:
int UDP::parsePacket(system_tick_t timeout) {
   d70a6:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (!_buffer && _buffer_size) {
   d70a8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
int UDP::parsePacket(system_tick_t timeout) {
   d70aa:	4604      	mov	r4, r0
   d70ac:	460b      	mov	r3, r1
    if (!_buffer && _buffer_size) {
   d70ae:	b92a      	cbnz	r2, d70bc <_ZN3UDP11parsePacketEm+0x16>
   d70b0:	6c01      	ldr	r1, [r0, #64]	; 0x40
   d70b2:	b119      	cbz	r1, d70bc <_ZN3UDP11parsePacketEm+0x16>
   d70b4:	9301      	str	r3, [sp, #4]
        setBuffer(_buffer_size);
   d70b6:	f7ff ffc3 	bl	d7040 <_ZN3UDP9setBufferEjPh>
   d70ba:	9b01      	ldr	r3, [sp, #4]
    if (_buffer && _buffer_size) {
   d70bc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    _offset = 0;
   d70be:	2200      	movs	r2, #0
   d70c0:	86e2      	strh	r2, [r4, #54]	; 0x36
    _total = 0;
   d70c2:	8722      	strh	r2, [r4, #56]	; 0x38
    if (_buffer && _buffer_size) {
   d70c4:	b141      	cbz	r1, d70d8 <_ZN3UDP11parsePacketEm+0x32>
   d70c6:	6c22      	ldr	r2, [r4, #64]	; 0x40
   d70c8:	b132      	cbz	r2, d70d8 <_ZN3UDP11parsePacketEm+0x32>
        int result = receivePacket(_buffer, _buffer_size, timeout);
   d70ca:	6820      	ldr	r0, [r4, #0]
   d70cc:	6b05      	ldr	r5, [r0, #48]	; 0x30
   d70ce:	4620      	mov	r0, r4
   d70d0:	47a8      	blx	r5
        if (result > 0) {
   d70d2:	2800      	cmp	r0, #0
            _total = result;
   d70d4:	bfc8      	it	gt
   d70d6:	8720      	strhgt	r0, [r4, #56]	; 0x38
    return available();
   d70d8:	6823      	ldr	r3, [r4, #0]
   d70da:	691b      	ldr	r3, [r3, #16]
   d70dc:	4620      	mov	r0, r4
}
   d70de:	b003      	add	sp, #12
   d70e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return available();
   d70e4:	4718      	bx	r3
	...

000d70e8 <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
   d70e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d70ec:	ec57 6b10 	vmov	r6, r7, d0
   d70f0:	4680      	mov	r8, r0
   d70f2:	460c      	mov	r4, r1
    bool negative = val<0;
    if (negative) {
   d70f4:	ee10 0a10 	vmov	r0, s0
   d70f8:	2200      	movs	r2, #0
   d70fa:	2300      	movs	r3, #0
   d70fc:	4639      	mov	r1, r7
   d70fe:	f002 f9ff 	bl	d9500 <__aeabi_dcmplt>
   d7102:	b128      	cbz	r0, d7110 <_Z4dtoadhPc+0x28>
        val = -val;
   d7104:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   d7108:	461f      	mov	r7, r3
        *sout++ = '-';
   d710a:	232d      	movs	r3, #45	; 0x2d
   d710c:	f804 3b01 	strb.w	r3, [r4], #1
   d7110:	2300      	movs	r3, #0
    }
    long scale = 1;
   d7112:	f04f 0901 	mov.w	r9, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
   d7116:	220a      	movs	r2, #10
    for (uint8_t i=0; i<prec; i++)
   d7118:	b2d9      	uxtb	r1, r3
   d711a:	4588      	cmp	r8, r1
   d711c:	d903      	bls.n	d7126 <_Z4dtoadhPc+0x3e>
        scale *= 10;
   d711e:	fb02 f909 	mul.w	r9, r2, r9
    for (uint8_t i=0; i<prec; i++)
   d7122:	3301      	adds	r3, #1
   d7124:	e7f8      	b.n	d7118 <_Z4dtoadhPc+0x30>
    val *= scale;   // capture all the significant digits
   d7126:	4648      	mov	r0, r9
   d7128:	f001 ff0e 	bl	d8f48 <__aeabi_i2d>
   d712c:	4632      	mov	r2, r6
   d712e:	463b      	mov	r3, r7
   d7130:	f001 ff74 	bl	d901c <__aeabi_dmul>
   d7134:	4606      	mov	r6, r0
   d7136:	460f      	mov	r7, r1
    uint64_t fixed = uint64_t(val);
   d7138:	f002 fa92 	bl	d9660 <__aeabi_d2ulz>
   d713c:	4605      	mov	r5, r0
   d713e:	468a      	mov	sl, r1
    if ((val-fixed)>=0.5)    // round last digit
   d7140:	f001 ff36 	bl	d8fb0 <__aeabi_ul2d>
   d7144:	4602      	mov	r2, r0
   d7146:	460b      	mov	r3, r1
   d7148:	4630      	mov	r0, r6
   d714a:	4639      	mov	r1, r7
   d714c:	f001 fdae 	bl	d8cac <__aeabi_dsub>
   d7150:	4b13      	ldr	r3, [pc, #76]	; (d71a0 <_Z4dtoadhPc+0xb8>)
   d7152:	2200      	movs	r2, #0
   d7154:	f002 f9e8 	bl	d9528 <__aeabi_dcmpge>
   d7158:	b110      	cbz	r0, d7160 <_Z4dtoadhPc+0x78>
        fixed++;
   d715a:	3501      	adds	r5, #1
   d715c:	f14a 0a00 	adc.w	sl, sl, #0

    unsigned long first = (unsigned long)(fixed / scale);
   d7160:	464a      	mov	r2, r9
   d7162:	4628      	mov	r0, r5
   d7164:	17d3      	asrs	r3, r2, #31
   d7166:	4651      	mov	r1, sl
   d7168:	f002 fa62 	bl	d9630 <__aeabi_uldivmod>
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
   d716c:	2301      	movs	r3, #1
   d716e:	4615      	mov	r5, r2
   d7170:	4621      	mov	r1, r4
   d7172:	220a      	movs	r2, #10
   d7174:	f7ff fcb5 	bl	d6ae2 <ultoa>
    if (prec) {
   d7178:	f1b8 0f00 	cmp.w	r8, #0
   d717c:	d00d      	beq.n	d719a <_Z4dtoadhPc+0xb2>
        sout += strlen(sout);
   d717e:	4620      	mov	r0, r4
   d7180:	f002 fc79 	bl	d9a76 <strlen>
        *sout++ = '.';
   d7184:	232e      	movs	r3, #46	; 0x2e
        sout += strlen(sout);
   d7186:	1821      	adds	r1, r4, r0
        *sout++ = '.';
   d7188:	5423      	strb	r3, [r4, r0]
        ultoa(second, sout, 10, prec);
   d718a:	220a      	movs	r2, #10
   d718c:	4643      	mov	r3, r8
   d718e:	4628      	mov	r0, r5
   d7190:	3101      	adds	r1, #1
    }
}
   d7192:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        ultoa(second, sout, 10, prec);
   d7196:	f7ff bca4 	b.w	d6ae2 <ultoa>
}
   d719a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d719e:	bf00      	nop
   d71a0:	3fe00000 	.word	0x3fe00000

000d71a4 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d71a4:	b510      	push	{r4, lr}
   d71a6:	4604      	mov	r4, r0
{
	free(buffer);
   d71a8:	6800      	ldr	r0, [r0, #0]
   d71aa:	f7ff fbdb 	bl	d6964 <free>
}
   d71ae:	4620      	mov	r0, r4
   d71b0:	bd10      	pop	{r4, pc}

000d71b2 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d71b2:	b510      	push	{r4, lr}
   d71b4:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d71b6:	6800      	ldr	r0, [r0, #0]
   d71b8:	b108      	cbz	r0, d71be <_ZN6String10invalidateEv+0xc>
   d71ba:	f7ff fbd3 	bl	d6964 <free>
	buffer = NULL;
   d71be:	2300      	movs	r3, #0
	capacity = len = 0;
   d71c0:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d71c4:	6023      	str	r3, [r4, #0]
}
   d71c6:	bd10      	pop	{r4, pc}

000d71c8 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d71c8:	b538      	push	{r3, r4, r5, lr}
   d71ca:	4604      	mov	r4, r0
   d71cc:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d71ce:	6800      	ldr	r0, [r0, #0]
   d71d0:	3101      	adds	r1, #1
   d71d2:	f7ff fbcf 	bl	d6974 <realloc>
	if (newbuffer) {
   d71d6:	b110      	cbz	r0, d71de <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d71d8:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d71dc:	2001      	movs	r0, #1
	}
	return 0;
}
   d71de:	bd38      	pop	{r3, r4, r5, pc}

000d71e0 <_ZN6String7reserveEj>:
{
   d71e0:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d71e2:	6803      	ldr	r3, [r0, #0]
{
   d71e4:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d71e6:	b123      	cbz	r3, d71f2 <_ZN6String7reserveEj+0x12>
   d71e8:	6843      	ldr	r3, [r0, #4]
   d71ea:	428b      	cmp	r3, r1
   d71ec:	d301      	bcc.n	d71f2 <_ZN6String7reserveEj+0x12>
   d71ee:	2001      	movs	r0, #1
}
   d71f0:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d71f2:	4620      	mov	r0, r4
   d71f4:	f7ff ffe8 	bl	d71c8 <_ZN6String12changeBufferEj>
   d71f8:	2800      	cmp	r0, #0
   d71fa:	d0f9      	beq.n	d71f0 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d71fc:	68a3      	ldr	r3, [r4, #8]
   d71fe:	2b00      	cmp	r3, #0
   d7200:	d1f5      	bne.n	d71ee <_ZN6String7reserveEj+0xe>
   d7202:	6822      	ldr	r2, [r4, #0]
   d7204:	7013      	strb	r3, [r2, #0]
   d7206:	e7f2      	b.n	d71ee <_ZN6String7reserveEj+0xe>

000d7208 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d7208:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d720a:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d720c:	4611      	mov	r1, r2
   d720e:	9201      	str	r2, [sp, #4]
{
   d7210:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d7212:	f7ff ffe5 	bl	d71e0 <_ZN6String7reserveEj>
   d7216:	9a01      	ldr	r2, [sp, #4]
   d7218:	b928      	cbnz	r0, d7226 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d721a:	4620      	mov	r0, r4
   d721c:	f7ff ffc9 	bl	d71b2 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d7220:	4620      	mov	r0, r4
   d7222:	b003      	add	sp, #12
   d7224:	bd30      	pop	{r4, r5, pc}
	len = length;
   d7226:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d7228:	4629      	mov	r1, r5
   d722a:	6820      	ldr	r0, [r4, #0]
   d722c:	f002 fbac 	bl	d9988 <memcpy>
	buffer[len] = 0;
   d7230:	6822      	ldr	r2, [r4, #0]
   d7232:	68a3      	ldr	r3, [r4, #8]
   d7234:	2100      	movs	r1, #0
   d7236:	54d1      	strb	r1, [r2, r3]
	return *this;
   d7238:	e7f2      	b.n	d7220 <_ZN6String4copyEPKcj+0x18>

000d723a <_ZN6StringC1EPKc>:
	buffer = NULL;
   d723a:	2300      	movs	r3, #0
String::String(const char *cstr)
   d723c:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d723e:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d7242:	4604      	mov	r4, r0
	len = 0;
   d7244:	6083      	str	r3, [r0, #8]
	flags = 0;
   d7246:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d7248:	b141      	cbz	r1, d725c <_ZN6StringC1EPKc+0x22>
   d724a:	4608      	mov	r0, r1
   d724c:	9101      	str	r1, [sp, #4]
   d724e:	f002 fc12 	bl	d9a76 <strlen>
   d7252:	9901      	ldr	r1, [sp, #4]
   d7254:	4602      	mov	r2, r0
   d7256:	4620      	mov	r0, r4
   d7258:	f7ff ffd6 	bl	d7208 <_ZN6String4copyEPKcj>
}
   d725c:	4620      	mov	r0, r4
   d725e:	b002      	add	sp, #8
   d7260:	bd10      	pop	{r4, pc}

000d7262 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d7262:	4288      	cmp	r0, r1
{
   d7264:	b510      	push	{r4, lr}
   d7266:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d7268:	d005      	beq.n	d7276 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d726a:	680b      	ldr	r3, [r1, #0]
   d726c:	b12b      	cbz	r3, d727a <_ZN6StringaSERKS_+0x18>
   d726e:	688a      	ldr	r2, [r1, #8]
   d7270:	4619      	mov	r1, r3
   d7272:	f7ff ffc9 	bl	d7208 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d7276:	4620      	mov	r0, r4
   d7278:	bd10      	pop	{r4, pc}
	else invalidate();
   d727a:	f7ff ff9a 	bl	d71b2 <_ZN6String10invalidateEv>
   d727e:	e7fa      	b.n	d7276 <_ZN6StringaSERKS_+0x14>

000d7280 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   d7280:	b510      	push	{r4, lr}
	buffer = NULL;
   d7282:	2300      	movs	r3, #0
String::String(const String &value)
   d7284:	4604      	mov	r4, r0
	capacity = 0;
   d7286:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d728a:	6083      	str	r3, [r0, #8]
	flags = 0;
   d728c:	7303      	strb	r3, [r0, #12]
	*this = value;
   d728e:	f7ff ffe8 	bl	d7262 <_ZN6StringaSERKS_>
}
   d7292:	4620      	mov	r0, r4
   d7294:	bd10      	pop	{r4, pc}

000d7296 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d7296:	b513      	push	{r0, r1, r4, lr}
   d7298:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d729a:	b159      	cbz	r1, d72b4 <_ZN6StringaSEPKc+0x1e>
   d729c:	4608      	mov	r0, r1
   d729e:	9101      	str	r1, [sp, #4]
   d72a0:	f002 fbe9 	bl	d9a76 <strlen>
   d72a4:	9901      	ldr	r1, [sp, #4]
   d72a6:	4602      	mov	r2, r0
   d72a8:	4620      	mov	r0, r4
   d72aa:	f7ff ffad 	bl	d7208 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d72ae:	4620      	mov	r0, r4
   d72b0:	b002      	add	sp, #8
   d72b2:	bd10      	pop	{r4, pc}
	else invalidate();
   d72b4:	f7ff ff7d 	bl	d71b2 <_ZN6String10invalidateEv>
   d72b8:	e7f9      	b.n	d72ae <_ZN6StringaSEPKc+0x18>

000d72ba <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   d72ba:	b510      	push	{r4, lr}
   d72bc:	4604      	mov	r4, r0
   d72be:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   d72c0:	2300      	movs	r3, #0
	capacity = 0;
   d72c2:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   d72c6:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d72c8:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   d72ca:	4608      	mov	r0, r1
	itoa(value, buf, base);
   d72cc:	a901      	add	r1, sp, #4
   d72ce:	f7ff fc33 	bl	d6b38 <itoa>
	*this = buf;
   d72d2:	a901      	add	r1, sp, #4
   d72d4:	4620      	mov	r0, r4
   d72d6:	f7ff ffde 	bl	d7296 <_ZN6StringaSEPKc>
}
   d72da:	4620      	mov	r0, r4
   d72dc:	b00a      	add	sp, #40	; 0x28
   d72de:	bd10      	pop	{r4, pc}

000d72e0 <_ZN6StringC1Efi>:
String::String(float value, int decimalPlaces)
   d72e0:	b530      	push	{r4, r5, lr}
   d72e2:	4604      	mov	r4, r0
	buffer = NULL;
   d72e4:	2300      	movs	r3, #0
String::String(float value, int decimalPlaces)
   d72e6:	b08b      	sub	sp, #44	; 0x2c
	capacity = 0;
   d72e8:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   d72ec:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d72ee:	7323      	strb	r3, [r4, #12]
String::String(float value, int decimalPlaces)
   d72f0:	ee10 0a10 	vmov	r0, s0
	dtoa(value, decimalPlaces, buf);
   d72f4:	b2cd      	uxtb	r5, r1
   d72f6:	f001 fe39 	bl	d8f6c <__aeabi_f2d>
   d72fa:	ec41 0b10 	vmov	d0, r0, r1
   d72fe:	a901      	add	r1, sp, #4
   d7300:	4628      	mov	r0, r5
   d7302:	f7ff fef1 	bl	d70e8 <_Z4dtoadhPc>
        *this = buf;
   d7306:	a901      	add	r1, sp, #4
   d7308:	4620      	mov	r0, r4
   d730a:	f7ff ffc4 	bl	d7296 <_ZN6StringaSEPKc>
}
   d730e:	4620      	mov	r0, r4
   d7310:	b00b      	add	sp, #44	; 0x2c
   d7312:	bd30      	pop	{r4, r5, pc}

000d7314 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d7314:	b570      	push	{r4, r5, r6, lr}
   d7316:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d7318:	460e      	mov	r6, r1
   d731a:	b909      	cbnz	r1, d7320 <_ZN6String6concatEPKcj+0xc>
   d731c:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d731e:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d7320:	b16a      	cbz	r2, d733e <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   d7322:	6884      	ldr	r4, [r0, #8]
   d7324:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   d7326:	4621      	mov	r1, r4
   d7328:	f7ff ff5a 	bl	d71e0 <_ZN6String7reserveEj>
   d732c:	2800      	cmp	r0, #0
   d732e:	d0f5      	beq.n	d731c <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d7330:	6828      	ldr	r0, [r5, #0]
   d7332:	68ab      	ldr	r3, [r5, #8]
   d7334:	4631      	mov	r1, r6
   d7336:	4418      	add	r0, r3
   d7338:	f002 fb77 	bl	d9a2a <strcpy>
	len = newlen;
   d733c:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   d733e:	2001      	movs	r0, #1
   d7340:	e7ed      	b.n	d731e <_ZN6String6concatEPKcj+0xa>

000d7342 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d7342:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d7344:	688a      	ldr	r2, [r1, #8]
   d7346:	6809      	ldr	r1, [r1, #0]
{
   d7348:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d734a:	f7ff ffe3 	bl	d7314 <_ZN6String6concatEPKcj>
   d734e:	b910      	cbnz	r0, d7356 <_ZplRK15StringSumHelperRK6String+0x14>
   d7350:	4620      	mov	r0, r4
   d7352:	f7ff ff2e 	bl	d71b2 <_ZN6String10invalidateEv>
	return a;
}
   d7356:	4620      	mov	r0, r4
   d7358:	bd10      	pop	{r4, pc}

000d735a <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   d735a:	b513      	push	{r0, r1, r4, lr}
   d735c:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d735e:	b929      	cbnz	r1, d736c <_ZplRK15StringSumHelperPKc+0x12>
   d7360:	4620      	mov	r0, r4
   d7362:	f7ff ff26 	bl	d71b2 <_ZN6String10invalidateEv>
	return a;
}
   d7366:	4620      	mov	r0, r4
   d7368:	b002      	add	sp, #8
   d736a:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d736c:	4608      	mov	r0, r1
   d736e:	9101      	str	r1, [sp, #4]
   d7370:	f002 fb81 	bl	d9a76 <strlen>
   d7374:	9901      	ldr	r1, [sp, #4]
   d7376:	4602      	mov	r2, r0
   d7378:	4620      	mov	r0, r4
   d737a:	f7ff ffcb 	bl	d7314 <_ZN6String6concatEPKcj>
   d737e:	2800      	cmp	r0, #0
   d7380:	d0ee      	beq.n	d7360 <_ZplRK15StringSumHelperPKc+0x6>
   d7382:	e7f0      	b.n	d7366 <_ZplRK15StringSumHelperPKc+0xc>

000d7384 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d7384:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d7386:	6882      	ldr	r2, [r0, #8]
   d7388:	b93a      	cbnz	r2, d739a <_ZNK6String6equalsEPKc+0x16>
   d738a:	b121      	cbz	r1, d7396 <_ZNK6String6equalsEPKc+0x12>
   d738c:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   d738e:	fab0 f080 	clz	r0, r0
   d7392:	0940      	lsrs	r0, r0, #5
   d7394:	e000      	b.n	d7398 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d7396:	2001      	movs	r0, #1
}
   d7398:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d739a:	6800      	ldr	r0, [r0, #0]
   d739c:	b909      	cbnz	r1, d73a2 <_ZNK6String6equalsEPKc+0x1e>
   d739e:	7800      	ldrb	r0, [r0, #0]
   d73a0:	e7f5      	b.n	d738e <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   d73a2:	f002 fb38 	bl	d9a16 <strcmp>
   d73a6:	e7f2      	b.n	d738e <_ZNK6String6equalsEPKc+0xa>

000d73a8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d73a8:	b510      	push	{r4, lr}
          _M_dispose();
   d73aa:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d73ac:	4604      	mov	r4, r0
          _M_dispose();
   d73ae:	689b      	ldr	r3, [r3, #8]
   d73b0:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d73b2:	68a3      	ldr	r3, [r4, #8]
   d73b4:	3b01      	subs	r3, #1
   d73b6:	60a3      	str	r3, [r4, #8]
   d73b8:	b92b      	cbnz	r3, d73c6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d73ba:	6823      	ldr	r3, [r4, #0]
   d73bc:	4620      	mov	r0, r4
   d73be:	68db      	ldr	r3, [r3, #12]
    }
   d73c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d73c4:	4718      	bx	r3
    }
   d73c6:	bd10      	pop	{r4, pc}

000d73c8 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d73c8:	b510      	push	{r4, lr}
   d73ca:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d73cc:	6800      	ldr	r0, [r0, #0]
   d73ce:	b108      	cbz	r0, d73d4 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d73d0:	f7ff f8dc 	bl	d658c <os_mutex_recursive_destroy>
    }
   d73d4:	4620      	mov	r0, r4
   d73d6:	bd10      	pop	{r4, pc}

000d73d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   d73d8:	680b      	ldr	r3, [r1, #0]
   d73da:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   d73dc:	b113      	cbz	r3, d73e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d73de:	685a      	ldr	r2, [r3, #4]
   d73e0:	3201      	adds	r2, #1
   d73e2:	605a      	str	r2, [r3, #4]
      }
   d73e4:	4770      	bx	lr

000d73e6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   d73e6:	b510      	push	{r4, lr}
   d73e8:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   d73ea:	6800      	ldr	r0, [r0, #0]
   d73ec:	b128      	cbz	r0, d73fa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
      if (--_M_use_count == 0)
   d73ee:	6843      	ldr	r3, [r0, #4]
   d73f0:	3b01      	subs	r3, #1
   d73f2:	6043      	str	r3, [r0, #4]
   d73f4:	b90b      	cbnz	r3, d73fa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d73f6:	f7ff ffd7 	bl	d73a8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
      }
   d73fa:	4620      	mov	r0, r4
   d73fc:	bd10      	pop	{r4, pc}
	...

000d7400 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d7400:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d7402:	4c06      	ldr	r4, [pc, #24]	; (d741c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d7404:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d7406:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d7408:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d740a:	f7ff f8b7 	bl	d657c <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d740e:	4620      	mov	r0, r4
   d7410:	4a03      	ldr	r2, [pc, #12]	; (d7420 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d7412:	4904      	ldr	r1, [pc, #16]	; (d7424 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d7414:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d7418:	f001 ba74 	b.w	d8904 <__aeabi_atexit>
   d741c:	2003e65c 	.word	0x2003e65c
   d7420:	2003e468 	.word	0x2003e468
   d7424:	000d73c9 	.word	0x000d73c9

000d7428 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d7428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d742a:	4606      	mov	r6, r0
   d742c:	460d      	mov	r5, r1
  size_t n = 0;
   d742e:	188f      	adds	r7, r1, r2
   d7430:	2400      	movs	r4, #0
  while (size--) {
   d7432:	42bd      	cmp	r5, r7
   d7434:	d00c      	beq.n	d7450 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d7436:	6833      	ldr	r3, [r6, #0]
   d7438:	f815 1b01 	ldrb.w	r1, [r5], #1
   d743c:	689b      	ldr	r3, [r3, #8]
   d743e:	4630      	mov	r0, r6
   d7440:	4798      	blx	r3
     if (chunk>=0)
   d7442:	1e03      	subs	r3, r0, #0
   d7444:	db01      	blt.n	d744a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d7446:	441c      	add	r4, r3
  while (size--) {
   d7448:	e7f3      	b.n	d7432 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d744a:	2c00      	cmp	r4, #0
   d744c:	bf08      	it	eq
   d744e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d7450:	4620      	mov	r0, r4
   d7452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7454 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d7454:	b513      	push	{r0, r1, r4, lr}
   d7456:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d7458:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d745a:	b159      	cbz	r1, d7474 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d745c:	9101      	str	r1, [sp, #4]
   d745e:	f002 fb0a 	bl	d9a76 <strlen>
   d7462:	6823      	ldr	r3, [r4, #0]
   d7464:	9901      	ldr	r1, [sp, #4]
   d7466:	68db      	ldr	r3, [r3, #12]
   d7468:	4602      	mov	r2, r0
   d746a:	4620      	mov	r0, r4
    }
   d746c:	b002      	add	sp, #8
   d746e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d7472:	4718      	bx	r3
    }
   d7474:	b002      	add	sp, #8
   d7476:	bd10      	pop	{r4, pc}

000d7478 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d7478:	b508      	push	{r3, lr}
  return write(str);
   d747a:	f7ff ffeb 	bl	d7454 <_ZN5Print5writeEPKc>
}
   d747e:	bd08      	pop	{r3, pc}

000d7480 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d7480:	6803      	ldr	r3, [r0, #0]
   d7482:	689b      	ldr	r3, [r3, #8]
   d7484:	4718      	bx	r3

000d7486 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d7486:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d7488:	210d      	movs	r1, #13
{
   d748a:	4605      	mov	r5, r0
  size_t n = print('\r');
   d748c:	f7ff fff8 	bl	d7480 <_ZN5Print5printEc>
  n += print('\n');
   d7490:	210a      	movs	r1, #10
  size_t n = print('\r');
   d7492:	4604      	mov	r4, r0
  n += print('\n');
   d7494:	4628      	mov	r0, r5
   d7496:	f7ff fff3 	bl	d7480 <_ZN5Print5printEc>
  return n;
}
   d749a:	4420      	add	r0, r4
   d749c:	bd38      	pop	{r3, r4, r5, pc}

000d749e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d749e:	b538      	push	{r3, r4, r5, lr}
   d74a0:	4605      	mov	r5, r0
  return write(str);
   d74a2:	f7ff ffd7 	bl	d7454 <_ZN5Print5writeEPKc>
   d74a6:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d74a8:	4628      	mov	r0, r5
   d74aa:	f7ff ffec 	bl	d7486 <_ZN5Print7printlnEv>
  return n;
}
   d74ae:	4420      	add	r0, r4
   d74b0:	bd38      	pop	{r3, r4, r5, pc}

000d74b2 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d74b2:	b530      	push	{r4, r5, lr}
   d74b4:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d74b6:	2300      	movs	r3, #0
   d74b8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d74bc:	2a01      	cmp	r2, #1
   d74be:	bf98      	it	ls
   d74c0:	220a      	movls	r2, #10
   d74c2:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d74c4:	460d      	mov	r5, r1
   d74c6:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d74ca:	fb01 5312 	mls	r3, r1, r2, r5
   d74ce:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d74d2:	2b09      	cmp	r3, #9
   d74d4:	bf94      	ite	ls
   d74d6:	3330      	addls	r3, #48	; 0x30
   d74d8:	3337      	addhi	r3, #55	; 0x37
   d74da:	b2db      	uxtb	r3, r3
  } while(n);
   d74dc:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d74de:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d74e2:	d9ef      	bls.n	d74c4 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d74e4:	4621      	mov	r1, r4
   d74e6:	f7ff ffb5 	bl	d7454 <_ZN5Print5writeEPKc>
}
   d74ea:	b00b      	add	sp, #44	; 0x2c
   d74ec:	bd30      	pop	{r4, r5, pc}
	...

000d74f0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d74f0:	4b01      	ldr	r3, [pc, #4]	; (d74f8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d74f2:	4a02      	ldr	r2, [pc, #8]	; (d74fc <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d74f4:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d74f6:	4770      	bx	lr
   d74f8:	2003e660 	.word	0x2003e660
   d74fc:	000dbed8 	.word	0x000dbed8

000d7500 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d7500:	4b02      	ldr	r3, [pc, #8]	; (d750c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d7502:	681a      	ldr	r2, [r3, #0]
   d7504:	4b02      	ldr	r3, [pc, #8]	; (d7510 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d7506:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d7508:	4770      	bx	lr
   d750a:	bf00      	nop
   d750c:	2003e290 	.word	0x2003e290
   d7510:	2003e664 	.word	0x2003e664

000d7514 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d7514:	2100      	movs	r1, #0
   d7516:	f7ff b971 	b.w	d67fc <system_delay_ms>

000d751a <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d751a:	b510      	push	{r4, lr}
   d751c:	4604      	mov	r4, r0
   d751e:	f7fe fd3b 	bl	d5f98 <_ZNSt14_Function_baseD1Ev>
   d7522:	4620      	mov	r0, r4
   d7524:	bd10      	pop	{r4, pc}

000d7526 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   d7526:	b513      	push	{r0, r1, r4, lr}
   d7528:	460b      	mov	r3, r1
   d752a:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d752c:	e9d0 0100 	ldrd	r0, r1, [r0]
   d7530:	466c      	mov	r4, sp
   d7532:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d7536:	e893 0003 	ldmia.w	r3, {r0, r1}
   d753a:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d753e:	e894 0003 	ldmia.w	r4, {r0, r1}
   d7542:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d7546:	b002      	add	sp, #8
   d7548:	bd10      	pop	{r4, pc}
	...

000d754c <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d754c:	4803      	ldr	r0, [pc, #12]	; (d755c <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d754e:	4a04      	ldr	r2, [pc, #16]	; (d7560 <_GLOBAL__sub_I_RGB+0x14>)
   d7550:	4904      	ldr	r1, [pc, #16]	; (d7564 <_GLOBAL__sub_I_RGB+0x18>)
   d7552:	2300      	movs	r3, #0
   d7554:	6083      	str	r3, [r0, #8]
   d7556:	f001 b9d5 	b.w	d8904 <__aeabi_atexit>
   d755a:	bf00      	nop
   d755c:	2003e668 	.word	0x2003e668
   d7560:	2003e468 	.word	0x2003e468
   d7564:	000d751b 	.word	0x000d751b

000d7568 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d7568:	4b01      	ldr	r3, [pc, #4]	; (d7570 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d756a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d756c:	4770      	bx	lr
   d756e:	bf00      	nop
   d7570:	2003e294 	.word	0x2003e294

000d7574 <serialEventRun>:
{
   d7574:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d7576:	4b0b      	ldr	r3, [pc, #44]	; (d75a4 <serialEventRun+0x30>)
   d7578:	b143      	cbz	r3, d758c <serialEventRun+0x18>
   d757a:	f000 fc11 	bl	d7da0 <_Z16_fetch_usbserialv>
   d757e:	6803      	ldr	r3, [r0, #0]
   d7580:	691b      	ldr	r3, [r3, #16]
   d7582:	4798      	blx	r3
   d7584:	2800      	cmp	r0, #0
   d7586:	dd01      	ble.n	d758c <serialEventRun+0x18>
        serialEvent();
   d7588:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d758c:	4b06      	ldr	r3, [pc, #24]	; (d75a8 <serialEventRun+0x34>)
   d758e:	b143      	cbz	r3, d75a2 <serialEventRun+0x2e>
   d7590:	f000 fcb0 	bl	d7ef4 <_Z22__fetch_global_Serial1v>
   d7594:	6803      	ldr	r3, [r0, #0]
   d7596:	691b      	ldr	r3, [r3, #16]
   d7598:	4798      	blx	r3
   d759a:	2800      	cmp	r0, #0
   d759c:	dd01      	ble.n	d75a2 <serialEventRun+0x2e>
        serialEvent1();
   d759e:	f3af 8000 	nop.w
}
   d75a2:	bd08      	pop	{r3, pc}
	...

000d75ac <_post_loop>:
{
   d75ac:	b508      	push	{r3, lr}
	serialEventRun();
   d75ae:	f7ff ffe1 	bl	d7574 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d75b2:	f7fe ffdb 	bl	d656c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d75b6:	4b01      	ldr	r3, [pc, #4]	; (d75bc <_post_loop+0x10>)
   d75b8:	6018      	str	r0, [r3, #0]
}
   d75ba:	bd08      	pop	{r3, pc}
   d75bc:	2003e7d4 	.word	0x2003e7d4

000d75c0 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d75c0:	4802      	ldr	r0, [pc, #8]	; (d75cc <_Z33system_initialize_user_backup_ramv+0xc>)
   d75c2:	4a03      	ldr	r2, [pc, #12]	; (d75d0 <_Z33system_initialize_user_backup_ramv+0x10>)
   d75c4:	4903      	ldr	r1, [pc, #12]	; (d75d4 <_Z33system_initialize_user_backup_ramv+0x14>)
   d75c6:	1a12      	subs	r2, r2, r0
   d75c8:	f002 b9de 	b.w	d9988 <memcpy>
   d75cc:	2003f400 	.word	0x2003f400
   d75d0:	2003f404 	.word	0x2003f404
   d75d4:	000dc448 	.word	0x000dc448

000d75d8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d75d8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d75da:	2300      	movs	r3, #0
   d75dc:	9300      	str	r3, [sp, #0]
   d75de:	461a      	mov	r2, r3
   d75e0:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d75e4:	f7ff f92c 	bl	d6840 <system_ctrl_set_result>
}
   d75e8:	b003      	add	sp, #12
   d75ea:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d75f0 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d75f0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d75f2:	8843      	ldrh	r3, [r0, #2]
   d75f4:	2b0a      	cmp	r3, #10
   d75f6:	d008      	beq.n	d760a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d75f8:	2b50      	cmp	r3, #80	; 0x50
   d75fa:	d10b      	bne.n	d7614 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d75fc:	4b09      	ldr	r3, [pc, #36]	; (d7624 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d75fe:	681b      	ldr	r3, [r3, #0]
   d7600:	b14b      	cbz	r3, d7616 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d7602:	b003      	add	sp, #12
   d7604:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d7608:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d760a:	f7ff ffe5 	bl	d75d8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d760e:	b003      	add	sp, #12
   d7610:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7614:	2300      	movs	r3, #0
   d7616:	9300      	str	r3, [sp, #0]
   d7618:	461a      	mov	r2, r3
   d761a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d761e:	f7ff f90f 	bl	d6840 <system_ctrl_set_result>
}
   d7622:	e7f4      	b.n	d760e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d7624:	2003e67c 	.word	0x2003e67c

000d7628 <module_user_init_hook>:
{
   d7628:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d762a:	4c12      	ldr	r4, [pc, #72]	; (d7674 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d762c:	4812      	ldr	r0, [pc, #72]	; (d7678 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d762e:	4d13      	ldr	r5, [pc, #76]	; (d767c <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d7630:	2100      	movs	r1, #0
   d7632:	f7ff f9c7 	bl	d69c4 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d7636:	6823      	ldr	r3, [r4, #0]
   d7638:	42ab      	cmp	r3, r5
   d763a:	4b11      	ldr	r3, [pc, #68]	; (d7680 <module_user_init_hook+0x58>)
   d763c:	bf0c      	ite	eq
   d763e:	2201      	moveq	r2, #1
   d7640:	2200      	movne	r2, #0
   d7642:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d7644:	d002      	beq.n	d764c <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d7646:	f7ff ffbb 	bl	d75c0 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d764a:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d764c:	f7fe ff86 	bl	d655c <HAL_RNG_GetRandomNumber>
   d7650:	4604      	mov	r4, r0
    srand(seed);
   d7652:	f002 f9af 	bl	d99b4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d7656:	4b0b      	ldr	r3, [pc, #44]	; (d7684 <module_user_init_hook+0x5c>)
   d7658:	b113      	cbz	r3, d7660 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d765a:	4620      	mov	r0, r4
   d765c:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d7660:	2100      	movs	r1, #0
   d7662:	4808      	ldr	r0, [pc, #32]	; (d7684 <module_user_init_hook+0x5c>)
   d7664:	f7ff f96e 	bl	d6944 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d7668:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d766c:	4806      	ldr	r0, [pc, #24]	; (d7688 <module_user_init_hook+0x60>)
   d766e:	2100      	movs	r1, #0
   d7670:	f7ff b8dc 	b.w	d682c <system_ctrl_set_app_request_handler>
   d7674:	2003f400 	.word	0x2003f400
   d7678:	000d7569 	.word	0x000d7569
   d767c:	9a271c1e 	.word	0x9a271c1e
   d7680:	2003e678 	.word	0x2003e678
   d7684:	00000000 	.word	0x00000000
   d7688:	000d75f1 	.word	0x000d75f1

000d768c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d768c:	4770      	bx	lr

000d768e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d768e:	2000      	movs	r0, #0
   d7690:	4770      	bx	lr

000d7692 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d7692:	b510      	push	{r4, lr}
   d7694:	2110      	movs	r1, #16
   d7696:	4604      	mov	r4, r0
   d7698:	f001 f939 	bl	d890e <_ZdlPvj>
   d769c:	4620      	mov	r0, r4
   d769e:	bd10      	pop	{r4, pc}

000d76a0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d76a0:	b508      	push	{r3, lr}
      { delete this; }
   d76a2:	f7ff fff6 	bl	d7692 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d76a6:	bd08      	pop	{r3, pc}

000d76a8 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d76a8:	b530      	push	{r4, r5, lr}
        type_(type) {
   d76aa:	2200      	movs	r2, #0
   d76ac:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d76b0:	6002      	str	r2, [r0, #0]
   d76b2:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   d76b4:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d76b6:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d76b8:	680c      	ldr	r4, [r1, #0]
   d76ba:	8085      	strh	r5, [r0, #4]
   d76bc:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d76be:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d76c0:	bd30      	pop	{r4, r5, pc}

000d76c2 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d76c2:	b510      	push	{r4, lr}
   d76c4:	4604      	mov	r4, r0
    free((void*)msg_);
   d76c6:	6800      	ldr	r0, [r0, #0]
   d76c8:	f7ff f94c 	bl	d6964 <free>
}
   d76cc:	4620      	mov	r0, r4
   d76ce:	bd10      	pop	{r4, pc}

000d76d0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d76d0:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d76d2:	68c4      	ldr	r4, [r0, #12]
   d76d4:	b1f4      	cbz	r4, d7714 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
   d76d6:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d76d8:	2b02      	cmp	r3, #2
   d76da:	d103      	bne.n	d76e4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d76dc:	f104 000c 	add.w	r0, r4, #12
   d76e0:	f7ff ffef 	bl	d76c2 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d76e4:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d76e6:	b135      	cbz	r5, d76f6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d76e8:	4628      	mov	r0, r5
   d76ea:	f7fe fc55 	bl	d5f98 <_ZNSt14_Function_baseD1Ev>
   d76ee:	2110      	movs	r1, #16
   d76f0:	4628      	mov	r0, r5
   d76f2:	f001 f90c 	bl	d890e <_ZdlPvj>
   d76f6:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d76f8:	b135      	cbz	r5, d7708 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d76fa:	4628      	mov	r0, r5
   d76fc:	f7fe fc4c 	bl	d5f98 <_ZNSt14_Function_baseD1Ev>
   d7700:	2110      	movs	r1, #16
   d7702:	4628      	mov	r0, r5
   d7704:	f001 f903 	bl	d890e <_ZdlPvj>
   d7708:	4620      	mov	r0, r4
   d770a:	2114      	movs	r1, #20
   d770c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d7710:	f001 b8fd 	b.w	d890e <_ZdlPvj>
   d7714:	bd38      	pop	{r3, r4, r5, pc}

000d7716 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d7716:	b573      	push	{r0, r1, r4, r5, r6, lr}
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
		     element_type* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d7718:	460e      	mov	r6, r1
   d771a:	4604      	mov	r4, r0
   d771c:	f856 3b04 	ldr.w	r3, [r6], #4
   d7720:	9300      	str	r3, [sp, #0]
   d7722:	460d      	mov	r5, r1
   d7724:	a801      	add	r0, sp, #4
   d7726:	4631      	mov	r1, r6
   d7728:	f7ff fe56 	bl	d73d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d772c:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d772e:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d7730:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d7732:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d7734:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d7736:	2300      	movs	r3, #0
   d7738:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d773a:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d773c:	f7ff fe53 	bl	d73e6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7740:	4630      	mov	r0, r6
   d7742:	f7ff fe50 	bl	d73e6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d7746:	4628      	mov	r0, r5
   d7748:	2108      	movs	r1, #8
   d774a:	f001 f8e0 	bl	d890e <_ZdlPvj>
        return p;
    }
   d774e:	4620      	mov	r0, r4
   d7750:	b002      	add	sp, #8
   d7752:	bd70      	pop	{r4, r5, r6, pc}

000d7754 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   d7754:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d7756:	b510      	push	{r4, lr}
      if (_M_empty())
   d7758:	b90a      	cbnz	r2, d775e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d775a:	f001 f98e 	bl	d8a7a <_ZSt25__throw_bad_function_callv>
    }
   d775e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7762:	68c3      	ldr	r3, [r0, #12]
   d7764:	4718      	bx	r3

000d7766 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d7766:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d7768:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d776a:	f100 0110 	add.w	r1, r0, #16
   d776e:	f7ff fff1 	bl	d7754 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d7772:	bd08      	pop	{r3, pc}

000d7774 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d7774:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d7776:	b510      	push	{r4, lr}
      if (_M_empty())
   d7778:	b90a      	cbnz	r2, d777e <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d777a:	f001 f97e 	bl	d8a7a <_ZSt25__throw_bad_function_callv>
    }
   d777e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7782:	68c3      	ldr	r3, [r0, #12]
   d7784:	4718      	bx	r3

000d7786 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d7786:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d7788:	6800      	ldr	r0, [r0, #0]
   d778a:	f100 0110 	add.w	r1, r0, #16
   d778e:	f7ff fff1 	bl	d7774 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d7792:	bd08      	pop	{r3, pc}

000d7794 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d7794:	b538      	push	{r3, r4, r5, lr}
   d7796:	2300      	movs	r3, #0
   d7798:	4604      	mov	r4, r0
   d779a:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d779c:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d779e:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d77a0:	f7fc fc79 	bl	d4096 <_Znwj>
   d77a4:	b128      	cbz	r0, d77b2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d77a6:	2301      	movs	r3, #1
   d77a8:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d77ac:	4b02      	ldr	r3, [pc, #8]	; (d77b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d77ae:	6003      	str	r3, [r0, #0]
   d77b0:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d77b2:	6020      	str	r0, [r4, #0]
	}
   d77b4:	4620      	mov	r0, r4
   d77b6:	bd38      	pop	{r3, r4, r5, pc}
   d77b8:	000dbf00 	.word	0x000dbf00

000d77bc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d77bc:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d77be:	2300      	movs	r3, #0
   d77c0:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d77c2:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d77c4:	4604      	mov	r4, r0
   d77c6:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d77c8:	b12b      	cbz	r3, d77d6 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d77ca:	2202      	movs	r2, #2
   d77cc:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d77ce:	68eb      	ldr	r3, [r5, #12]
   d77d0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d77d2:	68ab      	ldr	r3, [r5, #8]
   d77d4:	60a3      	str	r3, [r4, #8]
    }
   d77d6:	4620      	mov	r0, r4
   d77d8:	bd38      	pop	{r3, r4, r5, pc}
	...

000d77dc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d77dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   d77de:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d77e0:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d77e2:	4668      	mov	r0, sp
   d77e4:	f7ff ff60 	bl	d76a8 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d77e8:	f04f 0302 	mov.w	r3, #2
   d77ec:	e8d4 2f4f 	ldrexb	r2, [r4]
   d77f0:	2a00      	cmp	r2, #0
   d77f2:	d103      	bne.n	d77fc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d77f4:	e8c4 3f41 	strexb	r1, r3, [r4]
   d77f8:	2900      	cmp	r1, #0
   d77fa:	d1f7      	bne.n	d77ec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d77fc:	d125      	bne.n	d784a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d77fe:	f104 050c 	add.w	r5, r4, #12
   d7802:	4669      	mov	r1, sp
   d7804:	4628      	mov	r0, r5
   d7806:	f7ff ff4f 	bl	d76a8 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d780a:	f3bf 8f5b 	dmb	ish
   d780e:	2301      	movs	r3, #1
   d7810:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d7812:	2000      	movs	r0, #0
   d7814:	f104 0308 	add.w	r3, r4, #8
   d7818:	f3bf 8f5b 	dmb	ish
   d781c:	e853 6f00 	ldrex	r6, [r3]
   d7820:	e843 0200 	strex	r2, r0, [r3]
   d7824:	2a00      	cmp	r2, #0
   d7826:	d1f9      	bne.n	d781c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d7828:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d782c:	b16e      	cbz	r6, d784a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d782e:	f7fe ffed 	bl	d680c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d7832:	b178      	cbz	r0, d7854 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d7834:	4629      	mov	r1, r5
   d7836:	4630      	mov	r0, r6
   d7838:	f7ff ff8c 	bl	d7754 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d783c:	4630      	mov	r0, r6
   d783e:	f7fe fbab 	bl	d5f98 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d7842:	2110      	movs	r1, #16
   d7844:	4630      	mov	r0, r6
   d7846:	f001 f862 	bl	d890e <_ZdlPvj>
        p_->setError(std::move(error));
   d784a:	4668      	mov	r0, sp
   d784c:	f7ff ff39 	bl	d76c2 <_ZN8particle5ErrorD1Ev>
    }
   d7850:	b009      	add	sp, #36	; 0x24
   d7852:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d7854:	4631      	mov	r1, r6
   d7856:	a802      	add	r0, sp, #8
   d7858:	f7ff ffb0 	bl	d77bc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d785c:	68e0      	ldr	r0, [r4, #12]
   d785e:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d7862:	b108      	cbz	r0, d7868 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d7864:	f002 f8ea 	bl	d9a3c <strdup>
        type_(type) {
   d7868:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d786a:	2010      	movs	r0, #16
   d786c:	f8ad 501c 	strh.w	r5, [sp, #28]
   d7870:	f7fc fc11 	bl	d4096 <_Znwj>
   d7874:	4605      	mov	r5, r0
   d7876:	b1e8      	cbz	r0, d78b4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d7878:	2700      	movs	r7, #0
   d787a:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d787c:	2018      	movs	r0, #24
   d787e:	f7fc fc0a 	bl	d4096 <_Znwj>
   d7882:	4604      	mov	r4, r0
   d7884:	b188      	cbz	r0, d78aa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d7886:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d7888:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d788a:	a802      	add	r0, sp, #8
   d788c:	f7ff fe4b 	bl	d7526 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7890:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d7892:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d7894:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7896:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d7898:	9204      	str	r2, [sp, #16]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d789a:	a906      	add	r1, sp, #24
   d789c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d789e:	60e3      	str	r3, [r4, #12]
   d78a0:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d78a4:	9205      	str	r2, [sp, #20]
   d78a6:	f7ff feff 	bl	d76a8 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d78aa:	4b08      	ldr	r3, [pc, #32]	; (d78cc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d78ac:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d78ae:	4b08      	ldr	r3, [pc, #32]	; (d78d0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d78b0:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d78b2:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d78b4:	a806      	add	r0, sp, #24
   d78b6:	f7ff ff04 	bl	d76c2 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d78ba:	a802      	add	r0, sp, #8
   d78bc:	f7fe fb6c 	bl	d5f98 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d78c0:	2200      	movs	r2, #0
   d78c2:	4629      	mov	r1, r5
   d78c4:	4803      	ldr	r0, [pc, #12]	; (d78d4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d78c6:	f7fe ffa9 	bl	d681c <application_thread_invoke>
   d78ca:	e7b7      	b.n	d783c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d78cc:	000d7767 	.word	0x000d7767
   d78d0:	000d79fd 	.word	0x000d79fd
   d78d4:	000d7f49 	.word	0x000d7f49

000d78d8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d78d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d78dc:	b08a      	sub	sp, #40	; 0x28
   d78de:	4605      	mov	r5, r0
   d78e0:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d78e4:	460c      	mov	r4, r1
   d78e6:	4617      	mov	r7, r2
   d78e8:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d78ea:	f7ff f80b 	bl	d6904 <spark_cloud_flag_connected>
   d78ee:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d78f0:	4682      	mov	sl, r0
   d78f2:	bb38      	cbnz	r0, d7944 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d78f4:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d78f8:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d78fa:	a905      	add	r1, sp, #20
   d78fc:	4630      	mov	r0, r6
   d78fe:	f8ad 3018 	strh.w	r3, [sp, #24]
   d7902:	f7ff fed1 	bl	d76a8 <_ZN8particle5ErrorC1EOS0_>
   d7906:	2014      	movs	r0, #20
   d7908:	f7fc fbc5 	bl	d4096 <_Znwj>
   d790c:	4604      	mov	r4, r0
   d790e:	b148      	cbz	r0, d7924 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d7910:	2302      	movs	r3, #2
   d7912:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d7914:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d7916:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d791a:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d791c:	4631      	mov	r1, r6
   d791e:	300c      	adds	r0, #12
   d7920:	f7ff fec2 	bl	d76a8 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d7924:	4628      	mov	r0, r5
	: __shared_count(__p)
   d7926:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d7928:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d792c:	f7ff ff32 	bl	d7794 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d7930:	4630      	mov	r0, r6
   d7932:	f7ff fec6 	bl	d76c2 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d7936:	a805      	add	r0, sp, #20
   d7938:	f7ff fec3 	bl	d76c2 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   d793c:	4628      	mov	r0, r5
   d793e:	b00a      	add	sp, #40	; 0x28
   d7940:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d7944:	230c      	movs	r3, #12
   d7946:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d794a:	2014      	movs	r0, #20
   d794c:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d7950:	9307      	str	r3, [sp, #28]
   d7952:	f7fc fba0 	bl	d4096 <_Znwj>
   d7956:	4601      	mov	r1, r0
   d7958:	b128      	cbz	r0, d7966 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d795a:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d795e:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d7962:	f880 a001 	strb.w	sl, [r0, #1]
   d7966:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d7968:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d796a:	f7ff ff13 	bl	d7794 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d796e:	4b22      	ldr	r3, [pc, #136]	; (d79f8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d7970:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d7972:	2008      	movs	r0, #8
   d7974:	f7fc fb8f 	bl	d4096 <_Znwj>
   d7978:	4682      	mov	sl, r0
   d797a:	b128      	cbz	r0, d7988 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d797c:	9b03      	ldr	r3, [sp, #12]
   d797e:	f840 3b04 	str.w	r3, [r0], #4
   d7982:	a904      	add	r1, sp, #16
   d7984:	f7ff fd28 	bl	d73d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d7988:	9600      	str	r6, [sp, #0]
   d798a:	fa5f f389 	uxtb.w	r3, r9
   d798e:	4642      	mov	r2, r8
   d7990:	4639      	mov	r1, r7
   d7992:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d7994:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d7998:	f7fe ffc4 	bl	d6924 <spark_send_event>
   d799c:	b9b8      	cbnz	r0, d79ce <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d799e:	9b03      	ldr	r3, [sp, #12]
   d79a0:	785b      	ldrb	r3, [r3, #1]
   d79a2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d79a6:	b993      	cbnz	r3, d79ce <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d79a8:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d79ac:	a905      	add	r1, sp, #20
   d79ae:	a803      	add	r0, sp, #12
   d79b0:	9205      	str	r2, [sp, #20]
   d79b2:	f8ad 3018 	strh.w	r3, [sp, #24]
   d79b6:	f7ff ff11 	bl	d77dc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d79ba:	a805      	add	r0, sp, #20
   d79bc:	f7ff fe81 	bl	d76c2 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d79c0:	a805      	add	r0, sp, #20
   d79c2:	9909      	ldr	r1, [sp, #36]	; 0x24
   d79c4:	f7ff fea7 	bl	d7716 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d79c8:	a806      	add	r0, sp, #24
   d79ca:	f7ff fd0c 	bl	d73e6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d79ce:	9b03      	ldr	r3, [sp, #12]
   d79d0:	9305      	str	r3, [sp, #20]
   d79d2:	a904      	add	r1, sp, #16
   d79d4:	a806      	add	r0, sp, #24
   d79d6:	f7ff fcff 	bl	d73d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d79da:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d79dc:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d79de:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d79e0:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d79e2:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d79e4:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d79e6:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d79e8:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d79ea:	f7ff fcfc 	bl	d73e6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d79ee:	a804      	add	r0, sp, #16
   d79f0:	f7ff fcf9 	bl	d73e6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d79f4:	e7a2      	b.n	d793c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d79f6:	bf00      	nop
   d79f8:	000d7ac1 	.word	0x000d7ac1

000d79fc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d79fc:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d79fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7a00:	4605      	mov	r5, r0
	  switch (__op)
   d7a02:	d007      	beq.n	d7a14 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d7a04:	2a03      	cmp	r2, #3
   d7a06:	d018      	beq.n	d7a3a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d7a08:	2a01      	cmp	r2, #1
   d7a0a:	d101      	bne.n	d7a10 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d7a0c:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d7a0e:	6003      	str	r3, [r0, #0]
	}
   d7a10:	2000      	movs	r0, #0
   d7a12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d7a14:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d7a16:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d7a18:	f7fc fb3d 	bl	d4096 <_Znwj>
   d7a1c:	4604      	mov	r4, r0
   d7a1e:	b150      	cbz	r0, d7a36 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d7a20:	4631      	mov	r1, r6
   d7a22:	f7ff fecb 	bl	d77bc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d7a26:	6930      	ldr	r0, [r6, #16]
   d7a28:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d7a2c:	b108      	cbz	r0, d7a32 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d7a2e:	f002 f805 	bl	d9a3c <strdup>
        type_(type) {
   d7a32:	6120      	str	r0, [r4, #16]
   d7a34:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d7a36:	602c      	str	r4, [r5, #0]
	}
   d7a38:	e7ea      	b.n	d7a10 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d7a3a:	6804      	ldr	r4, [r0, #0]
   d7a3c:	2c00      	cmp	r4, #0
   d7a3e:	d0e7      	beq.n	d7a10 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d7a40:	f104 0010 	add.w	r0, r4, #16
   d7a44:	f7ff fe3d 	bl	d76c2 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d7a48:	4620      	mov	r0, r4
   d7a4a:	f7fe faa5 	bl	d5f98 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d7a4e:	2118      	movs	r1, #24
   d7a50:	4620      	mov	r0, r4
   d7a52:	f000 ff5c 	bl	d890e <_ZdlPvj>
   d7a56:	e7db      	b.n	d7a10 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d7a58 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d7a58:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d7a5a:	2300      	movs	r3, #0
   d7a5c:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d7a5e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d7a60:	4604      	mov	r4, r0
   d7a62:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d7a64:	b12b      	cbz	r3, d7a72 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d7a66:	2202      	movs	r2, #2
   d7a68:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d7a6a:	68eb      	ldr	r3, [r5, #12]
   d7a6c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d7a6e:	68ab      	ldr	r3, [r5, #8]
   d7a70:	60a3      	str	r3, [r4, #8]
    }
   d7a72:	4620      	mov	r0, r4
   d7a74:	bd38      	pop	{r3, r4, r5, pc}

000d7a76 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d7a76:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d7a78:	b570      	push	{r4, r5, r6, lr}
   d7a7a:	4604      	mov	r4, r0
	  switch (__op)
   d7a7c:	d007      	beq.n	d7a8e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d7a7e:	2a03      	cmp	r2, #3
   d7a80:	d012      	beq.n	d7aa8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d7a82:	2a01      	cmp	r2, #1
   d7a84:	d101      	bne.n	d7a8a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d7a86:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d7a88:	6003      	str	r3, [r0, #0]
	}
   d7a8a:	2000      	movs	r0, #0
   d7a8c:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d7a8e:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d7a90:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d7a92:	f7fc fb00 	bl	d4096 <_Znwj>
   d7a96:	4605      	mov	r5, r0
   d7a98:	b120      	cbz	r0, d7aa4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d7a9a:	4631      	mov	r1, r6
   d7a9c:	f7ff ffdc 	bl	d7a58 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d7aa0:	7c33      	ldrb	r3, [r6, #16]
   d7aa2:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d7aa4:	6025      	str	r5, [r4, #0]
	}
   d7aa6:	e7f0      	b.n	d7a8a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d7aa8:	6804      	ldr	r4, [r0, #0]
   d7aaa:	2c00      	cmp	r4, #0
   d7aac:	d0ed      	beq.n	d7a8a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d7aae:	4620      	mov	r0, r4
   d7ab0:	f7fe fa72 	bl	d5f98 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d7ab4:	2114      	movs	r1, #20
   d7ab6:	4620      	mov	r0, r4
   d7ab8:	f000 ff29 	bl	d890e <_ZdlPvj>
   d7abc:	e7e5      	b.n	d7a8a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d7ac0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d7ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7ac2:	b089      	sub	sp, #36	; 0x24
   d7ac4:	4604      	mov	r4, r0
   d7ac6:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d7ac8:	a801      	add	r0, sp, #4
   d7aca:	4611      	mov	r1, r2
   d7acc:	f7ff fe23 	bl	d7716 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d7ad0:	b1a4      	cbz	r4, d7afc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d7ad2:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d7ad4:	b11d      	cbz	r5, d7ade <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d7ad6:	4628      	mov	r0, r5
   d7ad8:	f001 ffb0 	bl	d9a3c <strdup>
   d7adc:	4605      	mov	r5, r0
   d7ade:	a801      	add	r0, sp, #4
   d7ae0:	a903      	add	r1, sp, #12
        type_(type) {
   d7ae2:	9503      	str	r5, [sp, #12]
   d7ae4:	f8ad 4010 	strh.w	r4, [sp, #16]
   d7ae8:	f7ff fe78 	bl	d77dc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d7aec:	a803      	add	r0, sp, #12
   d7aee:	f7ff fde8 	bl	d76c2 <_ZN8particle5ErrorD1Ev>
   d7af2:	a802      	add	r0, sp, #8
   d7af4:	f7ff fc77 	bl	d73e6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d7af8:	b009      	add	sp, #36	; 0x24
   d7afa:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d7afc:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d7afe:	2301      	movs	r3, #1
   d7b00:	e8d5 2f4f 	ldrexb	r2, [r5]
   d7b04:	2a00      	cmp	r2, #0
   d7b06:	d103      	bne.n	d7b10 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d7b08:	e8c5 3f41 	strexb	r1, r3, [r5]
   d7b0c:	2900      	cmp	r1, #0
   d7b0e:	d1f7      	bne.n	d7b00 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d7b10:	d1ef      	bne.n	d7af2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d7b12:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d7b14:	f3bf 8f5b 	dmb	ish
   d7b18:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d7b1a:	1d2b      	adds	r3, r5, #4
   d7b1c:	f3bf 8f5b 	dmb	ish
   d7b20:	e853 6f00 	ldrex	r6, [r3]
   d7b24:	e843 4200 	strex	r2, r4, [r3]
   d7b28:	2a00      	cmp	r2, #0
   d7b2a:	d1f9      	bne.n	d7b20 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d7b2c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d7b30:	2e00      	cmp	r6, #0
   d7b32:	d0de      	beq.n	d7af2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d7b34:	4620      	mov	r0, r4
   d7b36:	f7fe fe69 	bl	d680c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d7b3a:	4607      	mov	r7, r0
   d7b3c:	b160      	cbz	r0, d7b58 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d7b3e:	f105 010c 	add.w	r1, r5, #12
   d7b42:	4630      	mov	r0, r6
   d7b44:	f7ff fe16 	bl	d7774 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d7b48:	4630      	mov	r0, r6
   d7b4a:	f7fe fa25 	bl	d5f98 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d7b4e:	2110      	movs	r1, #16
   d7b50:	4630      	mov	r0, r6
   d7b52:	f000 fedc 	bl	d890e <_ZdlPvj>
   d7b56:	e7cc      	b.n	d7af2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d7b58:	4631      	mov	r1, r6
   d7b5a:	a803      	add	r0, sp, #12
   d7b5c:	f7ff ff7c 	bl	d7a58 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d7b60:	7b2b      	ldrb	r3, [r5, #12]
   d7b62:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d7b66:	2010      	movs	r0, #16
   d7b68:	f7fc fa95 	bl	d4096 <_Znwj>
   d7b6c:	4605      	mov	r5, r0
   d7b6e:	b1d0      	cbz	r0, d7ba6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d7b70:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d7b72:	2014      	movs	r0, #20
   d7b74:	f7fc fa8f 	bl	d4096 <_Znwj>
   d7b78:	4604      	mov	r4, r0
   d7b7a:	b178      	cbz	r0, d7b9c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d7b7c:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d7b7e:	4601      	mov	r1, r0
   d7b80:	a803      	add	r0, sp, #12
   d7b82:	f7ff fcd0 	bl	d7526 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7b86:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d7b88:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d7b8a:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7b8c:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d7b8e:	9205      	str	r2, [sp, #20]
   d7b90:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d7b92:	60e3      	str	r3, [r4, #12]
   d7b94:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d7b98:	9206      	str	r2, [sp, #24]
   d7b9a:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d7b9c:	4b06      	ldr	r3, [pc, #24]	; (d7bb8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d7b9e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d7ba0:	4b06      	ldr	r3, [pc, #24]	; (d7bbc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d7ba2:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d7ba4:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d7ba6:	a803      	add	r0, sp, #12
   d7ba8:	f7fe f9f6 	bl	d5f98 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d7bac:	2200      	movs	r2, #0
   d7bae:	4629      	mov	r1, r5
   d7bb0:	4803      	ldr	r0, [pc, #12]	; (d7bc0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d7bb2:	f7fe fe33 	bl	d681c <application_thread_invoke>
   d7bb6:	e7c7      	b.n	d7b48 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d7bb8:	000d7787 	.word	0x000d7787
   d7bbc:	000d7a77 	.word	0x000d7a77
   d7bc0:	000d7f49 	.word	0x000d7f49

000d7bc4 <_ZN9IPAddressD1Ev>:
    virtual ~IPAddress() {}
   d7bc4:	4770      	bx	lr

000d7bc6 <_ZN9IPAddressD0Ev>:
   d7bc6:	b510      	push	{r4, lr}
   d7bc8:	2118      	movs	r1, #24
   d7bca:	4604      	mov	r4, r0
   d7bcc:	f000 fe9f 	bl	d890e <_ZdlPvj>
   d7bd0:	4620      	mov	r0, r4
   d7bd2:	bd10      	pop	{r4, pc}

000d7bd4 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d7bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d7bd6:	7d03      	ldrb	r3, [r0, #20]
   d7bd8:	2b06      	cmp	r3, #6
{
   d7bda:	b08d      	sub	sp, #52	; 0x34
   d7bdc:	460e      	mov	r6, r1
   d7bde:	f100 0704 	add.w	r7, r0, #4
   d7be2:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d7be6:	d012      	beq.n	d7c0e <_ZNK9IPAddress7printToER5Print+0x3a>
   d7be8:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d7bec:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d7bf0:	220a      	movs	r2, #10
   d7bf2:	4630      	mov	r0, r6
   d7bf4:	f7ff fc5d 	bl	d74b2 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d7bf8:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d7bfa:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d7bfc:	d019      	beq.n	d7c32 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d7bfe:	2c00      	cmp	r4, #0
   d7c00:	d0f4      	beq.n	d7bec <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d7c02:	212e      	movs	r1, #46	; 0x2e
   d7c04:	4630      	mov	r0, r6
   d7c06:	f7ff fc3b 	bl	d7480 <_ZN5Print5printEc>
   d7c0a:	4404      	add	r4, r0
   d7c0c:	e7ee      	b.n	d7bec <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d7c0e:	232f      	movs	r3, #47	; 0x2f
   d7c10:	466a      	mov	r2, sp
   d7c12:	4639      	mov	r1, r7
   d7c14:	200a      	movs	r0, #10
		buf[0] = 0;
   d7c16:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d7c1a:	f7fe fcbf 	bl	d659c <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d7c1e:	4668      	mov	r0, sp
   d7c20:	f001 ff29 	bl	d9a76 <strlen>
   d7c24:	6833      	ldr	r3, [r6, #0]
   d7c26:	4602      	mov	r2, r0
   d7c28:	68db      	ldr	r3, [r3, #12]
   d7c2a:	4669      	mov	r1, sp
   d7c2c:	4630      	mov	r0, r6
   d7c2e:	4798      	blx	r3
   d7c30:	4604      	mov	r4, r0
    }
    return n;
}
   d7c32:	4620      	mov	r0, r4
   d7c34:	b00d      	add	sp, #52	; 0x34
   d7c36:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d7c38 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d7c38:	b510      	push	{r4, lr}
   d7c3a:	4b05      	ldr	r3, [pc, #20]	; (d7c50 <_ZN9IPAddressC1Ev+0x18>)
   d7c3c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d7c3e:	2211      	movs	r2, #17
   d7c40:	f840 3b04 	str.w	r3, [r0], #4
   d7c44:	2100      	movs	r1, #0
   d7c46:	f001 fead 	bl	d99a4 <memset>
}
   d7c4a:	4620      	mov	r0, r4
   d7c4c:	bd10      	pop	{r4, pc}
   d7c4e:	bf00      	nop
   d7c50:	000dbf1c 	.word	0x000dbf1c

000d7c54 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d7c54:	4603      	mov	r3, r0
   d7c56:	4a07      	ldr	r2, [pc, #28]	; (d7c74 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d7c58:	b510      	push	{r4, lr}
   d7c5a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d7c5e:	f101 0210 	add.w	r2, r1, #16
   d7c62:	f851 4b04 	ldr.w	r4, [r1], #4
   d7c66:	f843 4b04 	str.w	r4, [r3], #4
   d7c6a:	4291      	cmp	r1, r2
   d7c6c:	d1f9      	bne.n	d7c62 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d7c6e:	780a      	ldrb	r2, [r1, #0]
   d7c70:	701a      	strb	r2, [r3, #0]
}
   d7c72:	bd10      	pop	{r4, pc}
   d7c74:	000dbf1c 	.word	0x000dbf1c

000d7c78 <_ZNK9IPAddresscvbEv>:
    if (version() == 4) {
   d7c78:	7d03      	ldrb	r3, [r0, #20]
   d7c7a:	2b04      	cmp	r3, #4
   d7c7c:	d104      	bne.n	d7c88 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   d7c7e:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d7c80:	3800      	subs	r0, #0
   d7c82:	bf18      	it	ne
   d7c84:	2001      	movne	r0, #1
   d7c86:	4770      	bx	lr
    } else if (version() == 6) {
   d7c88:	2b06      	cmp	r3, #6
   d7c8a:	d107      	bne.n	d7c9c <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d7c8c:	6843      	ldr	r3, [r0, #4]
   d7c8e:	b93b      	cbnz	r3, d7ca0 <_ZNK9IPAddresscvbEv+0x28>
   d7c90:	6883      	ldr	r3, [r0, #8]
   d7c92:	b92b      	cbnz	r3, d7ca0 <_ZNK9IPAddresscvbEv+0x28>
   d7c94:	68c3      	ldr	r3, [r0, #12]
   d7c96:	b91b      	cbnz	r3, d7ca0 <_ZNK9IPAddresscvbEv+0x28>
   d7c98:	6900      	ldr	r0, [r0, #16]
   d7c9a:	e7f1      	b.n	d7c80 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   d7c9c:	2000      	movs	r0, #0
   d7c9e:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d7ca0:	2001      	movs	r0, #1
}
   d7ca2:	4770      	bx	lr

000d7ca4 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d7ca4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d7ca6:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d7caa:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d7cae:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d7cb2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d7cb6:	2304      	movs	r3, #4
   d7cb8:	6041      	str	r1, [r0, #4]
   d7cba:	7503      	strb	r3, [r0, #20]
}
   d7cbc:	bd10      	pop	{r4, pc}
	...

000d7cc0 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
   d7cc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d7cc2:	4d04      	ldr	r5, [pc, #16]	; (d7cd4 <_ZN9IPAddressC1Ehhhh+0x14>)
   d7cc4:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
   d7cc6:	f89d 5018 	ldrb.w	r5, [sp, #24]
   d7cca:	9500      	str	r5, [sp, #0]
   d7ccc:	f7ff ffea 	bl	d7ca4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d7cd0:	b003      	add	sp, #12
   d7cd2:	bd30      	pop	{r4, r5, pc}
   d7cd4:	000dbf1c 	.word	0x000dbf1c

000d7cd8 <_ZN9IPAddressaSEPKh>:
{
   d7cd8:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d7cda:	78cb      	ldrb	r3, [r1, #3]
   d7cdc:	9300      	str	r3, [sp, #0]
   d7cde:	788b      	ldrb	r3, [r1, #2]
   d7ce0:	784a      	ldrb	r2, [r1, #1]
   d7ce2:	7809      	ldrb	r1, [r1, #0]
   d7ce4:	f7ff ffde 	bl	d7ca4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d7ce8:	b002      	add	sp, #8
   d7cea:	bd10      	pop	{r4, pc}

000d7cec <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7cec:	7441      	strb	r1, [r0, #17]
}
   d7cee:	4770      	bx	lr

000d7cf0 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d7cf0:	4770      	bx	lr

000d7cf2 <_ZN9USBSerial4readEv>:
{
   d7cf2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d7cf4:	2100      	movs	r1, #0
   d7cf6:	7c00      	ldrb	r0, [r0, #16]
   d7cf8:	f7fe fd58 	bl	d67ac <HAL_USB_USART_Receive_Data>
}
   d7cfc:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d7d00:	bd08      	pop	{r3, pc}

000d7d02 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d7d02:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d7d04:	2101      	movs	r1, #1
   d7d06:	7c00      	ldrb	r0, [r0, #16]
   d7d08:	f7fe fd50 	bl	d67ac <HAL_USB_USART_Receive_Data>
}
   d7d0c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d7d10:	bd08      	pop	{r3, pc}

000d7d12 <_ZN9USBSerial17availableForWriteEv>:
{
   d7d12:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d7d14:	7c00      	ldrb	r0, [r0, #16]
   d7d16:	f7fe fd41 	bl	d679c <HAL_USB_USART_Available_Data_For_Write>
}
   d7d1a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7d1e:	bd08      	pop	{r3, pc}

000d7d20 <_ZN9USBSerial9availableEv>:
{
   d7d20:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d7d22:	7c00      	ldrb	r0, [r0, #16]
   d7d24:	f7fe fd32 	bl	d678c <HAL_USB_USART_Available_Data>
}
   d7d28:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7d2c:	bd08      	pop	{r3, pc}

000d7d2e <_ZN9USBSerial5writeEh>:
{
   d7d2e:	b513      	push	{r0, r1, r4, lr}
   d7d30:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7d32:	7c00      	ldrb	r0, [r0, #16]
{
   d7d34:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7d36:	f7fe fd31 	bl	d679c <HAL_USB_USART_Available_Data_For_Write>
   d7d3a:	2800      	cmp	r0, #0
   d7d3c:	9901      	ldr	r1, [sp, #4]
   d7d3e:	dc01      	bgt.n	d7d44 <_ZN9USBSerial5writeEh+0x16>
   d7d40:	7c60      	ldrb	r0, [r4, #17]
   d7d42:	b120      	cbz	r0, d7d4e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d7d44:	7c20      	ldrb	r0, [r4, #16]
   d7d46:	f7fe fd39 	bl	d67bc <HAL_USB_USART_Send_Data>
   d7d4a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d7d4e:	b002      	add	sp, #8
   d7d50:	bd10      	pop	{r4, pc}

000d7d52 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d7d52:	7c00      	ldrb	r0, [r0, #16]
   d7d54:	f7fe bd3a 	b.w	d67cc <HAL_USB_USART_Flush_Data>

000d7d58 <_ZN9USBSerialD0Ev>:
   d7d58:	b510      	push	{r4, lr}
   d7d5a:	2114      	movs	r1, #20
   d7d5c:	4604      	mov	r4, r0
   d7d5e:	f000 fdd6 	bl	d890e <_ZdlPvj>
   d7d62:	4620      	mov	r0, r4
   d7d64:	bd10      	pop	{r4, pc}
	...

000d7d68 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d7d68:	b510      	push	{r4, lr}
   d7d6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d7d6e:	4604      	mov	r4, r0
   d7d70:	4608      	mov	r0, r1
   d7d72:	2100      	movs	r1, #0
   d7d74:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d7d78:	4b04      	ldr	r3, [pc, #16]	; (d7d8c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d7d7a:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d7d7c:	2301      	movs	r3, #1
  _serial = serial;
   d7d7e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d7d80:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d7d82:	4611      	mov	r1, r2
   d7d84:	f7fe fcfa 	bl	d677c <HAL_USB_USART_Init>
}
   d7d88:	4620      	mov	r0, r4
   d7d8a:	bd10      	pop	{r4, pc}
   d7d8c:	000dbf30 	.word	0x000dbf30

000d7d90 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d7d90:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d7d92:	2214      	movs	r2, #20
{
   d7d94:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d7d96:	2100      	movs	r1, #0
   d7d98:	f001 fe04 	bl	d99a4 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d7d9c:	4620      	mov	r0, r4
   d7d9e:	bd10      	pop	{r4, pc}

000d7da0 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d7da0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7da2:	4c10      	ldr	r4, [pc, #64]	; (d7de4 <_Z16_fetch_usbserialv+0x44>)
{
   d7da4:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d7da6:	a803      	add	r0, sp, #12
   d7da8:	f7ff fff2 	bl	d7d90 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7dac:	7821      	ldrb	r1, [r4, #0]
   d7dae:	f3bf 8f5b 	dmb	ish
   d7db2:	f011 0101 	ands.w	r1, r1, #1
   d7db6:	d111      	bne.n	d7ddc <_Z16_fetch_usbserialv+0x3c>
   d7db8:	4620      	mov	r0, r4
   d7dba:	9101      	str	r1, [sp, #4]
   d7dbc:	f7fc f973 	bl	d40a6 <__cxa_guard_acquire>
   d7dc0:	9901      	ldr	r1, [sp, #4]
   d7dc2:	b158      	cbz	r0, d7ddc <_Z16_fetch_usbserialv+0x3c>
   d7dc4:	aa03      	add	r2, sp, #12
   d7dc6:	4808      	ldr	r0, [pc, #32]	; (d7de8 <_Z16_fetch_usbserialv+0x48>)
   d7dc8:	f7ff ffce 	bl	d7d68 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d7dcc:	4620      	mov	r0, r4
   d7dce:	f7fc f96f 	bl	d40b0 <__cxa_guard_release>
   d7dd2:	4a06      	ldr	r2, [pc, #24]	; (d7dec <_Z16_fetch_usbserialv+0x4c>)
   d7dd4:	4906      	ldr	r1, [pc, #24]	; (d7df0 <_Z16_fetch_usbserialv+0x50>)
   d7dd6:	4804      	ldr	r0, [pc, #16]	; (d7de8 <_Z16_fetch_usbserialv+0x48>)
   d7dd8:	f000 fd94 	bl	d8904 <__aeabi_atexit>
	return _usbserial;
}
   d7ddc:	4802      	ldr	r0, [pc, #8]	; (d7de8 <_Z16_fetch_usbserialv+0x48>)
   d7dde:	b008      	add	sp, #32
   d7de0:	bd10      	pop	{r4, pc}
   d7de2:	bf00      	nop
   d7de4:	2003e680 	.word	0x2003e680
   d7de8:	2003e684 	.word	0x2003e684
   d7dec:	2003e468 	.word	0x2003e468
   d7df0:	000d7cf1 	.word	0x000d7cf1

000d7df4 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   d7df4:	4700      	bx	r0
	...

000d7df8 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   d7df8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   d7dfc:	2400      	movs	r4, #0
{
   d7dfe:	461d      	mov	r5, r3
   d7e00:	460f      	mov	r7, r1
   d7e02:	4690      	mov	r8, r2
   d7e04:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   d7e06:	f7fe fb89 	bl	d651c <HAL_Interrupts_Detach>
  if (priority >= 0) {
   d7e0a:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d7e0c:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {0};
   d7e10:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d7e14:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {0};
   d7e18:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   d7e1c:	bfa2      	ittt	ge
   d7e1e:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   d7e22:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   d7e26:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d7e28:	4907      	ldr	r1, [pc, #28]	; (d7e48 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   d7e2a:	9400      	str	r4, [sp, #0]
   d7e2c:	4643      	mov	r3, r8
   d7e2e:	463a      	mov	r2, r7
   d7e30:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   d7e32:	bfa8      	it	ge
   d7e34:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d7e38:	f7fe fb68 	bl	d650c <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   d7e3c:	fab0 f080 	clz	r0, r0
   d7e40:	0940      	lsrs	r0, r0, #5
   d7e42:	b004      	add	sp, #16
   d7e44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d7e48:	000d7df5 	.word	0x000d7df5

000d7e4c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d7e4c:	4770      	bx	lr

000d7e4e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7e4e:	7441      	strb	r1, [r0, #17]
}
   d7e50:	4770      	bx	lr

000d7e52 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d7e52:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d7e54:	7c00      	ldrb	r0, [r0, #16]
   d7e56:	f7fe fbf9 	bl	d664c <hal_usart_available_data_for_write>
}
   d7e5a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7e5e:	bd08      	pop	{r3, pc}

000d7e60 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d7e60:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d7e62:	7c00      	ldrb	r0, [r0, #16]
   d7e64:	f7fe fbca 	bl	d65fc <hal_usart_available>
}
   d7e68:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7e6c:	bd08      	pop	{r3, pc}

000d7e6e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d7e6e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d7e70:	7c00      	ldrb	r0, [r0, #16]
   d7e72:	f7fe fbd3 	bl	d661c <hal_usart_peek>
}
   d7e76:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d7e7a:	bd08      	pop	{r3, pc}

000d7e7c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d7e7c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d7e7e:	7c00      	ldrb	r0, [r0, #16]
   d7e80:	f7fe fbc4 	bl	d660c <hal_usart_read>
}
   d7e84:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d7e88:	bd08      	pop	{r3, pc}

000d7e8a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d7e8a:	7c00      	ldrb	r0, [r0, #16]
   d7e8c:	f7fe bbce 	b.w	d662c <hal_usart_flush>

000d7e90 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d7e90:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d7e92:	7c45      	ldrb	r5, [r0, #17]
{
   d7e94:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d7e96:	b12d      	cbz	r5, d7ea4 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d7e98:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d7e9a:	b003      	add	sp, #12
   d7e9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d7ea0:	f7fe bba4 	b.w	d65ec <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d7ea4:	7c00      	ldrb	r0, [r0, #16]
   d7ea6:	9101      	str	r1, [sp, #4]
   d7ea8:	f7fe fbd0 	bl	d664c <hal_usart_available_data_for_write>
   d7eac:	2800      	cmp	r0, #0
   d7eae:	9901      	ldr	r1, [sp, #4]
   d7eb0:	dcf2      	bgt.n	d7e98 <_ZN11USARTSerial5writeEh+0x8>
}
   d7eb2:	4628      	mov	r0, r5
   d7eb4:	b003      	add	sp, #12
   d7eb6:	bd30      	pop	{r4, r5, pc}

000d7eb8 <_ZN11USARTSerialD0Ev>:
   d7eb8:	b510      	push	{r4, lr}
   d7eba:	2114      	movs	r1, #20
   d7ebc:	4604      	mov	r4, r0
   d7ebe:	f000 fd26 	bl	d890e <_ZdlPvj>
   d7ec2:	4620      	mov	r0, r4
   d7ec4:	bd10      	pop	{r4, pc}
	...

000d7ec8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d7ec8:	b510      	push	{r4, lr}
   d7eca:	f04f 0c00 	mov.w	ip, #0
   d7ece:	4604      	mov	r4, r0
   d7ed0:	4608      	mov	r0, r1
   d7ed2:	4611      	mov	r1, r2
   d7ed4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d7ed8:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d7edc:	4a04      	ldr	r2, [pc, #16]	; (d7ef0 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d7ede:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d7ee0:	2201      	movs	r2, #1
  _serial = serial;
   d7ee2:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d7ee4:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d7ee6:	461a      	mov	r2, r3
   d7ee8:	f7fe fb78 	bl	d65dc <hal_usart_init>
}
   d7eec:	4620      	mov	r0, r4
   d7eee:	bd10      	pop	{r4, pc}
   d7ef0:	000dbf60 	.word	0x000dbf60

000d7ef4 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d7ef4:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d7ef6:	4c0e      	ldr	r4, [pc, #56]	; (d7f30 <_Z22__fetch_global_Serial1v+0x3c>)
   d7ef8:	7821      	ldrb	r1, [r4, #0]
   d7efa:	f3bf 8f5b 	dmb	ish
   d7efe:	f011 0101 	ands.w	r1, r1, #1
   d7f02:	d112      	bne.n	d7f2a <_Z22__fetch_global_Serial1v+0x36>
   d7f04:	4620      	mov	r0, r4
   d7f06:	9101      	str	r1, [sp, #4]
   d7f08:	f7fc f8cd 	bl	d40a6 <__cxa_guard_acquire>
   d7f0c:	9901      	ldr	r1, [sp, #4]
   d7f0e:	b160      	cbz	r0, d7f2a <_Z22__fetch_global_Serial1v+0x36>
   d7f10:	4a08      	ldr	r2, [pc, #32]	; (d7f34 <_Z22__fetch_global_Serial1v+0x40>)
   d7f12:	4b09      	ldr	r3, [pc, #36]	; (d7f38 <_Z22__fetch_global_Serial1v+0x44>)
   d7f14:	4809      	ldr	r0, [pc, #36]	; (d7f3c <_Z22__fetch_global_Serial1v+0x48>)
   d7f16:	f7ff ffd7 	bl	d7ec8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d7f1a:	4620      	mov	r0, r4
   d7f1c:	f7fc f8c8 	bl	d40b0 <__cxa_guard_release>
   d7f20:	4a07      	ldr	r2, [pc, #28]	; (d7f40 <_Z22__fetch_global_Serial1v+0x4c>)
   d7f22:	4908      	ldr	r1, [pc, #32]	; (d7f44 <_Z22__fetch_global_Serial1v+0x50>)
   d7f24:	4805      	ldr	r0, [pc, #20]	; (d7f3c <_Z22__fetch_global_Serial1v+0x48>)
   d7f26:	f000 fced 	bl	d8904 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d7f2a:	4804      	ldr	r0, [pc, #16]	; (d7f3c <_Z22__fetch_global_Serial1v+0x48>)
   d7f2c:	b002      	add	sp, #8
   d7f2e:	bd10      	pop	{r4, pc}
   d7f30:	2003e698 	.word	0x2003e698
   d7f34:	2003e69c 	.word	0x2003e69c
   d7f38:	2003e720 	.word	0x2003e720
   d7f3c:	2003e7a4 	.word	0x2003e7a4
   d7f40:	2003e468 	.word	0x2003e468
   d7f44:	000d7e4d 	.word	0x000d7e4d

000d7f48 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d7f48:	b510      	push	{r4, lr}
      if (_M_empty())
   d7f4a:	6883      	ldr	r3, [r0, #8]
   d7f4c:	4604      	mov	r4, r0
   d7f4e:	b90b      	cbnz	r3, d7f54 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d7f50:	f000 fd93 	bl	d8a7a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7f54:	68c3      	ldr	r3, [r0, #12]
   d7f56:	4798      	blx	r3
      if (_M_manager)
   d7f58:	68a3      	ldr	r3, [r4, #8]
   d7f5a:	b11b      	cbz	r3, d7f64 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d7f5c:	2203      	movs	r2, #3
   d7f5e:	4621      	mov	r1, r4
   d7f60:	4620      	mov	r0, r4
   d7f62:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d7f64:	4620      	mov	r0, r4
   d7f66:	2110      	movs	r1, #16
}
   d7f68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d7f6c:	f000 bccf 	b.w	d890e <_ZdlPvj>

000d7f70 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d7f70:	4770      	bx	lr

000d7f72 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d7f72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7f74:	4606      	mov	r6, r0
   d7f76:	4615      	mov	r5, r2
   d7f78:	460c      	mov	r4, r1
   d7f7a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d7f7c:	42bc      	cmp	r4, r7
   d7f7e:	d006      	beq.n	d7f8e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d7f80:	6833      	ldr	r3, [r6, #0]
   d7f82:	f814 1b01 	ldrb.w	r1, [r4], #1
   d7f86:	689b      	ldr	r3, [r3, #8]
   d7f88:	4630      	mov	r0, r6
   d7f8a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d7f8c:	e7f6      	b.n	d7f7c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d7f8e:	4628      	mov	r0, r5
   d7f90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7f92 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d7f92:	7c00      	ldrb	r0, [r0, #16]
   d7f94:	2200      	movs	r2, #0
   d7f96:	f7fe bb61 	b.w	d665c <hal_i2c_write>

000d7f9a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d7f9a:	7c00      	ldrb	r0, [r0, #16]
   d7f9c:	2100      	movs	r1, #0
   d7f9e:	f7fe bb65 	b.w	d666c <hal_i2c_available>

000d7fa2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d7fa2:	7c00      	ldrb	r0, [r0, #16]
   d7fa4:	2100      	movs	r1, #0
   d7fa6:	f7fe bb69 	b.w	d667c <hal_i2c_read>

000d7faa <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d7faa:	7c00      	ldrb	r0, [r0, #16]
   d7fac:	2100      	movs	r1, #0
   d7fae:	f7fe bb6d 	b.w	d668c <hal_i2c_peek>

000d7fb2 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d7fb2:	7c00      	ldrb	r0, [r0, #16]
   d7fb4:	2100      	movs	r1, #0
   d7fb6:	f7fe bb71 	b.w	d669c <hal_i2c_flush>

000d7fba <_ZN7TwoWireD0Ev>:
   d7fba:	b510      	push	{r4, lr}
   d7fbc:	2114      	movs	r1, #20
   d7fbe:	4604      	mov	r4, r0
   d7fc0:	f000 fca5 	bl	d890e <_ZdlPvj>
   d7fc4:	4620      	mov	r0, r4
   d7fc6:	bd10      	pop	{r4, pc}

000d7fc8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d7fc8:	b510      	push	{r4, lr}
   d7fca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d7fce:	4604      	mov	r4, r0
   d7fd0:	4608      	mov	r0, r1
   d7fd2:	2100      	movs	r1, #0
   d7fd4:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d7fd8:	4b03      	ldr	r3, [pc, #12]	; (d7fe8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d7fda:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d7fdc:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d7fde:	4611      	mov	r1, r2
   d7fe0:	f7fe fb6c 	bl	d66bc <hal_i2c_init>
}
   d7fe4:	4620      	mov	r0, r4
   d7fe6:	bd10      	pop	{r4, pc}
   d7fe8:	000dbf90 	.word	0x000dbf90

000d7fec <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d7fec:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d7fee:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   d7ff0:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d7ff4:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d7ff6:	2201      	movs	r2, #1
   d7ff8:	f04f 33ff 	mov.w	r3, #4294967295
   d7ffc:	f10d 0107 	add.w	r1, sp, #7
   d8000:	47a0      	blx	r4
}
   d8002:	b002      	add	sp, #8
   d8004:	bd10      	pop	{r4, pc}

000d8006 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d8006:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d8008:	6803      	ldr	r3, [r0, #0]
   d800a:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d800c:	f04f 33ff 	mov.w	r3, #4294967295
   d8010:	46a4      	mov	ip, r4
}
   d8012:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d8016:	4760      	bx	ip

000d8018 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d8018:	b513      	push	{r0, r1, r4, lr}
   d801a:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   d801c:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d801e:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   d8022:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   d8024:	f10d 0107 	add.w	r1, sp, #7
   d8028:	2201      	movs	r2, #1
   d802a:	47a0      	blx	r4
}
   d802c:	b002      	add	sp, #8
   d802e:	bd10      	pop	{r4, pc}

000d8030 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   d8030:	4770      	bx	lr

000d8032 <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d8032:	b538      	push	{r3, r4, r5, lr}
   d8034:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d8036:	681a      	ldr	r2, [r3, #0]
   d8038:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   d803a:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   d803c:	da10      	bge.n	d8060 <_ZN9TCPClient9connectedEv+0x2e>
   d803e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d8042:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d8046:	429a      	cmp	r2, r3
   d8048:	d10a      	bne.n	d8060 <_ZN9TCPClient9connectedEv+0x2e>
    if (!rv) {
        rv = available();
   d804a:	6803      	ldr	r3, [r0, #0]
   d804c:	691b      	ldr	r3, [r3, #16]
   d804e:	4798      	blx	r3
        if (!rv) {
   d8050:	4604      	mov	r4, r0
   d8052:	b928      	cbnz	r0, d8060 <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   d8054:	682b      	ldr	r3, [r5, #0]
   d8056:	4628      	mov	r0, r5
   d8058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d805a:	4798      	blx	r3
        rv = available();
   d805c:	4620      	mov	r0, r4
        }
    }
    return rv;
}
   d805e:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   d8060:	2001      	movs	r0, #1
   d8062:	e7fc      	b.n	d805e <_ZN9TCPClient9connectedEv+0x2c>

000d8064 <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d8064:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   d8066:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   d8068:	43c0      	mvns	r0, r0
   d806a:	0fc0      	lsrs	r0, r0, #31
   d806c:	4770      	bx	lr

000d806e <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d806e:	4770      	bx	lr

000d8070 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d8070:	4b06      	ldr	r3, [pc, #24]	; (d808c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d8072:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d8074:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   d8076:	f100 040c 	add.w	r4, r0, #12
	    ||
   d807a:	d005      	beq.n	d8088 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d807c:	4608      	mov	r0, r1
   d807e:	f000 fcff 	bl	d8a80 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d8082:	2800      	cmp	r0, #0
	return nullptr;
   d8084:	bf08      	it	eq
   d8086:	2400      	moveq	r4, #0
      }
   d8088:	4620      	mov	r0, r4
   d808a:	bd10      	pop	{r4, pc}
   d808c:	000dbed0 	.word	0x000dbed0

000d8090 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d8090:	b510      	push	{r4, lr}
   d8092:	21ac      	movs	r1, #172	; 0xac
   d8094:	4604      	mov	r4, r0
   d8096:	f000 fc3a 	bl	d890e <_ZdlPvj>
   d809a:	4620      	mov	r0, r4
   d809c:	bd10      	pop	{r4, pc}

000d809e <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   d809e:	f7fb bffe 	b.w	d409e <_ZdlPv>

000d80a2 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d80a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   d80a6:	f04f 0800 	mov.w	r8, #0
   d80aa:	b086      	sub	sp, #24
   d80ac:	461d      	mov	r5, r3
   d80ae:	f8c0 8004 	str.w	r8, [r0, #4]
   d80b2:	4604      	mov	r4, r0
   d80b4:	460e      	mov	r6, r1
   d80b6:	4617      	mov	r7, r2
    struct timeval tv = {};
   d80b8:	4641      	mov	r1, r8
   d80ba:	2210      	movs	r2, #16
   d80bc:	a802      	add	r0, sp, #8
   d80be:	f001 fc71 	bl	d99a4 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   d80c2:	1c6b      	adds	r3, r5, #1
   d80c4:	d009      	beq.n	d80da <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   d80c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d80ca:	fbb5 f3f0 	udiv	r3, r5, r0
   d80ce:	e9cd 3802 	strd	r3, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d80d2:	fb00 5313 	mls	r3, r0, r3, r5
   d80d6:	4358      	muls	r0, r3
   d80d8:	9004      	str	r0, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d80da:	6960      	ldr	r0, [r4, #20]
   d80dc:	2310      	movs	r3, #16
   d80de:	9300      	str	r3, [sp, #0]
   d80e0:	6800      	ldr	r0, [r0, #0]
   d80e2:	ab02      	add	r3, sp, #8
   d80e4:	f241 0205 	movw	r2, #4101	; 0x1005
   d80e8:	f640 71ff 	movw	r1, #4095	; 0xfff
   d80ec:	f7fe faf6 	bl	d66dc <sock_setsockopt>
    if (ret < 0) {
   d80f0:	2800      	cmp	r0, #0
   d80f2:	da07      	bge.n	d8104 <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   d80f4:	f7fe fc5e 	bl	d69b4 <__errno>
   d80f8:	6803      	ldr	r3, [r0, #0]
   d80fa:	6063      	str	r3, [r4, #4]
        return 0;
   d80fc:	2000      	movs	r0, #0
}
   d80fe:	b006      	add	sp, #24
   d8100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   d8104:	6960      	ldr	r0, [r4, #20]
   d8106:	2300      	movs	r3, #0
   d8108:	6800      	ldr	r0, [r0, #0]
   d810a:	463a      	mov	r2, r7
   d810c:	4631      	mov	r1, r6
   d810e:	f7fe fb0d 	bl	d672c <sock_send>
    if (ret < 0) {
   d8112:	1e03      	subs	r3, r0, #0
   d8114:	dbee      	blt.n	d80f4 <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   d8116:	4618      	mov	r0, r3
   d8118:	e7f1      	b.n	d80fe <_ZN9TCPClient5writeEPKhjm+0x5c>
	...

000d811c <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   d811c:	b570      	push	{r4, r5, r6, lr}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d811e:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   d8120:	4b05      	ldr	r3, [pc, #20]	; (d8138 <_ZN9TCPClient8remoteIPEv+0x1c>)
   d8122:	4604      	mov	r4, r0
   d8124:	358c      	adds	r5, #140	; 0x8c
   d8126:	f844 3b04 	str.w	r3, [r4], #4
   d812a:	4606      	mov	r6, r0
   d812c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d812e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8130:	682b      	ldr	r3, [r5, #0]
   d8132:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d8134:	4630      	mov	r0, r6
   d8136:	bd70      	pop	{r4, r5, r6, pc}
   d8138:	000dbf1c 	.word	0x000dbf1c

000d813c <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   d813c:	b510      	push	{r4, lr}
   d813e:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d8140:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d8144:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d8148:	429a      	cmp	r2, r3
int TCPClient::peek() {
   d814a:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d814c:	d005      	beq.n	d815a <_ZN9TCPClient4peekEv+0x1e>
   d814e:	6963      	ldr	r3, [r4, #20]
   d8150:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   d8154:	4413      	add	r3, r2
   d8156:	7918      	ldrb	r0, [r3, #4]
}
   d8158:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d815a:	6803      	ldr	r3, [r0, #0]
   d815c:	691b      	ldr	r3, [r3, #16]
   d815e:	4798      	blx	r3
   d8160:	2800      	cmp	r0, #0
   d8162:	d1f4      	bne.n	d814e <_ZN9TCPClient4peekEv+0x12>
   d8164:	f04f 30ff 	mov.w	r0, #4294967295
   d8168:	e7f6      	b.n	d8158 <_ZN9TCPClient4peekEv+0x1c>

000d816a <_ZN9TCPClient4readEv>:
int TCPClient::read() {
   d816a:	b510      	push	{r4, lr}
   d816c:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d816e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d8172:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d8176:	429a      	cmp	r2, r3
int TCPClient::read() {
   d8178:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d817a:	d008      	beq.n	d818e <_ZN9TCPClient4readEv+0x24>
   d817c:	6963      	ldr	r3, [r4, #20]
   d817e:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   d8182:	1c51      	adds	r1, r2, #1
   d8184:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   d8188:	4413      	add	r3, r2
   d818a:	7918      	ldrb	r0, [r3, #4]
}
   d818c:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d818e:	6803      	ldr	r3, [r0, #0]
   d8190:	691b      	ldr	r3, [r3, #16]
   d8192:	4798      	blx	r3
   d8194:	2800      	cmp	r0, #0
   d8196:	d1f1      	bne.n	d817c <_ZN9TCPClient4readEv+0x12>
   d8198:	f04f 30ff 	mov.w	r0, #4294967295
   d819c:	e7f6      	b.n	d818c <_ZN9TCPClient4readEv+0x22>

000d819e <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   d819e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d81a0:	6943      	ldr	r3, [r0, #20]
   d81a2:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   d81a4:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d81a8:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d81ac:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   d81ae:	4605      	mov	r5, r0
   d81b0:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   d81b2:	d016      	beq.n	d81e2 <_ZN9TCPClient4readEPhj+0x44>
   d81b4:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   d81b6:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d81ba:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d81be:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d81c0:	42bc      	cmp	r4, r7
   d81c2:	bf28      	it	cs
   d81c4:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d81c6:	3304      	adds	r3, #4
   d81c8:	4622      	mov	r2, r4
   d81ca:	4419      	add	r1, r3
   d81cc:	4630      	mov	r0, r6
   d81ce:	f001 fbdb 	bl	d9988 <memcpy>
   d81d2:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d81d4:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d81d8:	4423      	add	r3, r4
   d81da:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   d81de:	4620      	mov	r0, r4
   d81e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   d81e2:	6803      	ldr	r3, [r0, #0]
   d81e4:	691b      	ldr	r3, [r3, #16]
   d81e6:	4798      	blx	r3
   d81e8:	2800      	cmp	r0, #0
   d81ea:	d1e3      	bne.n	d81b4 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   d81ec:	f04f 34ff 	mov.w	r4, #4294967295
   d81f0:	e7f5      	b.n	d81de <_ZN9TCPClient4readEPhj+0x40>
	...

000d81f4 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d81f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d81f8:	4698      	mov	r8, r3
    stop();
   d81fa:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d81fc:	b093      	sub	sp, #76	; 0x4c
   d81fe:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   d8200:	2400      	movs	r4, #0
    stop();
   d8202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d8204:	4606      	mov	r6, r0
   d8206:	4617      	mov	r7, r2
    stop();
   d8208:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d820a:	4628      	mov	r0, r5
   d820c:	466b      	mov	r3, sp
   d820e:	4622      	mov	r2, r4
   d8210:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   d8212:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d8214:	f7fe f94a 	bl	d64ac <netdb_getaddrinfo>
   d8218:	4605      	mov	r5, r0
   d821a:	2800      	cmp	r0, #0
   d821c:	d163      	bne.n	d82e6 <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   d821e:	9b00      	ldr	r3, [sp, #0]
   d8220:	2b00      	cmp	r3, #0
   d8222:	d04b      	beq.n	d82bc <_ZN9TCPClient7connectEPKctm+0xc8>
   d8224:	695b      	ldr	r3, [r3, #20]
   d8226:	2b00      	cmp	r3, #0
   d8228:	d048      	beq.n	d82bc <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   d822a:	a806      	add	r0, sp, #24
   d822c:	f7ff fd04 	bl	d7c38 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d8230:	9b00      	ldr	r3, [sp, #0]
   d8232:	695c      	ldr	r4, [r3, #20]
    if (saddr->sa_family == AF_INET) {
   d8234:	7863      	ldrb	r3, [r4, #1]
   d8236:	2b02      	cmp	r3, #2
   d8238:	d104      	bne.n	d8244 <_ZN9TCPClient7connectEPKctm+0x50>
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d823a:	1d21      	adds	r1, r4, #4
            addr = (const uint8_t*)(&ptr[3]);
   d823c:	a806      	add	r0, sp, #24
   d823e:	f7ff fd4b 	bl	d7cd8 <_ZN9IPAddressaSEPKh>
        if (port) {
   d8242:	e026      	b.n	d8292 <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   d8244:	2b0a      	cmp	r3, #10
   d8246:	d124      	bne.n	d8292 <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   d8248:	2211      	movs	r2, #17
   d824a:	4629      	mov	r1, r5
   d824c:	a801      	add	r0, sp, #4
   d824e:	f001 fba9 	bl	d99a4 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d8252:	68a3      	ldr	r3, [r4, #8]
   d8254:	2b00      	cmp	r3, #0
   d8256:	d038      	beq.n	d82ca <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d8258:	f104 0308 	add.w	r3, r4, #8
   d825c:	f10d 0c04 	add.w	ip, sp, #4
   d8260:	3418      	adds	r4, #24
   d8262:	6818      	ldr	r0, [r3, #0]
   d8264:	6859      	ldr	r1, [r3, #4]
   d8266:	4662      	mov	r2, ip
   d8268:	c203      	stmia	r2!, {r0, r1}
   d826a:	3308      	adds	r3, #8
   d826c:	42a3      	cmp	r3, r4
   d826e:	4694      	mov	ip, r2
   d8270:	d1f7      	bne.n	d8262 <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   d8272:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d8274:	a901      	add	r1, sp, #4
   d8276:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   d8278:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d827c:	f7ff fcea 	bl	d7c54 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d8280:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   d8284:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   d8288:	ac07      	add	r4, sp, #28
   d828a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d828c:	f8dc 3000 	ldr.w	r3, [ip]
   d8290:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   d8292:	a806      	add	r0, sp, #24
   d8294:	f7ff fcf0 	bl	d7c78 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d8298:	b180      	cbz	r0, d82bc <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   d829a:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   d829c:	ad07      	add	r5, sp, #28
   d829e:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d82a2:	4b12      	ldr	r3, [pc, #72]	; (d82ec <_ZN9TCPClient7connectEPKctm+0xf8>)
   d82a4:	930c      	str	r3, [sp, #48]	; 0x30
   d82a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d82a8:	ac0d      	add	r4, sp, #52	; 0x34
   d82aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d82ac:	682b      	ldr	r3, [r5, #0]
   d82ae:	7023      	strb	r3, [r4, #0]
   d82b0:	463a      	mov	r2, r7
   d82b2:	4643      	mov	r3, r8
   d82b4:	a90c      	add	r1, sp, #48	; 0x30
   d82b6:	4630      	mov	r0, r6
   d82b8:	47c8      	blx	r9
   d82ba:	4605      	mov	r5, r0
    SCOPE_GUARD({
   d82bc:	9800      	ldr	r0, [sp, #0]
   d82be:	f7fe f8ed 	bl	d649c <netdb_freeaddrinfo>
}
   d82c2:	4628      	mov	r0, r5
   d82c4:	b013      	add	sp, #76	; 0x4c
   d82c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d82ca:	68e3      	ldr	r3, [r4, #12]
   d82cc:	2b00      	cmp	r3, #0
   d82ce:	d1c3      	bne.n	d8258 <_ZN9TCPClient7connectEPKctm+0x64>
   d82d0:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d82d4:	f8d4 9010 	ldr.w	r9, [r4, #16]
   d82d8:	f7fe f968 	bl	d65ac <inet_htonl>
   d82dc:	4581      	cmp	r9, r0
   d82de:	d1bb      	bne.n	d8258 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   d82e0:	f104 0114 	add.w	r1, r4, #20
   d82e4:	e7aa      	b.n	d823c <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d82e6:	4625      	mov	r5, r4
   d82e8:	e7e8      	b.n	d82bc <_ZN9TCPClient7connectEPKctm+0xc8>
   d82ea:	bf00      	nop
   d82ec:	000dbf1c 	.word	0x000dbf1c

000d82f0 <_ZN9TCPClient12flush_bufferEv>:
   d82f0:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d82f2:	2300      	movs	r3, #0
   d82f4:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d82f8:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d82fa:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   d82fe:	4770      	bx	lr

000d8300 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d8300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8304:	461f      	mov	r7, r3
    stop();
   d8306:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d8308:	460c      	mov	r4, r1
    stop();
   d830a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d830c:	b08a      	sub	sp, #40	; 0x28
   d830e:	4605      	mov	r5, r0
   d8310:	4616      	mov	r6, r2
    stop();
   d8312:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d8314:	7d23      	ldrb	r3, [r4, #20]
   d8316:	f8d5 8014 	ldr.w	r8, [r5, #20]
   d831a:	2b04      	cmp	r3, #4
   d831c:	bf0c      	ite	eq
   d831e:	2002      	moveq	r0, #2
   d8320:	200a      	movne	r0, #10
   d8322:	2206      	movs	r2, #6
   d8324:	2101      	movs	r1, #1
   d8326:	f7fe fa11 	bl	d674c <sock_socket>
   d832a:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   d832e:	696b      	ldr	r3, [r5, #20]
   d8330:	681b      	ldr	r3, [r3, #0]
   d8332:	2b00      	cmp	r3, #0
   d8334:	da08      	bge.n	d8348 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   d8336:	682b      	ldr	r3, [r5, #0]
   d8338:	4628      	mov	r0, r5
   d833a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d833c:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   d833e:	4798      	blx	r3
}
   d8340:	4620      	mov	r0, r4
   d8342:	b00a      	add	sp, #40	; 0x28
   d8344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   d8348:	4628      	mov	r0, r5
   d834a:	f7ff ffd1 	bl	d82f0 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   d834e:	b1b7      	cbz	r7, d837e <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   d8350:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d8352:	a903      	add	r1, sp, #12
   d8354:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   d8356:	9303      	str	r3, [sp, #12]
   d8358:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d835c:	f7fe f8f6 	bl	d654c <if_index_to_name>
   d8360:	2800      	cmp	r0, #0
   d8362:	d1e8      	bne.n	d8336 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   d8364:	6968      	ldr	r0, [r5, #20]
   d8366:	2306      	movs	r3, #6
   d8368:	9300      	str	r3, [sp, #0]
   d836a:	6800      	ldr	r0, [r0, #0]
   d836c:	ab03      	add	r3, sp, #12
   d836e:	f241 020b 	movw	r2, #4107	; 0x100b
   d8372:	f640 71ff 	movw	r1, #4095	; 0xfff
   d8376:	f7fe f9b1 	bl	d66dc <sock_setsockopt>
   d837a:	2800      	cmp	r0, #0
   d837c:	d1db      	bne.n	d8336 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   d837e:	221c      	movs	r2, #28
   d8380:	2100      	movs	r1, #0
   d8382:	a803      	add	r0, sp, #12
   d8384:	f001 fb0e 	bl	d99a4 <memset>
    if (ip.version() == 4) {
   d8388:	7d23      	ldrb	r3, [r4, #20]
   d838a:	2b04      	cmp	r3, #4
   d838c:	d11d      	bne.n	d83ca <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   d838e:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   d8392:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   d8394:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   d8398:	f7fe f918 	bl	d65cc <inet_htons>
   d839c:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d83a0:	6860      	ldr	r0, [r4, #4]
   d83a2:	f7fe f903 	bl	d65ac <inet_htonl>
   d83a6:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   d83a8:	696b      	ldr	r3, [r5, #20]
   d83aa:	221c      	movs	r2, #28
   d83ac:	6818      	ldr	r0, [r3, #0]
   d83ae:	a903      	add	r1, sp, #12
   d83b0:	f7fe f9a4 	bl	d66fc <sock_connect>
   d83b4:	2800      	cmp	r0, #0
   d83b6:	d1be      	bne.n	d8336 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   d83b8:	3404      	adds	r4, #4
   d83ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d83bc:	696d      	ldr	r5, [r5, #20]
   d83be:	358c      	adds	r5, #140	; 0x8c
   d83c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d83c2:	6823      	ldr	r3, [r4, #0]
   d83c4:	702b      	strb	r3, [r5, #0]
    return 1; // success
   d83c6:	2401      	movs	r4, #1
   d83c8:	e7ba      	b.n	d8340 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   d83ca:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   d83ce:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   d83d0:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   d83d4:	f7fe f8fa 	bl	d65cc <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d83d8:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   d83da:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d83de:	1d23      	adds	r3, r4, #4
   d83e0:	f104 0714 	add.w	r7, r4, #20
   d83e4:	6818      	ldr	r0, [r3, #0]
   d83e6:	6859      	ldr	r1, [r3, #4]
   d83e8:	4632      	mov	r2, r6
   d83ea:	c203      	stmia	r2!, {r0, r1}
   d83ec:	3308      	adds	r3, #8
   d83ee:	42bb      	cmp	r3, r7
   d83f0:	4616      	mov	r6, r2
   d83f2:	d1f7      	bne.n	d83e4 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   d83f4:	e7d8      	b.n	d83a8 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000d83f8 <_ZN9TCPClient9availableEv>:
{
   d83f8:	b530      	push	{r4, r5, lr}
   d83fa:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   d83fc:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   d8400:	b08b      	sub	sp, #44	; 0x2c
   d8402:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   d8404:	b12b      	cbz	r3, d8412 <_ZN9TCPClient9availableEv+0x1a>
   d8406:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d840a:	429a      	cmp	r2, r3
   d840c:	d101      	bne.n	d8412 <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   d840e:	f7ff ff6f 	bl	d82f0 <_ZN9TCPClient12flush_bufferEv>
   d8412:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   d8414:	6808      	ldr	r0, [r1, #0]
   d8416:	2800      	cmp	r0, #0
   d8418:	db18      	blt.n	d844c <_ZN9TCPClient9availableEv+0x54>
   d841a:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
        if (d_->total < arraySize(d_->buffer)) {
   d841e:	2d7f      	cmp	r5, #127	; 0x7f
   d8420:	d814      	bhi.n	d844c <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d8422:	3104      	adds	r1, #4
   d8424:	2308      	movs	r3, #8
   d8426:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d842a:	4429      	add	r1, r5
   d842c:	f7fe f96e 	bl	d670c <sock_recv>
            if (ret > 0) {
   d8430:	2800      	cmp	r0, #0
   d8432:	dd13      	ble.n	d845c <_ZN9TCPClient9availableEv+0x64>
   d8434:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d8436:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d843a:	b90a      	cbnz	r2, d8440 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   d843c:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d8440:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   d8442:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d8446:	4410      	add	r0, r2
   d8448:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   d844c:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   d844e:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   d8452:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   d8456:	1ac0      	subs	r0, r0, r3
   d8458:	b00b      	add	sp, #44	; 0x2c
   d845a:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d845c:	f7fe faaa 	bl	d69b4 <__errno>
   d8460:	6803      	ldr	r3, [r0, #0]
   d8462:	2b0b      	cmp	r3, #11
   d8464:	d0f2      	beq.n	d844c <_ZN9TCPClient9availableEv+0x54>
   d8466:	f7fe faa5 	bl	d69b4 <__errno>
   d846a:	6803      	ldr	r3, [r0, #0]
   d846c:	2b0b      	cmp	r3, #11
   d846e:	d0ed      	beq.n	d844c <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   d8470:	2320      	movs	r3, #32
   d8472:	2500      	movs	r5, #0
   d8474:	e9cd 3502 	strd	r3, r5, [sp, #8]
   d8478:	f7fe fa9c 	bl	d69b4 <__errno>
   d847c:	6803      	ldr	r3, [r0, #0]
   d847e:	9301      	str	r3, [sp, #4]
   d8480:	4b08      	ldr	r3, [pc, #32]	; (d84a4 <_ZN9TCPClient9availableEv+0xac>)
   d8482:	4909      	ldr	r1, [pc, #36]	; (d84a8 <_ZN9TCPClient9availableEv+0xb0>)
   d8484:	9300      	str	r3, [sp, #0]
   d8486:	aa02      	add	r2, sp, #8
   d8488:	462b      	mov	r3, r5
   d848a:	2032      	movs	r0, #50	; 0x32
   d848c:	f7fe f9a6 	bl	d67dc <log_message>
                    sock_close(d_->sock);
   d8490:	6963      	ldr	r3, [r4, #20]
   d8492:	6818      	ldr	r0, [r3, #0]
   d8494:	f7fe f92a 	bl	d66ec <sock_close>
   d8498:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d849a:	f04f 32ff 	mov.w	r2, #4294967295
   d849e:	601a      	str	r2, [r3, #0]
   d84a0:	e7d4      	b.n	d844c <_ZN9TCPClient9availableEv+0x54>
   d84a2:	bf00      	nop
   d84a4:	000dbfb7 	.word	0x000dbfb7
   d84a8:	000dbfb0 	.word	0x000dbfb0

000d84ac <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   d84ac:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d84ae:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   d84b0:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d84b2:	6818      	ldr	r0, [r3, #0]
   d84b4:	2800      	cmp	r0, #0
   d84b6:	db01      	blt.n	d84bc <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d84b8:	f7fe f918 	bl	d66ec <sock_close>
   d84bc:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   d84be:	f04f 32ff 	mov.w	r2, #4294967295
   d84c2:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   d84c4:	6960      	ldr	r0, [r4, #20]
   d84c6:	2211      	movs	r2, #17
   d84c8:	2100      	movs	r1, #0
   d84ca:	308c      	adds	r0, #140	; 0x8c
   d84cc:	f001 fa6a 	bl	d99a4 <memset>
    flush_buffer();
   d84d0:	4620      	mov	r0, r4
}
   d84d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   d84d6:	f7ff bf0b 	b.w	d82f0 <_ZN9TCPClient12flush_bufferEv>

000d84da <_ZN9TCPClient6statusEv>:
    return (isOpen(d_->sock));
   d84da:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   d84dc:	6818      	ldr	r0, [r3, #0]
}
   d84de:	43c0      	mvns	r0, r0
   d84e0:	0fc0      	lsrs	r0, r0, #31
   d84e2:	4770      	bx	lr

000d84e4 <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   d84e4:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d84e6:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   d84e8:	4604      	mov	r4, r0
          total(0) {
   d84ea:	6001      	str	r1, [r0, #0]
   d84ec:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   d84f0:	3088      	adds	r0, #136	; 0x88
   d84f2:	f7ff fba1 	bl	d7c38 <_ZN9IPAddressC1Ev>
}
   d84f6:	4620      	mov	r0, r4
   d84f8:	bd10      	pop	{r4, pc}
	...

000d84fc <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   d84fc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d84fe:	2300      	movs	r3, #0
   d8500:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d8504:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   d8508:	4a0e      	ldr	r2, [pc, #56]	; (d8544 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   d850a:	6103      	str	r3, [r0, #16]
   d850c:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d850e:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   d8510:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d8512:	20ac      	movs	r0, #172	; 0xac
   d8514:	9101      	str	r1, [sp, #4]
   d8516:	f7fb fdbe 	bl	d4096 <_Znwj>
	  auto __pi = ::new (__mem)
   d851a:	1e05      	subs	r5, r0, #0
   d851c:	f105 060c 	add.w	r6, r5, #12
   d8520:	d008      	beq.n	d8534 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   d8522:	2301      	movs	r3, #1
   d8524:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   d8528:	4b07      	ldr	r3, [pc, #28]	; (d8548 <_ZN9TCPClientC1Ei+0x4c>)
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d852a:	9901      	ldr	r1, [sp, #4]
   d852c:	602b      	str	r3, [r5, #0]
   d852e:	4630      	mov	r0, r6
   d8530:	f7ff ffd8 	bl	d84e4 <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   d8534:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   d8536:	e9c4 6505 	strd	r6, r5, [r4, #20]
   d853a:	f7ff fed9 	bl	d82f0 <_ZN9TCPClient12flush_bufferEv>
}
   d853e:	b002      	add	sp, #8
   d8540:	bd70      	pop	{r4, r5, r6, pc}
   d8542:	bf00      	nop
   d8544:	000dbfec 	.word	0x000dbfec
   d8548:	000dbfd0 	.word	0x000dbfd0

000d854c <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   d854c:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d854e:	f04f 31ff 	mov.w	r1, #4294967295
TCPClient::TCPClient()
   d8552:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d8554:	f7ff ffd2 	bl	d84fc <_ZN9TCPClientC1Ei>
}
   d8558:	4620      	mov	r0, r4
   d855a:	bd10      	pop	{r4, pc}

000d855c <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   d855c:	b510      	push	{r4, lr}
   d855e:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d8560:	6800      	ldr	r0, [r0, #0]
   d8562:	2800      	cmp	r0, #0
   d8564:	db01      	blt.n	d856a <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d8566:	f7fe f8c1 	bl	d66ec <sock_close>
    }
}
   d856a:	4620      	mov	r0, r4
   d856c:	bd10      	pop	{r4, pc}

000d856e <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(noexcept( __p->~_Up()))
	{ __p->~_Up(); }
   d856e:	300c      	adds	r0, #12
   d8570:	f7ff bff4 	b.w	d855c <_ZN9TCPClient4DataD1Ev>

000d8574 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d8574:	2200      	movs	r2, #0
   d8576:	6840      	ldr	r0, [r0, #4]
   d8578:	4611      	mov	r1, r2
   d857a:	f7fe b983 	b.w	d6884 <network_ready>

000d857e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d857e:	2200      	movs	r2, #0
   d8580:	6840      	ldr	r0, [r0, #4]
   d8582:	4611      	mov	r1, r2
   d8584:	f7fe b99e 	b.w	d68c4 <network_listening>

000d8588 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d8588:	2200      	movs	r2, #0
   d858a:	6840      	ldr	r0, [r0, #4]
   d858c:	4611      	mov	r1, r2
   d858e:	f7fe b9a9 	b.w	d68e4 <network_get_listen_timeout>

000d8592 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d8592:	6840      	ldr	r0, [r0, #4]
   d8594:	2200      	movs	r2, #0
   d8596:	f7fe b99d 	b.w	d68d4 <network_set_listen_timeout>

000d859a <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d859a:	6840      	ldr	r0, [r0, #4]
   d859c:	2200      	movs	r2, #0
   d859e:	f081 0101 	eor.w	r1, r1, #1
   d85a2:	f7fe b987 	b.w	d68b4 <network_listen>

000d85a6 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d85a6:	2300      	movs	r3, #0
   d85a8:	6840      	ldr	r0, [r0, #4]
   d85aa:	461a      	mov	r2, r3
   d85ac:	4619      	mov	r1, r3
   d85ae:	f7fe b979 	b.w	d68a4 <network_off>

000d85b2 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d85b2:	2300      	movs	r3, #0
   d85b4:	6840      	ldr	r0, [r0, #4]
   d85b6:	461a      	mov	r2, r3
   d85b8:	4619      	mov	r1, r3
   d85ba:	f7fe b96b 	b.w	d6894 <network_on>

000d85be <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d85be:	2200      	movs	r2, #0
   d85c0:	6840      	ldr	r0, [r0, #4]
   d85c2:	4611      	mov	r1, r2
   d85c4:	f7fe b94e 	b.w	d6864 <network_connecting>

000d85c8 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d85c8:	6840      	ldr	r0, [r0, #4]
   d85ca:	2200      	movs	r2, #0
   d85cc:	2102      	movs	r1, #2
   d85ce:	f7fe b951 	b.w	d6874 <network_disconnect>

000d85d2 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d85d2:	2300      	movs	r3, #0
   d85d4:	6840      	ldr	r0, [r0, #4]
   d85d6:	461a      	mov	r2, r3
   d85d8:	f7fe b93c 	b.w	d6854 <network_connect>

000d85dc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d85dc:	4b02      	ldr	r3, [pc, #8]	; (d85e8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d85de:	2204      	movs	r2, #4
   d85e0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d85e2:	4a02      	ldr	r2, [pc, #8]	; (d85ec <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d85e4:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d85e6:	4770      	bx	lr
   d85e8:	2003e7b8 	.word	0x2003e7b8
   d85ec:	000dc038 	.word	0x000dc038

000d85f0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d85f0:	2300      	movs	r3, #0
   d85f2:	6840      	ldr	r0, [r0, #4]
   d85f4:	461a      	mov	r2, r3
   d85f6:	f7fe b92d 	b.w	d6854 <network_connect>

000d85fa <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d85fa:	6840      	ldr	r0, [r0, #4]
   d85fc:	2200      	movs	r2, #0
   d85fe:	2102      	movs	r1, #2
   d8600:	f7fe b938 	b.w	d6874 <network_disconnect>

000d8604 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d8604:	2200      	movs	r2, #0
   d8606:	6840      	ldr	r0, [r0, #4]
   d8608:	4611      	mov	r1, r2
   d860a:	f7fe b92b 	b.w	d6864 <network_connecting>

000d860e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d860e:	2200      	movs	r2, #0
   d8610:	6840      	ldr	r0, [r0, #4]
   d8612:	4611      	mov	r1, r2
   d8614:	f7fe b936 	b.w	d6884 <network_ready>

000d8618 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d8618:	2300      	movs	r3, #0
   d861a:	6840      	ldr	r0, [r0, #4]
   d861c:	461a      	mov	r2, r3
   d861e:	4619      	mov	r1, r3
   d8620:	f7fe b938 	b.w	d6894 <network_on>

000d8624 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d8624:	2300      	movs	r3, #0
   d8626:	6840      	ldr	r0, [r0, #4]
   d8628:	461a      	mov	r2, r3
   d862a:	4619      	mov	r1, r3
   d862c:	f7fe b93a 	b.w	d68a4 <network_off>

000d8630 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d8630:	6840      	ldr	r0, [r0, #4]
   d8632:	2200      	movs	r2, #0
   d8634:	f081 0101 	eor.w	r1, r1, #1
   d8638:	f7fe b93c 	b.w	d68b4 <network_listen>

000d863c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d863c:	6840      	ldr	r0, [r0, #4]
   d863e:	2200      	movs	r2, #0
   d8640:	f7fe b948 	b.w	d68d4 <network_set_listen_timeout>

000d8644 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d8644:	2200      	movs	r2, #0
   d8646:	6840      	ldr	r0, [r0, #4]
   d8648:	4611      	mov	r1, r2
   d864a:	f7fe b94b 	b.w	d68e4 <network_get_listen_timeout>

000d864e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d864e:	2200      	movs	r2, #0
   d8650:	6840      	ldr	r0, [r0, #4]
   d8652:	4611      	mov	r1, r2
   d8654:	f7fe b936 	b.w	d68c4 <network_listening>

000d8658 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d8658:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d865c:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d865e:	b095      	sub	sp, #84	; 0x54
   d8660:	4616      	mov	r6, r2
   d8662:	460d      	mov	r5, r1
   d8664:	4607      	mov	r7, r0
    IPAddress addr;
   d8666:	f7ff fae7 	bl	d7c38 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d866a:	4621      	mov	r1, r4
   d866c:	2218      	movs	r2, #24
   d866e:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d8670:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d8672:	f001 f997 	bl	d99a4 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d8676:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d8678:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d867c:	4621      	mov	r1, r4
   d867e:	466b      	mov	r3, sp
   d8680:	aa0c      	add	r2, sp, #48	; 0x30
   d8682:	4630      	mov	r0, r6
   d8684:	f7fd ff12 	bl	d64ac <netdb_getaddrinfo>
    if (!r) {
   d8688:	4604      	mov	r4, r0
   d868a:	2800      	cmp	r0, #0
   d868c:	d146      	bne.n	d871c <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d868e:	4602      	mov	r2, r0
   d8690:	2101      	movs	r1, #1
   d8692:	6868      	ldr	r0, [r5, #4]
   d8694:	f7fe f8f6 	bl	d6884 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d8698:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d869a:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d869c:	4622      	mov	r2, r4
   d869e:	6868      	ldr	r0, [r5, #4]
   d86a0:	f7fe f8f0 	bl	d6884 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d86a4:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d86a6:	4681      	mov	r9, r0
        bool ok = false;
   d86a8:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d86aa:	2e00      	cmp	r6, #0
   d86ac:	d036      	beq.n	d871c <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d86ae:	2900      	cmp	r1, #0
   d86b0:	d134      	bne.n	d871c <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d86b2:	6873      	ldr	r3, [r6, #4]
   d86b4:	2b02      	cmp	r3, #2
   d86b6:	d003      	beq.n	d86c0 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d86b8:	2b0a      	cmp	r3, #10
   d86ba:	d00b      	beq.n	d86d4 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d86bc:	69f6      	ldr	r6, [r6, #28]
   d86be:	e7f4      	b.n	d86aa <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d86c0:	f1b8 0f00 	cmp.w	r8, #0
   d86c4:	d004      	beq.n	d86d0 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d86c6:	6971      	ldr	r1, [r6, #20]
   d86c8:	4638      	mov	r0, r7
   d86ca:	3104      	adds	r1, #4
   d86cc:	f7ff fb04 	bl	d7cd8 <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d86d0:	4641      	mov	r1, r8
   d86d2:	e7f3      	b.n	d86bc <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d86d4:	f1b9 0f00 	cmp.w	r9, #0
   d86d8:	d101      	bne.n	d86de <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d86da:	4649      	mov	r1, r9
   d86dc:	e7ee      	b.n	d86bc <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d86de:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d86e0:	2210      	movs	r2, #16
   d86e2:	a801      	add	r0, sp, #4
   d86e4:	f001 f95e 	bl	d99a4 <memset>
                    a.v = 6;
   d86e8:	2306      	movs	r3, #6
   d86ea:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d86ee:	ad01      	add	r5, sp, #4
   d86f0:	f104 0308 	add.w	r3, r4, #8
   d86f4:	3418      	adds	r4, #24
   d86f6:	6818      	ldr	r0, [r3, #0]
   d86f8:	6859      	ldr	r1, [r3, #4]
   d86fa:	462a      	mov	r2, r5
   d86fc:	c203      	stmia	r2!, {r0, r1}
   d86fe:	3308      	adds	r3, #8
   d8700:	42a3      	cmp	r3, r4
   d8702:	4615      	mov	r5, r2
   d8704:	d1f7      	bne.n	d86f6 <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d8706:	a901      	add	r1, sp, #4
   d8708:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d870a:	ad07      	add	r5, sp, #28
   d870c:	f7ff faa2 	bl	d7c54 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d8710:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8712:	1d3c      	adds	r4, r7, #4
   d8714:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8716:	682b      	ldr	r3, [r5, #0]
   d8718:	7023      	strb	r3, [r4, #0]
   d871a:	e7de      	b.n	d86da <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d871c:	9800      	ldr	r0, [sp, #0]
   d871e:	f7fd febd 	bl	d649c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d8722:	4638      	mov	r0, r7
   d8724:	b015      	add	sp, #84	; 0x54
   d8726:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d872c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d872c:	4b02      	ldr	r3, [pc, #8]	; (d8738 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d872e:	4a03      	ldr	r2, [pc, #12]	; (d873c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d8730:	601a      	str	r2, [r3, #0]
   d8732:	2200      	movs	r2, #0
   d8734:	605a      	str	r2, [r3, #4]

} // spark
   d8736:	4770      	bx	lr
   d8738:	2003e7c0 	.word	0x2003e7c0
   d873c:	000dc06c 	.word	0x000dc06c

000d8740 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d8740:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d8742:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d8744:	d902      	bls.n	d874c <pinAvailable+0xc>
    return false;
   d8746:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d8748:	b002      	add	sp, #8
   d874a:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d874c:	f1a0 030b 	sub.w	r3, r0, #11
   d8750:	2b02      	cmp	r3, #2
   d8752:	d81a      	bhi.n	d878a <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d8754:	4c17      	ldr	r4, [pc, #92]	; (d87b4 <pinAvailable+0x74>)
   d8756:	7821      	ldrb	r1, [r4, #0]
   d8758:	f3bf 8f5b 	dmb	ish
   d875c:	f011 0101 	ands.w	r1, r1, #1
   d8760:	d10b      	bne.n	d877a <pinAvailable+0x3a>
   d8762:	4620      	mov	r0, r4
   d8764:	9101      	str	r1, [sp, #4]
   d8766:	f7fb fc9e 	bl	d40a6 <__cxa_guard_acquire>
   d876a:	9901      	ldr	r1, [sp, #4]
   d876c:	b128      	cbz	r0, d877a <pinAvailable+0x3a>
   d876e:	4812      	ldr	r0, [pc, #72]	; (d87b8 <pinAvailable+0x78>)
   d8770:	f7fe f96e 	bl	d6a50 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d8774:	4620      	mov	r0, r4
   d8776:	f7fb fc9b 	bl	d40b0 <__cxa_guard_release>
   d877a:	4b0f      	ldr	r3, [pc, #60]	; (d87b8 <pinAvailable+0x78>)
   d877c:	7818      	ldrb	r0, [r3, #0]
   d877e:	f7fd fff5 	bl	d676c <hal_spi_is_enabled>
   d8782:	2800      	cmp	r0, #0
   d8784:	d1df      	bne.n	d8746 <pinAvailable+0x6>
  return true; // 'pin' is available
   d8786:	2001      	movs	r0, #1
   d8788:	e7de      	b.n	d8748 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d878a:	2801      	cmp	r0, #1
   d878c:	d809      	bhi.n	d87a2 <pinAvailable+0x62>
   d878e:	f000 f891 	bl	d88b4 <_Z19__fetch_global_Wirev>
   d8792:	2100      	movs	r1, #0
   d8794:	7c00      	ldrb	r0, [r0, #16]
   d8796:	f7fd ff89 	bl	d66ac <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d879a:	f080 0001 	eor.w	r0, r0, #1
   d879e:	b2c0      	uxtb	r0, r0
   d87a0:	e7d2      	b.n	d8748 <pinAvailable+0x8>
   d87a2:	3809      	subs	r0, #9
   d87a4:	2801      	cmp	r0, #1
   d87a6:	d8ee      	bhi.n	d8786 <pinAvailable+0x46>
   d87a8:	f7ff fba4 	bl	d7ef4 <_Z22__fetch_global_Serial1v>
   d87ac:	7c00      	ldrb	r0, [r0, #16]
   d87ae:	f7fd ff45 	bl	d663c <hal_usart_is_enabled>
   d87b2:	e7f2      	b.n	d879a <pinAvailable+0x5a>
   d87b4:	2003e7c8 	.word	0x2003e7c8
   d87b8:	2003e7cc 	.word	0x2003e7cc

000d87bc <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d87bc:	2823      	cmp	r0, #35	; 0x23
{
   d87be:	b538      	push	{r3, r4, r5, lr}
   d87c0:	4604      	mov	r4, r0
   d87c2:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d87c4:	d80a      	bhi.n	d87dc <pinMode+0x20>
   d87c6:	29ff      	cmp	r1, #255	; 0xff
   d87c8:	d008      	beq.n	d87dc <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d87ca:	f7ff ffb9 	bl	d8740 <pinAvailable>
   d87ce:	b128      	cbz	r0, d87dc <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d87d0:	4629      	mov	r1, r5
   d87d2:	4620      	mov	r0, r4
}
   d87d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d87d8:	f7fd be78 	b.w	d64cc <HAL_Pin_Mode>
}
   d87dc:	bd38      	pop	{r3, r4, r5, pc}

000d87de <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d87de:	b538      	push	{r3, r4, r5, lr}
   d87e0:	4604      	mov	r4, r0
   d87e2:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d87e4:	f7fd fe7a 	bl	d64dc <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d87e8:	28ff      	cmp	r0, #255	; 0xff
   d87ea:	d010      	beq.n	d880e <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d87ec:	2806      	cmp	r0, #6
   d87ee:	d804      	bhi.n	d87fa <digitalWrite+0x1c>
   d87f0:	234d      	movs	r3, #77	; 0x4d
   d87f2:	fa23 f000 	lsr.w	r0, r3, r0
   d87f6:	07c3      	lsls	r3, r0, #31
   d87f8:	d409      	bmi.n	d880e <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d87fa:	4620      	mov	r0, r4
   d87fc:	f7ff ffa0 	bl	d8740 <pinAvailable>
   d8800:	b128      	cbz	r0, d880e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d8802:	4629      	mov	r1, r5
   d8804:	4620      	mov	r0, r4
}
   d8806:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d880a:	f7fd be6f 	b.w	d64ec <HAL_GPIO_Write>
}
   d880e:	bd38      	pop	{r3, r4, r5, pc}

000d8810 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d8810:	b510      	push	{r4, lr}
   d8812:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d8814:	f7fd fe62 	bl	d64dc <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   d8818:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   d881a:	b2db      	uxtb	r3, r3
   d881c:	2b01      	cmp	r3, #1
   d881e:	d908      	bls.n	d8832 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d8820:	4620      	mov	r0, r4
   d8822:	f7ff ff8d 	bl	d8740 <pinAvailable>
   d8826:	b120      	cbz	r0, d8832 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d8828:	4620      	mov	r0, r4
}
   d882a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   d882e:	f7fd be65 	b.w	d64fc <HAL_GPIO_Read>
}
   d8832:	2000      	movs	r0, #0
   d8834:	bd10      	pop	{r4, pc}

000d8836 <_Z11analogWritetm>:
/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 * On Photon, DAC1 and DAC2 act as true analog outputs(values: 0 to 4095) using onchip DAC peripheral
 */
void analogWrite(pin_t pin, uint32_t value)
{
   d8836:	b538      	push	{r3, r4, r5, lr}
   d8838:	4604      	mov	r4, r0
   d883a:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
   d883c:	f7ff ff80 	bl	d8740 <pinAvailable>
   d8840:	b1f0      	cbz	r0, d8880 <_Z11analogWritetm+0x4a>
    {
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
   d8842:	2104      	movs	r1, #4
   d8844:	4620      	mov	r0, r4
   d8846:	f7fd fe39 	bl	d64bc <HAL_Validate_Pin_Function>
   d884a:	2804      	cmp	r0, #4
   d884c:	d105      	bne.n	d885a <_Z11analogWritetm+0x24>
    {
        HAL_DAC_Write(pin, value);
   d884e:	b2a9      	uxth	r1, r5
   d8850:	4620      	mov	r0, r4
            return;
        }

        hal_pwm_write_ext(pin, value);
    }
}
   d8852:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        HAL_DAC_Write(pin, value);
   d8856:	f7fd be69 	b.w	d652c <HAL_DAC_Write>
    else if (HAL_Validate_Pin_Function(pin, PF_TIMER) == PF_TIMER)
   d885a:	2102      	movs	r1, #2
   d885c:	4620      	mov	r0, r4
   d885e:	f7fd fe2d 	bl	d64bc <HAL_Validate_Pin_Function>
   d8862:	2802      	cmp	r0, #2
   d8864:	d10c      	bne.n	d8880 <_Z11analogWritetm+0x4a>
        PinMode mode = HAL_Get_Pin_Mode(pin);
   d8866:	4620      	mov	r0, r4
   d8868:	f7fd fe38 	bl	d64dc <HAL_Get_Pin_Mode>
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
   d886c:	2801      	cmp	r0, #1
   d886e:	d001      	beq.n	d8874 <_Z11analogWritetm+0x3e>
   d8870:	2804      	cmp	r0, #4
   d8872:	d105      	bne.n	d8880 <_Z11analogWritetm+0x4a>
        hal_pwm_write_ext(pin, value);
   d8874:	4629      	mov	r1, r5
   d8876:	4620      	mov	r0, r4
}
   d8878:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        hal_pwm_write_ext(pin, value);
   d887c:	f7fd be5e 	b.w	d653c <hal_pwm_write_ext>
}
   d8880:	bd38      	pop	{r3, r4, r5, pc}
	...

000d8884 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d8884:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d8886:	2300      	movs	r3, #0
   d8888:	2520      	movs	r5, #32
   d888a:	8043      	strh	r3, [r0, #2]
   d888c:	2314      	movs	r3, #20
{
   d888e:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d8890:	8003      	strh	r3, [r0, #0]
   d8892:	6085      	str	r5, [r0, #8]
   d8894:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d8896:	4906      	ldr	r1, [pc, #24]	; (d88b0 <_Z17acquireWireBufferv+0x2c>)
   d8898:	4628      	mov	r0, r5
   d889a:	f000 f83a 	bl	d8912 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d889e:	4904      	ldr	r1, [pc, #16]	; (d88b0 <_Z17acquireWireBufferv+0x2c>)
	};
   d88a0:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d88a2:	4628      	mov	r0, r5
   d88a4:	f000 f835 	bl	d8912 <_ZnajRKSt9nothrow_t>
	};
   d88a8:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d88aa:	4620      	mov	r0, r4
   d88ac:	bd38      	pop	{r3, r4, r5, pc}
   d88ae:	bf00      	nop
   d88b0:	000dc098 	.word	0x000dc098

000d88b4 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d88b4:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d88b6:	4d0f      	ldr	r5, [pc, #60]	; (d88f4 <_Z19__fetch_global_Wirev+0x40>)
   d88b8:	7829      	ldrb	r1, [r5, #0]
   d88ba:	f3bf 8f5b 	dmb	ish
   d88be:	f011 0401 	ands.w	r4, r1, #1
{
   d88c2:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d88c4:	d113      	bne.n	d88ee <_Z19__fetch_global_Wirev+0x3a>
   d88c6:	4628      	mov	r0, r5
   d88c8:	f7fb fbed 	bl	d40a6 <__cxa_guard_acquire>
   d88cc:	b178      	cbz	r0, d88ee <_Z19__fetch_global_Wirev+0x3a>
   d88ce:	a801      	add	r0, sp, #4
   d88d0:	f7ff ffd8 	bl	d8884 <_Z17acquireWireBufferv>
   d88d4:	aa01      	add	r2, sp, #4
   d88d6:	4621      	mov	r1, r4
   d88d8:	4807      	ldr	r0, [pc, #28]	; (d88f8 <_Z19__fetch_global_Wirev+0x44>)
   d88da:	f7ff fb75 	bl	d7fc8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d88de:	4628      	mov	r0, r5
   d88e0:	f7fb fbe6 	bl	d40b0 <__cxa_guard_release>
   d88e4:	4a05      	ldr	r2, [pc, #20]	; (d88fc <_Z19__fetch_global_Wirev+0x48>)
   d88e6:	4906      	ldr	r1, [pc, #24]	; (d8900 <_Z19__fetch_global_Wirev+0x4c>)
   d88e8:	4803      	ldr	r0, [pc, #12]	; (d88f8 <_Z19__fetch_global_Wirev+0x44>)
   d88ea:	f000 f80b 	bl	d8904 <__aeabi_atexit>
	return wire;
}
   d88ee:	4802      	ldr	r0, [pc, #8]	; (d88f8 <_Z19__fetch_global_Wirev+0x44>)
   d88f0:	b007      	add	sp, #28
   d88f2:	bd30      	pop	{r4, r5, pc}
   d88f4:	2003e7d8 	.word	0x2003e7d8
   d88f8:	2003e7dc 	.word	0x2003e7dc
   d88fc:	2003e468 	.word	0x2003e468
   d8900:	000d7f71 	.word	0x000d7f71

000d8904 <__aeabi_atexit>:
   d8904:	460b      	mov	r3, r1
   d8906:	4601      	mov	r1, r0
   d8908:	4618      	mov	r0, r3
   d890a:	f001 b82f 	b.w	d996c <__cxa_atexit>

000d890e <_ZdlPvj>:
   d890e:	f7fb bbc6 	b.w	d409e <_ZdlPv>

000d8912 <_ZnajRKSt9nothrow_t>:
   d8912:	f7fb bbc2 	b.w	d409a <_Znaj>

000d8916 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>:
   d8916:	68c3      	ldr	r3, [r0, #12]
   d8918:	689a      	ldr	r2, [r3, #8]
   d891a:	60c2      	str	r2, [r0, #12]
   d891c:	b510      	push	{r4, lr}
   d891e:	b102      	cbz	r2, d8922 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0xc>
   d8920:	6050      	str	r0, [r2, #4]
   d8922:	6842      	ldr	r2, [r0, #4]
   d8924:	605a      	str	r2, [r3, #4]
   d8926:	680c      	ldr	r4, [r1, #0]
   d8928:	4284      	cmp	r4, r0
   d892a:	d103      	bne.n	d8934 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x1e>
   d892c:	600b      	str	r3, [r1, #0]
   d892e:	6098      	str	r0, [r3, #8]
   d8930:	6043      	str	r3, [r0, #4]
   d8932:	bd10      	pop	{r4, pc}
   d8934:	6891      	ldr	r1, [r2, #8]
   d8936:	4281      	cmp	r1, r0
   d8938:	bf0c      	ite	eq
   d893a:	6093      	streq	r3, [r2, #8]
   d893c:	60d3      	strne	r3, [r2, #12]
   d893e:	e7f6      	b.n	d892e <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x18>

000d8940 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>:
   d8940:	6883      	ldr	r3, [r0, #8]
   d8942:	68da      	ldr	r2, [r3, #12]
   d8944:	6082      	str	r2, [r0, #8]
   d8946:	b510      	push	{r4, lr}
   d8948:	b102      	cbz	r2, d894c <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0xc>
   d894a:	6050      	str	r0, [r2, #4]
   d894c:	6842      	ldr	r2, [r0, #4]
   d894e:	605a      	str	r2, [r3, #4]
   d8950:	680c      	ldr	r4, [r1, #0]
   d8952:	4284      	cmp	r4, r0
   d8954:	d103      	bne.n	d895e <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x1e>
   d8956:	600b      	str	r3, [r1, #0]
   d8958:	60d8      	str	r0, [r3, #12]
   d895a:	6043      	str	r3, [r0, #4]
   d895c:	bd10      	pop	{r4, pc}
   d895e:	68d1      	ldr	r1, [r2, #12]
   d8960:	4281      	cmp	r1, r0
   d8962:	bf0c      	ite	eq
   d8964:	60d3      	streq	r3, [r2, #12]
   d8966:	6093      	strne	r3, [r2, #8]
   d8968:	e7f6      	b.n	d8958 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x18>

000d896a <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>:
   d896a:	7803      	ldrb	r3, [r0, #0]
   d896c:	b933      	cbnz	r3, d897c <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
   d896e:	6843      	ldr	r3, [r0, #4]
   d8970:	685b      	ldr	r3, [r3, #4]
   d8972:	4283      	cmp	r3, r0
   d8974:	d102      	bne.n	d897c <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
   d8976:	68db      	ldr	r3, [r3, #12]
   d8978:	4618      	mov	r0, r3
   d897a:	4770      	bx	lr
   d897c:	6882      	ldr	r2, [r0, #8]
   d897e:	b122      	cbz	r2, d898a <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x20>
   d8980:	4613      	mov	r3, r2
   d8982:	68d2      	ldr	r2, [r2, #12]
   d8984:	2a00      	cmp	r2, #0
   d8986:	d1fb      	bne.n	d8980 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x16>
   d8988:	e7f6      	b.n	d8978 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
   d898a:	6843      	ldr	r3, [r0, #4]
   d898c:	689a      	ldr	r2, [r3, #8]
   d898e:	4282      	cmp	r2, r0
   d8990:	d1f2      	bne.n	d8978 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
   d8992:	4618      	mov	r0, r3
   d8994:	685b      	ldr	r3, [r3, #4]
   d8996:	e7f9      	b.n	d898c <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x22>

000d8998 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>:
   d8998:	68c3      	ldr	r3, [r0, #12]
   d899a:	b123      	cbz	r3, d89a6 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0xe>
   d899c:	4618      	mov	r0, r3
   d899e:	689b      	ldr	r3, [r3, #8]
   d89a0:	2b00      	cmp	r3, #0
   d89a2:	d1fb      	bne.n	d899c <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x4>
   d89a4:	4770      	bx	lr
   d89a6:	6843      	ldr	r3, [r0, #4]
   d89a8:	68da      	ldr	r2, [r3, #12]
   d89aa:	4282      	cmp	r2, r0
   d89ac:	d102      	bne.n	d89b4 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x1c>
   d89ae:	4618      	mov	r0, r3
   d89b0:	685b      	ldr	r3, [r3, #4]
   d89b2:	e7f9      	b.n	d89a8 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x10>
   d89b4:	68c2      	ldr	r2, [r0, #12]
   d89b6:	4293      	cmp	r3, r2
   d89b8:	bf18      	it	ne
   d89ba:	4618      	movne	r0, r3
   d89bc:	4770      	bx	lr

000d89be <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>:
   d89be:	f7ff bfd4 	b.w	d896a <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

000d89c2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>:
   d89c2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d89c6:	461e      	mov	r6, r3
   d89c8:	f103 0804 	add.w	r8, r3, #4
   d89cc:	2300      	movs	r3, #0
   d89ce:	e9c1 3302 	strd	r3, r3, [r1, #8]
   d89d2:	460c      	mov	r4, r1
   d89d4:	604a      	str	r2, [r1, #4]
   d89d6:	700b      	strb	r3, [r1, #0]
   d89d8:	b300      	cbz	r0, d8a1c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x5a>
   d89da:	4296      	cmp	r6, r2
   d89dc:	6091      	str	r1, [r2, #8]
   d89de:	d118      	bne.n	d8a12 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x50>
   d89e0:	6071      	str	r1, [r6, #4]
   d89e2:	60f4      	str	r4, [r6, #12]
   d89e4:	2701      	movs	r7, #1
   d89e6:	f04f 0900 	mov.w	r9, #0
   d89ea:	6873      	ldr	r3, [r6, #4]
   d89ec:	42a3      	cmp	r3, r4
   d89ee:	d03f      	beq.n	d8a70 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xae>
   d89f0:	6860      	ldr	r0, [r4, #4]
   d89f2:	7802      	ldrb	r2, [r0, #0]
   d89f4:	2a00      	cmp	r2, #0
   d89f6:	d13c      	bne.n	d8a72 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xb0>
   d89f8:	6845      	ldr	r5, [r0, #4]
   d89fa:	68ab      	ldr	r3, [r5, #8]
   d89fc:	4298      	cmp	r0, r3
   d89fe:	d123      	bne.n	d8a48 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x86>
   d8a00:	68eb      	ldr	r3, [r5, #12]
   d8a02:	b183      	cbz	r3, d8a26 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
   d8a04:	781a      	ldrb	r2, [r3, #0]
   d8a06:	b972      	cbnz	r2, d8a26 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
   d8a08:	7007      	strb	r7, [r0, #0]
   d8a0a:	701f      	strb	r7, [r3, #0]
   d8a0c:	702a      	strb	r2, [r5, #0]
   d8a0e:	462c      	mov	r4, r5
   d8a10:	e7eb      	b.n	d89ea <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x28>
   d8a12:	68b3      	ldr	r3, [r6, #8]
   d8a14:	4293      	cmp	r3, r2
   d8a16:	d1e5      	bne.n	d89e4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
   d8a18:	60b1      	str	r1, [r6, #8]
   d8a1a:	e7e3      	b.n	d89e4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
   d8a1c:	60d1      	str	r1, [r2, #12]
   d8a1e:	68f3      	ldr	r3, [r6, #12]
   d8a20:	4293      	cmp	r3, r2
   d8a22:	d1df      	bne.n	d89e4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
   d8a24:	e7dd      	b.n	d89e2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x20>
   d8a26:	68c3      	ldr	r3, [r0, #12]
   d8a28:	42a3      	cmp	r3, r4
   d8a2a:	d103      	bne.n	d8a34 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x72>
   d8a2c:	4641      	mov	r1, r8
   d8a2e:	f7ff ff72 	bl	d8916 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
   d8a32:	4604      	mov	r4, r0
   d8a34:	6863      	ldr	r3, [r4, #4]
   d8a36:	4641      	mov	r1, r8
   d8a38:	701f      	strb	r7, [r3, #0]
   d8a3a:	4628      	mov	r0, r5
   d8a3c:	f885 9000 	strb.w	r9, [r5]
   d8a40:	f7ff ff7e 	bl	d8940 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
   d8a44:	4625      	mov	r5, r4
   d8a46:	e7e2      	b.n	d8a0e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4c>
   d8a48:	b113      	cbz	r3, d8a50 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x8e>
   d8a4a:	781a      	ldrb	r2, [r3, #0]
   d8a4c:	2a00      	cmp	r2, #0
   d8a4e:	d0db      	beq.n	d8a08 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x46>
   d8a50:	6883      	ldr	r3, [r0, #8]
   d8a52:	42a3      	cmp	r3, r4
   d8a54:	d103      	bne.n	d8a5e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x9c>
   d8a56:	4641      	mov	r1, r8
   d8a58:	f7ff ff72 	bl	d8940 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
   d8a5c:	4604      	mov	r4, r0
   d8a5e:	6863      	ldr	r3, [r4, #4]
   d8a60:	4641      	mov	r1, r8
   d8a62:	701f      	strb	r7, [r3, #0]
   d8a64:	4628      	mov	r0, r5
   d8a66:	f885 9000 	strb.w	r9, [r5]
   d8a6a:	f7ff ff54 	bl	d8916 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
   d8a6e:	e7e9      	b.n	d8a44 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x82>
   d8a70:	4623      	mov	r3, r4
   d8a72:	2201      	movs	r2, #1
   d8a74:	701a      	strb	r2, [r3, #0]
   d8a76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d8a7a <_ZSt25__throw_bad_function_callv>:
   d8a7a:	b508      	push	{r3, lr}
   d8a7c:	f7fd ff8a 	bl	d6994 <abort>

000d8a80 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   d8a80:	4901      	ldr	r1, [pc, #4]	; (d8a88 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   d8a82:	f000 b8f9 	b.w	d8c78 <_ZNKSt9type_infoeqERKS_>
   d8a86:	bf00      	nop
   d8a88:	000dc0b4 	.word	0x000dc0b4

000d8a8c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   d8a8c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d8a8e:	2400      	movs	r4, #0
   d8a90:	2310      	movs	r3, #16
   d8a92:	e9cd 3402 	strd	r3, r4, [sp, #8]
   d8a96:	6803      	ldr	r3, [r0, #0]
   d8a98:	9400      	str	r4, [sp, #0]
   d8a9a:	699e      	ldr	r6, [r3, #24]
   d8a9c:	f88d 4004 	strb.w	r4, [sp, #4]
   d8aa0:	4615      	mov	r5, r2
   d8aa2:	466b      	mov	r3, sp
   d8aa4:	6812      	ldr	r2, [r2, #0]
   d8aa6:	47b0      	blx	r6
   d8aa8:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d8aac:	f003 0306 	and.w	r3, r3, #6
   d8ab0:	2b06      	cmp	r3, #6
   d8ab2:	bf03      	ittte	eq
   d8ab4:	9b00      	ldreq	r3, [sp, #0]
   d8ab6:	602b      	streq	r3, [r5, #0]
   d8ab8:	2001      	moveq	r0, #1
   d8aba:	4620      	movne	r0, r4
   d8abc:	b004      	add	sp, #16
   d8abe:	bd70      	pop	{r4, r5, r6, pc}

000d8ac0 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   d8ac0:	9800      	ldr	r0, [sp, #0]
   d8ac2:	4290      	cmp	r0, r2
   d8ac4:	bf14      	ite	ne
   d8ac6:	2001      	movne	r0, #1
   d8ac8:	2006      	moveq	r0, #6
   d8aca:	4770      	bx	lr

000d8acc <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   d8acc:	b510      	push	{r4, lr}
   d8ace:	4b03      	ldr	r3, [pc, #12]	; (d8adc <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   d8ad0:	6003      	str	r3, [r0, #0]
   d8ad2:	4604      	mov	r4, r0
   d8ad4:	f000 f8cd 	bl	d8c72 <_ZNSt9type_infoD1Ev>
   d8ad8:	4620      	mov	r0, r4
   d8ada:	bd10      	pop	{r4, pc}
   d8adc:	000dc0f4 	.word	0x000dc0f4

000d8ae0 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   d8ae0:	b510      	push	{r4, lr}
   d8ae2:	4604      	mov	r4, r0
   d8ae4:	f7ff fff2 	bl	d8acc <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d8ae8:	4620      	mov	r0, r4
   d8aea:	2108      	movs	r1, #8
   d8aec:	f7ff ff0f 	bl	d890e <_ZdlPvj>
   d8af0:	4620      	mov	r0, r4
   d8af2:	bd10      	pop	{r4, pc}

000d8af4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   d8af4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8af8:	461f      	mov	r7, r3
   d8afa:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   d8afe:	f8dd 8018 	ldr.w	r8, [sp, #24]
   d8b02:	4598      	cmp	r8, r3
   d8b04:	4606      	mov	r6, r0
   d8b06:	4615      	mov	r5, r2
   d8b08:	d107      	bne.n	d8b1a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d8b0a:	9907      	ldr	r1, [sp, #28]
   d8b0c:	f000 f8b4 	bl	d8c78 <_ZNKSt9type_infoeqERKS_>
   d8b10:	b118      	cbz	r0, d8b1a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d8b12:	7165      	strb	r5, [r4, #5]
   d8b14:	2000      	movs	r0, #0
   d8b16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d8b1a:	4639      	mov	r1, r7
   d8b1c:	4630      	mov	r0, r6
   d8b1e:	f000 f8ab 	bl	d8c78 <_ZNKSt9type_infoeqERKS_>
   d8b22:	2800      	cmp	r0, #0
   d8b24:	d0f6      	beq.n	d8b14 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   d8b26:	2301      	movs	r3, #1
   d8b28:	f8c4 8000 	str.w	r8, [r4]
   d8b2c:	7125      	strb	r5, [r4, #4]
   d8b2e:	71a3      	strb	r3, [r4, #6]
   d8b30:	e7f0      	b.n	d8b14 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000d8b32 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   d8b32:	b538      	push	{r3, r4, r5, lr}
   d8b34:	4615      	mov	r5, r2
   d8b36:	461c      	mov	r4, r3
   d8b38:	f000 f89e 	bl	d8c78 <_ZNKSt9type_infoeqERKS_>
   d8b3c:	b120      	cbz	r0, d8b48 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   d8b3e:	2308      	movs	r3, #8
   d8b40:	60e3      	str	r3, [r4, #12]
   d8b42:	2306      	movs	r3, #6
   d8b44:	6025      	str	r5, [r4, #0]
   d8b46:	7123      	strb	r3, [r4, #4]
   d8b48:	bd38      	pop	{r3, r4, r5, pc}

000d8b4a <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   d8b4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d8b4c:	4605      	mov	r5, r0
   d8b4e:	460c      	mov	r4, r1
   d8b50:	9201      	str	r2, [sp, #4]
   d8b52:	461e      	mov	r6, r3
   d8b54:	f000 f890 	bl	d8c78 <_ZNKSt9type_infoeqERKS_>
   d8b58:	b950      	cbnz	r0, d8b70 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d8b5a:	2e03      	cmp	r6, #3
   d8b5c:	d808      	bhi.n	d8b70 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d8b5e:	6823      	ldr	r3, [r4, #0]
   d8b60:	9a01      	ldr	r2, [sp, #4]
   d8b62:	695b      	ldr	r3, [r3, #20]
   d8b64:	4629      	mov	r1, r5
   d8b66:	4620      	mov	r0, r4
   d8b68:	b002      	add	sp, #8
   d8b6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d8b6e:	4718      	bx	r3
   d8b70:	b002      	add	sp, #8
   d8b72:	bd70      	pop	{r4, r5, r6, pc}

000d8b74 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   d8b74:	b510      	push	{r4, lr}
   d8b76:	4b03      	ldr	r3, [pc, #12]	; (d8b84 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   d8b78:	6003      	str	r3, [r0, #0]
   d8b7a:	4604      	mov	r4, r0
   d8b7c:	f7ff ffa6 	bl	d8acc <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d8b80:	4620      	mov	r0, r4
   d8b82:	bd10      	pop	{r4, pc}
   d8b84:	000dc154 	.word	0x000dc154

000d8b88 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   d8b88:	b510      	push	{r4, lr}
   d8b8a:	4604      	mov	r4, r0
   d8b8c:	f7ff fff2 	bl	d8b74 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   d8b90:	4620      	mov	r0, r4
   d8b92:	210c      	movs	r1, #12
   d8b94:	f7ff febb 	bl	d890e <_ZdlPvj>
   d8b98:	4620      	mov	r0, r4
   d8b9a:	bd10      	pop	{r4, pc}

000d8b9c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   d8b9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d8b9e:	9f08      	ldr	r7, [sp, #32]
   d8ba0:	4297      	cmp	r7, r2
   d8ba2:	4605      	mov	r5, r0
   d8ba4:	460e      	mov	r6, r1
   d8ba6:	4614      	mov	r4, r2
   d8ba8:	d00a      	beq.n	d8bc0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   d8baa:	68a8      	ldr	r0, [r5, #8]
   d8bac:	6802      	ldr	r2, [r0, #0]
   d8bae:	9708      	str	r7, [sp, #32]
   d8bb0:	6a15      	ldr	r5, [r2, #32]
   d8bb2:	4631      	mov	r1, r6
   d8bb4:	4622      	mov	r2, r4
   d8bb6:	46ac      	mov	ip, r5
   d8bb8:	b003      	add	sp, #12
   d8bba:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d8bbe:	4760      	bx	ip
   d8bc0:	4619      	mov	r1, r3
   d8bc2:	9301      	str	r3, [sp, #4]
   d8bc4:	f000 f858 	bl	d8c78 <_ZNKSt9type_infoeqERKS_>
   d8bc8:	9b01      	ldr	r3, [sp, #4]
   d8bca:	2800      	cmp	r0, #0
   d8bcc:	d0ed      	beq.n	d8baa <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   d8bce:	2006      	movs	r0, #6
   d8bd0:	b003      	add	sp, #12
   d8bd2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d8bd4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   d8bd4:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8bd8:	460d      	mov	r5, r1
   d8bda:	4619      	mov	r1, r3
   d8bdc:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   d8be0:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   d8be4:	4681      	mov	r9, r0
   d8be6:	4617      	mov	r7, r2
   d8be8:	4698      	mov	r8, r3
   d8bea:	f000 f845 	bl	d8c78 <_ZNKSt9type_infoeqERKS_>
   d8bee:	b190      	cbz	r0, d8c16 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   d8bf0:	2d00      	cmp	r5, #0
   d8bf2:	6034      	str	r4, [r6, #0]
   d8bf4:	7137      	strb	r7, [r6, #4]
   d8bf6:	db09      	blt.n	d8c0c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   d8bf8:	1961      	adds	r1, r4, r5
   d8bfa:	458a      	cmp	sl, r1
   d8bfc:	bf0c      	ite	eq
   d8bfe:	2106      	moveq	r1, #6
   d8c00:	2101      	movne	r1, #1
   d8c02:	71b1      	strb	r1, [r6, #6]
   d8c04:	2000      	movs	r0, #0
   d8c06:	b001      	add	sp, #4
   d8c08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8c0c:	3502      	adds	r5, #2
   d8c0e:	d1f9      	bne.n	d8c04 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d8c10:	2301      	movs	r3, #1
   d8c12:	71b3      	strb	r3, [r6, #6]
   d8c14:	e7f6      	b.n	d8c04 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d8c16:	4554      	cmp	r4, sl
   d8c18:	d106      	bne.n	d8c28 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d8c1a:	4659      	mov	r1, fp
   d8c1c:	4648      	mov	r0, r9
   d8c1e:	f000 f82b 	bl	d8c78 <_ZNKSt9type_infoeqERKS_>
   d8c22:	b108      	cbz	r0, d8c28 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d8c24:	7177      	strb	r7, [r6, #5]
   d8c26:	e7ed      	b.n	d8c04 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d8c28:	f8d9 0008 	ldr.w	r0, [r9, #8]
   d8c2c:	6803      	ldr	r3, [r0, #0]
   d8c2e:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   d8c32:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   d8c36:	69dc      	ldr	r4, [r3, #28]
   d8c38:	463a      	mov	r2, r7
   d8c3a:	4643      	mov	r3, r8
   d8c3c:	4629      	mov	r1, r5
   d8c3e:	46a4      	mov	ip, r4
   d8c40:	b001      	add	sp, #4
   d8c42:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8c46:	4760      	bx	ip

000d8c48 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   d8c48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8c4c:	4607      	mov	r7, r0
   d8c4e:	460c      	mov	r4, r1
   d8c50:	4615      	mov	r5, r2
   d8c52:	461e      	mov	r6, r3
   d8c54:	f7ff ff6d 	bl	d8b32 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   d8c58:	b948      	cbnz	r0, d8c6e <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   d8c5a:	68b8      	ldr	r0, [r7, #8]
   d8c5c:	6803      	ldr	r3, [r0, #0]
   d8c5e:	699f      	ldr	r7, [r3, #24]
   d8c60:	462a      	mov	r2, r5
   d8c62:	4633      	mov	r3, r6
   d8c64:	4621      	mov	r1, r4
   d8c66:	46bc      	mov	ip, r7
   d8c68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d8c6c:	4760      	bx	ip
   d8c6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d8c72 <_ZNSt9type_infoD1Ev>:
   d8c72:	4770      	bx	lr

000d8c74 <_ZNKSt9type_info14__is_pointer_pEv>:
   d8c74:	2000      	movs	r0, #0
   d8c76:	4770      	bx	lr

000d8c78 <_ZNKSt9type_infoeqERKS_>:
   d8c78:	4281      	cmp	r1, r0
   d8c7a:	b508      	push	{r3, lr}
   d8c7c:	d00e      	beq.n	d8c9c <_ZNKSt9type_infoeqERKS_+0x24>
   d8c7e:	6840      	ldr	r0, [r0, #4]
   d8c80:	7803      	ldrb	r3, [r0, #0]
   d8c82:	2b2a      	cmp	r3, #42	; 0x2a
   d8c84:	d00c      	beq.n	d8ca0 <_ZNKSt9type_infoeqERKS_+0x28>
   d8c86:	6849      	ldr	r1, [r1, #4]
   d8c88:	780b      	ldrb	r3, [r1, #0]
   d8c8a:	2b2a      	cmp	r3, #42	; 0x2a
   d8c8c:	bf08      	it	eq
   d8c8e:	3101      	addeq	r1, #1
   d8c90:	f000 fec1 	bl	d9a16 <strcmp>
   d8c94:	fab0 f080 	clz	r0, r0
   d8c98:	0940      	lsrs	r0, r0, #5
   d8c9a:	bd08      	pop	{r3, pc}
   d8c9c:	2001      	movs	r0, #1
   d8c9e:	e7fc      	b.n	d8c9a <_ZNKSt9type_infoeqERKS_+0x22>
   d8ca0:	2000      	movs	r0, #0
   d8ca2:	e7fa      	b.n	d8c9a <_ZNKSt9type_infoeqERKS_+0x22>

000d8ca4 <__aeabi_drsub>:
   d8ca4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d8ca8:	e002      	b.n	d8cb0 <__adddf3>
   d8caa:	bf00      	nop

000d8cac <__aeabi_dsub>:
   d8cac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d8cb0 <__adddf3>:
   d8cb0:	b530      	push	{r4, r5, lr}
   d8cb2:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d8cb6:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d8cba:	ea94 0f05 	teq	r4, r5
   d8cbe:	bf08      	it	eq
   d8cc0:	ea90 0f02 	teqeq	r0, r2
   d8cc4:	bf1f      	itttt	ne
   d8cc6:	ea54 0c00 	orrsne.w	ip, r4, r0
   d8cca:	ea55 0c02 	orrsne.w	ip, r5, r2
   d8cce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d8cd2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d8cd6:	f000 80e2 	beq.w	d8e9e <__adddf3+0x1ee>
   d8cda:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d8cde:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d8ce2:	bfb8      	it	lt
   d8ce4:	426d      	neglt	r5, r5
   d8ce6:	dd0c      	ble.n	d8d02 <__adddf3+0x52>
   d8ce8:	442c      	add	r4, r5
   d8cea:	ea80 0202 	eor.w	r2, r0, r2
   d8cee:	ea81 0303 	eor.w	r3, r1, r3
   d8cf2:	ea82 0000 	eor.w	r0, r2, r0
   d8cf6:	ea83 0101 	eor.w	r1, r3, r1
   d8cfa:	ea80 0202 	eor.w	r2, r0, r2
   d8cfe:	ea81 0303 	eor.w	r3, r1, r3
   d8d02:	2d36      	cmp	r5, #54	; 0x36
   d8d04:	bf88      	it	hi
   d8d06:	bd30      	pophi	{r4, r5, pc}
   d8d08:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d8d0c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d8d10:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d8d14:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d8d18:	d002      	beq.n	d8d20 <__adddf3+0x70>
   d8d1a:	4240      	negs	r0, r0
   d8d1c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d8d20:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d8d24:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d8d28:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d8d2c:	d002      	beq.n	d8d34 <__adddf3+0x84>
   d8d2e:	4252      	negs	r2, r2
   d8d30:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d8d34:	ea94 0f05 	teq	r4, r5
   d8d38:	f000 80a7 	beq.w	d8e8a <__adddf3+0x1da>
   d8d3c:	f1a4 0401 	sub.w	r4, r4, #1
   d8d40:	f1d5 0e20 	rsbs	lr, r5, #32
   d8d44:	db0d      	blt.n	d8d62 <__adddf3+0xb2>
   d8d46:	fa02 fc0e 	lsl.w	ip, r2, lr
   d8d4a:	fa22 f205 	lsr.w	r2, r2, r5
   d8d4e:	1880      	adds	r0, r0, r2
   d8d50:	f141 0100 	adc.w	r1, r1, #0
   d8d54:	fa03 f20e 	lsl.w	r2, r3, lr
   d8d58:	1880      	adds	r0, r0, r2
   d8d5a:	fa43 f305 	asr.w	r3, r3, r5
   d8d5e:	4159      	adcs	r1, r3
   d8d60:	e00e      	b.n	d8d80 <__adddf3+0xd0>
   d8d62:	f1a5 0520 	sub.w	r5, r5, #32
   d8d66:	f10e 0e20 	add.w	lr, lr, #32
   d8d6a:	2a01      	cmp	r2, #1
   d8d6c:	fa03 fc0e 	lsl.w	ip, r3, lr
   d8d70:	bf28      	it	cs
   d8d72:	f04c 0c02 	orrcs.w	ip, ip, #2
   d8d76:	fa43 f305 	asr.w	r3, r3, r5
   d8d7a:	18c0      	adds	r0, r0, r3
   d8d7c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d8d80:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8d84:	d507      	bpl.n	d8d96 <__adddf3+0xe6>
   d8d86:	f04f 0e00 	mov.w	lr, #0
   d8d8a:	f1dc 0c00 	rsbs	ip, ip, #0
   d8d8e:	eb7e 0000 	sbcs.w	r0, lr, r0
   d8d92:	eb6e 0101 	sbc.w	r1, lr, r1
   d8d96:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d8d9a:	d31b      	bcc.n	d8dd4 <__adddf3+0x124>
   d8d9c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d8da0:	d30c      	bcc.n	d8dbc <__adddf3+0x10c>
   d8da2:	0849      	lsrs	r1, r1, #1
   d8da4:	ea5f 0030 	movs.w	r0, r0, rrx
   d8da8:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d8dac:	f104 0401 	add.w	r4, r4, #1
   d8db0:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d8db4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d8db8:	f080 809a 	bcs.w	d8ef0 <__adddf3+0x240>
   d8dbc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d8dc0:	bf08      	it	eq
   d8dc2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d8dc6:	f150 0000 	adcs.w	r0, r0, #0
   d8dca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8dce:	ea41 0105 	orr.w	r1, r1, r5
   d8dd2:	bd30      	pop	{r4, r5, pc}
   d8dd4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d8dd8:	4140      	adcs	r0, r0
   d8dda:	eb41 0101 	adc.w	r1, r1, r1
   d8dde:	3c01      	subs	r4, #1
   d8de0:	bf28      	it	cs
   d8de2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d8de6:	d2e9      	bcs.n	d8dbc <__adddf3+0x10c>
   d8de8:	f091 0f00 	teq	r1, #0
   d8dec:	bf04      	itt	eq
   d8dee:	4601      	moveq	r1, r0
   d8df0:	2000      	moveq	r0, #0
   d8df2:	fab1 f381 	clz	r3, r1
   d8df6:	bf08      	it	eq
   d8df8:	3320      	addeq	r3, #32
   d8dfa:	f1a3 030b 	sub.w	r3, r3, #11
   d8dfe:	f1b3 0220 	subs.w	r2, r3, #32
   d8e02:	da0c      	bge.n	d8e1e <__adddf3+0x16e>
   d8e04:	320c      	adds	r2, #12
   d8e06:	dd08      	ble.n	d8e1a <__adddf3+0x16a>
   d8e08:	f102 0c14 	add.w	ip, r2, #20
   d8e0c:	f1c2 020c 	rsb	r2, r2, #12
   d8e10:	fa01 f00c 	lsl.w	r0, r1, ip
   d8e14:	fa21 f102 	lsr.w	r1, r1, r2
   d8e18:	e00c      	b.n	d8e34 <__adddf3+0x184>
   d8e1a:	f102 0214 	add.w	r2, r2, #20
   d8e1e:	bfd8      	it	le
   d8e20:	f1c2 0c20 	rsble	ip, r2, #32
   d8e24:	fa01 f102 	lsl.w	r1, r1, r2
   d8e28:	fa20 fc0c 	lsr.w	ip, r0, ip
   d8e2c:	bfdc      	itt	le
   d8e2e:	ea41 010c 	orrle.w	r1, r1, ip
   d8e32:	4090      	lslle	r0, r2
   d8e34:	1ae4      	subs	r4, r4, r3
   d8e36:	bfa2      	ittt	ge
   d8e38:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d8e3c:	4329      	orrge	r1, r5
   d8e3e:	bd30      	popge	{r4, r5, pc}
   d8e40:	ea6f 0404 	mvn.w	r4, r4
   d8e44:	3c1f      	subs	r4, #31
   d8e46:	da1c      	bge.n	d8e82 <__adddf3+0x1d2>
   d8e48:	340c      	adds	r4, #12
   d8e4a:	dc0e      	bgt.n	d8e6a <__adddf3+0x1ba>
   d8e4c:	f104 0414 	add.w	r4, r4, #20
   d8e50:	f1c4 0220 	rsb	r2, r4, #32
   d8e54:	fa20 f004 	lsr.w	r0, r0, r4
   d8e58:	fa01 f302 	lsl.w	r3, r1, r2
   d8e5c:	ea40 0003 	orr.w	r0, r0, r3
   d8e60:	fa21 f304 	lsr.w	r3, r1, r4
   d8e64:	ea45 0103 	orr.w	r1, r5, r3
   d8e68:	bd30      	pop	{r4, r5, pc}
   d8e6a:	f1c4 040c 	rsb	r4, r4, #12
   d8e6e:	f1c4 0220 	rsb	r2, r4, #32
   d8e72:	fa20 f002 	lsr.w	r0, r0, r2
   d8e76:	fa01 f304 	lsl.w	r3, r1, r4
   d8e7a:	ea40 0003 	orr.w	r0, r0, r3
   d8e7e:	4629      	mov	r1, r5
   d8e80:	bd30      	pop	{r4, r5, pc}
   d8e82:	fa21 f004 	lsr.w	r0, r1, r4
   d8e86:	4629      	mov	r1, r5
   d8e88:	bd30      	pop	{r4, r5, pc}
   d8e8a:	f094 0f00 	teq	r4, #0
   d8e8e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d8e92:	bf06      	itte	eq
   d8e94:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d8e98:	3401      	addeq	r4, #1
   d8e9a:	3d01      	subne	r5, #1
   d8e9c:	e74e      	b.n	d8d3c <__adddf3+0x8c>
   d8e9e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d8ea2:	bf18      	it	ne
   d8ea4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d8ea8:	d029      	beq.n	d8efe <__adddf3+0x24e>
   d8eaa:	ea94 0f05 	teq	r4, r5
   d8eae:	bf08      	it	eq
   d8eb0:	ea90 0f02 	teqeq	r0, r2
   d8eb4:	d005      	beq.n	d8ec2 <__adddf3+0x212>
   d8eb6:	ea54 0c00 	orrs.w	ip, r4, r0
   d8eba:	bf04      	itt	eq
   d8ebc:	4619      	moveq	r1, r3
   d8ebe:	4610      	moveq	r0, r2
   d8ec0:	bd30      	pop	{r4, r5, pc}
   d8ec2:	ea91 0f03 	teq	r1, r3
   d8ec6:	bf1e      	ittt	ne
   d8ec8:	2100      	movne	r1, #0
   d8eca:	2000      	movne	r0, #0
   d8ecc:	bd30      	popne	{r4, r5, pc}
   d8ece:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d8ed2:	d105      	bne.n	d8ee0 <__adddf3+0x230>
   d8ed4:	0040      	lsls	r0, r0, #1
   d8ed6:	4149      	adcs	r1, r1
   d8ed8:	bf28      	it	cs
   d8eda:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d8ede:	bd30      	pop	{r4, r5, pc}
   d8ee0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d8ee4:	bf3c      	itt	cc
   d8ee6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d8eea:	bd30      	popcc	{r4, r5, pc}
   d8eec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8ef0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d8ef4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d8ef8:	f04f 0000 	mov.w	r0, #0
   d8efc:	bd30      	pop	{r4, r5, pc}
   d8efe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d8f02:	bf1a      	itte	ne
   d8f04:	4619      	movne	r1, r3
   d8f06:	4610      	movne	r0, r2
   d8f08:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d8f0c:	bf1c      	itt	ne
   d8f0e:	460b      	movne	r3, r1
   d8f10:	4602      	movne	r2, r0
   d8f12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d8f16:	bf06      	itte	eq
   d8f18:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d8f1c:	ea91 0f03 	teqeq	r1, r3
   d8f20:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d8f24:	bd30      	pop	{r4, r5, pc}
   d8f26:	bf00      	nop

000d8f28 <__aeabi_ui2d>:
   d8f28:	f090 0f00 	teq	r0, #0
   d8f2c:	bf04      	itt	eq
   d8f2e:	2100      	moveq	r1, #0
   d8f30:	4770      	bxeq	lr
   d8f32:	b530      	push	{r4, r5, lr}
   d8f34:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8f38:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8f3c:	f04f 0500 	mov.w	r5, #0
   d8f40:	f04f 0100 	mov.w	r1, #0
   d8f44:	e750      	b.n	d8de8 <__adddf3+0x138>
   d8f46:	bf00      	nop

000d8f48 <__aeabi_i2d>:
   d8f48:	f090 0f00 	teq	r0, #0
   d8f4c:	bf04      	itt	eq
   d8f4e:	2100      	moveq	r1, #0
   d8f50:	4770      	bxeq	lr
   d8f52:	b530      	push	{r4, r5, lr}
   d8f54:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8f58:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8f5c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d8f60:	bf48      	it	mi
   d8f62:	4240      	negmi	r0, r0
   d8f64:	f04f 0100 	mov.w	r1, #0
   d8f68:	e73e      	b.n	d8de8 <__adddf3+0x138>
   d8f6a:	bf00      	nop

000d8f6c <__aeabi_f2d>:
   d8f6c:	0042      	lsls	r2, r0, #1
   d8f6e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d8f72:	ea4f 0131 	mov.w	r1, r1, rrx
   d8f76:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d8f7a:	bf1f      	itttt	ne
   d8f7c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d8f80:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d8f84:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d8f88:	4770      	bxne	lr
   d8f8a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d8f8e:	bf08      	it	eq
   d8f90:	4770      	bxeq	lr
   d8f92:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d8f96:	bf04      	itt	eq
   d8f98:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d8f9c:	4770      	bxeq	lr
   d8f9e:	b530      	push	{r4, r5, lr}
   d8fa0:	f44f 7460 	mov.w	r4, #896	; 0x380
   d8fa4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8fa8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8fac:	e71c      	b.n	d8de8 <__adddf3+0x138>
   d8fae:	bf00      	nop

000d8fb0 <__aeabi_ul2d>:
   d8fb0:	ea50 0201 	orrs.w	r2, r0, r1
   d8fb4:	bf08      	it	eq
   d8fb6:	4770      	bxeq	lr
   d8fb8:	b530      	push	{r4, r5, lr}
   d8fba:	f04f 0500 	mov.w	r5, #0
   d8fbe:	e00a      	b.n	d8fd6 <__aeabi_l2d+0x16>

000d8fc0 <__aeabi_l2d>:
   d8fc0:	ea50 0201 	orrs.w	r2, r0, r1
   d8fc4:	bf08      	it	eq
   d8fc6:	4770      	bxeq	lr
   d8fc8:	b530      	push	{r4, r5, lr}
   d8fca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d8fce:	d502      	bpl.n	d8fd6 <__aeabi_l2d+0x16>
   d8fd0:	4240      	negs	r0, r0
   d8fd2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d8fd6:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8fda:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8fde:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d8fe2:	f43f aed8 	beq.w	d8d96 <__adddf3+0xe6>
   d8fe6:	f04f 0203 	mov.w	r2, #3
   d8fea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d8fee:	bf18      	it	ne
   d8ff0:	3203      	addne	r2, #3
   d8ff2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d8ff6:	bf18      	it	ne
   d8ff8:	3203      	addne	r2, #3
   d8ffa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d8ffe:	f1c2 0320 	rsb	r3, r2, #32
   d9002:	fa00 fc03 	lsl.w	ip, r0, r3
   d9006:	fa20 f002 	lsr.w	r0, r0, r2
   d900a:	fa01 fe03 	lsl.w	lr, r1, r3
   d900e:	ea40 000e 	orr.w	r0, r0, lr
   d9012:	fa21 f102 	lsr.w	r1, r1, r2
   d9016:	4414      	add	r4, r2
   d9018:	e6bd      	b.n	d8d96 <__adddf3+0xe6>
   d901a:	bf00      	nop

000d901c <__aeabi_dmul>:
   d901c:	b570      	push	{r4, r5, r6, lr}
   d901e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d9022:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d9026:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d902a:	bf1d      	ittte	ne
   d902c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d9030:	ea94 0f0c 	teqne	r4, ip
   d9034:	ea95 0f0c 	teqne	r5, ip
   d9038:	f000 f8de 	bleq	d91f8 <__aeabi_dmul+0x1dc>
   d903c:	442c      	add	r4, r5
   d903e:	ea81 0603 	eor.w	r6, r1, r3
   d9042:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d9046:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d904a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d904e:	bf18      	it	ne
   d9050:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d9054:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9058:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d905c:	d038      	beq.n	d90d0 <__aeabi_dmul+0xb4>
   d905e:	fba0 ce02 	umull	ip, lr, r0, r2
   d9062:	f04f 0500 	mov.w	r5, #0
   d9066:	fbe1 e502 	umlal	lr, r5, r1, r2
   d906a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d906e:	fbe0 e503 	umlal	lr, r5, r0, r3
   d9072:	f04f 0600 	mov.w	r6, #0
   d9076:	fbe1 5603 	umlal	r5, r6, r1, r3
   d907a:	f09c 0f00 	teq	ip, #0
   d907e:	bf18      	it	ne
   d9080:	f04e 0e01 	orrne.w	lr, lr, #1
   d9084:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d9088:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d908c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d9090:	d204      	bcs.n	d909c <__aeabi_dmul+0x80>
   d9092:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d9096:	416d      	adcs	r5, r5
   d9098:	eb46 0606 	adc.w	r6, r6, r6
   d909c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d90a0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d90a4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d90a8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d90ac:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d90b0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d90b4:	bf88      	it	hi
   d90b6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d90ba:	d81e      	bhi.n	d90fa <__aeabi_dmul+0xde>
   d90bc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d90c0:	bf08      	it	eq
   d90c2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d90c6:	f150 0000 	adcs.w	r0, r0, #0
   d90ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d90ce:	bd70      	pop	{r4, r5, r6, pc}
   d90d0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d90d4:	ea46 0101 	orr.w	r1, r6, r1
   d90d8:	ea40 0002 	orr.w	r0, r0, r2
   d90dc:	ea81 0103 	eor.w	r1, r1, r3
   d90e0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d90e4:	bfc2      	ittt	gt
   d90e6:	ebd4 050c 	rsbsgt	r5, r4, ip
   d90ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d90ee:	bd70      	popgt	{r4, r5, r6, pc}
   d90f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d90f4:	f04f 0e00 	mov.w	lr, #0
   d90f8:	3c01      	subs	r4, #1
   d90fa:	f300 80ab 	bgt.w	d9254 <__aeabi_dmul+0x238>
   d90fe:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d9102:	bfde      	ittt	le
   d9104:	2000      	movle	r0, #0
   d9106:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d910a:	bd70      	pople	{r4, r5, r6, pc}
   d910c:	f1c4 0400 	rsb	r4, r4, #0
   d9110:	3c20      	subs	r4, #32
   d9112:	da35      	bge.n	d9180 <__aeabi_dmul+0x164>
   d9114:	340c      	adds	r4, #12
   d9116:	dc1b      	bgt.n	d9150 <__aeabi_dmul+0x134>
   d9118:	f104 0414 	add.w	r4, r4, #20
   d911c:	f1c4 0520 	rsb	r5, r4, #32
   d9120:	fa00 f305 	lsl.w	r3, r0, r5
   d9124:	fa20 f004 	lsr.w	r0, r0, r4
   d9128:	fa01 f205 	lsl.w	r2, r1, r5
   d912c:	ea40 0002 	orr.w	r0, r0, r2
   d9130:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d9134:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d9138:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d913c:	fa21 f604 	lsr.w	r6, r1, r4
   d9140:	eb42 0106 	adc.w	r1, r2, r6
   d9144:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d9148:	bf08      	it	eq
   d914a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d914e:	bd70      	pop	{r4, r5, r6, pc}
   d9150:	f1c4 040c 	rsb	r4, r4, #12
   d9154:	f1c4 0520 	rsb	r5, r4, #32
   d9158:	fa00 f304 	lsl.w	r3, r0, r4
   d915c:	fa20 f005 	lsr.w	r0, r0, r5
   d9160:	fa01 f204 	lsl.w	r2, r1, r4
   d9164:	ea40 0002 	orr.w	r0, r0, r2
   d9168:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d916c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d9170:	f141 0100 	adc.w	r1, r1, #0
   d9174:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d9178:	bf08      	it	eq
   d917a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d917e:	bd70      	pop	{r4, r5, r6, pc}
   d9180:	f1c4 0520 	rsb	r5, r4, #32
   d9184:	fa00 f205 	lsl.w	r2, r0, r5
   d9188:	ea4e 0e02 	orr.w	lr, lr, r2
   d918c:	fa20 f304 	lsr.w	r3, r0, r4
   d9190:	fa01 f205 	lsl.w	r2, r1, r5
   d9194:	ea43 0302 	orr.w	r3, r3, r2
   d9198:	fa21 f004 	lsr.w	r0, r1, r4
   d919c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d91a0:	fa21 f204 	lsr.w	r2, r1, r4
   d91a4:	ea20 0002 	bic.w	r0, r0, r2
   d91a8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d91ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d91b0:	bf08      	it	eq
   d91b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d91b6:	bd70      	pop	{r4, r5, r6, pc}
   d91b8:	f094 0f00 	teq	r4, #0
   d91bc:	d10f      	bne.n	d91de <__aeabi_dmul+0x1c2>
   d91be:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d91c2:	0040      	lsls	r0, r0, #1
   d91c4:	eb41 0101 	adc.w	r1, r1, r1
   d91c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d91cc:	bf08      	it	eq
   d91ce:	3c01      	subeq	r4, #1
   d91d0:	d0f7      	beq.n	d91c2 <__aeabi_dmul+0x1a6>
   d91d2:	ea41 0106 	orr.w	r1, r1, r6
   d91d6:	f095 0f00 	teq	r5, #0
   d91da:	bf18      	it	ne
   d91dc:	4770      	bxne	lr
   d91de:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d91e2:	0052      	lsls	r2, r2, #1
   d91e4:	eb43 0303 	adc.w	r3, r3, r3
   d91e8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d91ec:	bf08      	it	eq
   d91ee:	3d01      	subeq	r5, #1
   d91f0:	d0f7      	beq.n	d91e2 <__aeabi_dmul+0x1c6>
   d91f2:	ea43 0306 	orr.w	r3, r3, r6
   d91f6:	4770      	bx	lr
   d91f8:	ea94 0f0c 	teq	r4, ip
   d91fc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d9200:	bf18      	it	ne
   d9202:	ea95 0f0c 	teqne	r5, ip
   d9206:	d00c      	beq.n	d9222 <__aeabi_dmul+0x206>
   d9208:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d920c:	bf18      	it	ne
   d920e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d9212:	d1d1      	bne.n	d91b8 <__aeabi_dmul+0x19c>
   d9214:	ea81 0103 	eor.w	r1, r1, r3
   d9218:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d921c:	f04f 0000 	mov.w	r0, #0
   d9220:	bd70      	pop	{r4, r5, r6, pc}
   d9222:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d9226:	bf06      	itte	eq
   d9228:	4610      	moveq	r0, r2
   d922a:	4619      	moveq	r1, r3
   d922c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d9230:	d019      	beq.n	d9266 <__aeabi_dmul+0x24a>
   d9232:	ea94 0f0c 	teq	r4, ip
   d9236:	d102      	bne.n	d923e <__aeabi_dmul+0x222>
   d9238:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d923c:	d113      	bne.n	d9266 <__aeabi_dmul+0x24a>
   d923e:	ea95 0f0c 	teq	r5, ip
   d9242:	d105      	bne.n	d9250 <__aeabi_dmul+0x234>
   d9244:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d9248:	bf1c      	itt	ne
   d924a:	4610      	movne	r0, r2
   d924c:	4619      	movne	r1, r3
   d924e:	d10a      	bne.n	d9266 <__aeabi_dmul+0x24a>
   d9250:	ea81 0103 	eor.w	r1, r1, r3
   d9254:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9258:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d925c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d9260:	f04f 0000 	mov.w	r0, #0
   d9264:	bd70      	pop	{r4, r5, r6, pc}
   d9266:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d926a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d926e:	bd70      	pop	{r4, r5, r6, pc}

000d9270 <__aeabi_ddiv>:
   d9270:	b570      	push	{r4, r5, r6, lr}
   d9272:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d9276:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d927a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d927e:	bf1d      	ittte	ne
   d9280:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d9284:	ea94 0f0c 	teqne	r4, ip
   d9288:	ea95 0f0c 	teqne	r5, ip
   d928c:	f000 f8a7 	bleq	d93de <__aeabi_ddiv+0x16e>
   d9290:	eba4 0405 	sub.w	r4, r4, r5
   d9294:	ea81 0e03 	eor.w	lr, r1, r3
   d9298:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d929c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d92a0:	f000 8088 	beq.w	d93b4 <__aeabi_ddiv+0x144>
   d92a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d92a8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d92ac:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d92b0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d92b4:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d92b8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d92bc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d92c0:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d92c4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d92c8:	429d      	cmp	r5, r3
   d92ca:	bf08      	it	eq
   d92cc:	4296      	cmpeq	r6, r2
   d92ce:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d92d2:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d92d6:	d202      	bcs.n	d92de <__aeabi_ddiv+0x6e>
   d92d8:	085b      	lsrs	r3, r3, #1
   d92da:	ea4f 0232 	mov.w	r2, r2, rrx
   d92de:	1ab6      	subs	r6, r6, r2
   d92e0:	eb65 0503 	sbc.w	r5, r5, r3
   d92e4:	085b      	lsrs	r3, r3, #1
   d92e6:	ea4f 0232 	mov.w	r2, r2, rrx
   d92ea:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d92ee:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d92f2:	ebb6 0e02 	subs.w	lr, r6, r2
   d92f6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d92fa:	bf22      	ittt	cs
   d92fc:	1ab6      	subcs	r6, r6, r2
   d92fe:	4675      	movcs	r5, lr
   d9300:	ea40 000c 	orrcs.w	r0, r0, ip
   d9304:	085b      	lsrs	r3, r3, #1
   d9306:	ea4f 0232 	mov.w	r2, r2, rrx
   d930a:	ebb6 0e02 	subs.w	lr, r6, r2
   d930e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d9312:	bf22      	ittt	cs
   d9314:	1ab6      	subcs	r6, r6, r2
   d9316:	4675      	movcs	r5, lr
   d9318:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d931c:	085b      	lsrs	r3, r3, #1
   d931e:	ea4f 0232 	mov.w	r2, r2, rrx
   d9322:	ebb6 0e02 	subs.w	lr, r6, r2
   d9326:	eb75 0e03 	sbcs.w	lr, r5, r3
   d932a:	bf22      	ittt	cs
   d932c:	1ab6      	subcs	r6, r6, r2
   d932e:	4675      	movcs	r5, lr
   d9330:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d9334:	085b      	lsrs	r3, r3, #1
   d9336:	ea4f 0232 	mov.w	r2, r2, rrx
   d933a:	ebb6 0e02 	subs.w	lr, r6, r2
   d933e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d9342:	bf22      	ittt	cs
   d9344:	1ab6      	subcs	r6, r6, r2
   d9346:	4675      	movcs	r5, lr
   d9348:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d934c:	ea55 0e06 	orrs.w	lr, r5, r6
   d9350:	d018      	beq.n	d9384 <__aeabi_ddiv+0x114>
   d9352:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d9356:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d935a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d935e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d9362:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d9366:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d936a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d936e:	d1c0      	bne.n	d92f2 <__aeabi_ddiv+0x82>
   d9370:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9374:	d10b      	bne.n	d938e <__aeabi_ddiv+0x11e>
   d9376:	ea41 0100 	orr.w	r1, r1, r0
   d937a:	f04f 0000 	mov.w	r0, #0
   d937e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d9382:	e7b6      	b.n	d92f2 <__aeabi_ddiv+0x82>
   d9384:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9388:	bf04      	itt	eq
   d938a:	4301      	orreq	r1, r0
   d938c:	2000      	moveq	r0, #0
   d938e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d9392:	bf88      	it	hi
   d9394:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d9398:	f63f aeaf 	bhi.w	d90fa <__aeabi_dmul+0xde>
   d939c:	ebb5 0c03 	subs.w	ip, r5, r3
   d93a0:	bf04      	itt	eq
   d93a2:	ebb6 0c02 	subseq.w	ip, r6, r2
   d93a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d93aa:	f150 0000 	adcs.w	r0, r0, #0
   d93ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d93b2:	bd70      	pop	{r4, r5, r6, pc}
   d93b4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d93b8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d93bc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d93c0:	bfc2      	ittt	gt
   d93c2:	ebd4 050c 	rsbsgt	r5, r4, ip
   d93c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d93ca:	bd70      	popgt	{r4, r5, r6, pc}
   d93cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d93d0:	f04f 0e00 	mov.w	lr, #0
   d93d4:	3c01      	subs	r4, #1
   d93d6:	e690      	b.n	d90fa <__aeabi_dmul+0xde>
   d93d8:	ea45 0e06 	orr.w	lr, r5, r6
   d93dc:	e68d      	b.n	d90fa <__aeabi_dmul+0xde>
   d93de:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d93e2:	ea94 0f0c 	teq	r4, ip
   d93e6:	bf08      	it	eq
   d93e8:	ea95 0f0c 	teqeq	r5, ip
   d93ec:	f43f af3b 	beq.w	d9266 <__aeabi_dmul+0x24a>
   d93f0:	ea94 0f0c 	teq	r4, ip
   d93f4:	d10a      	bne.n	d940c <__aeabi_ddiv+0x19c>
   d93f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d93fa:	f47f af34 	bne.w	d9266 <__aeabi_dmul+0x24a>
   d93fe:	ea95 0f0c 	teq	r5, ip
   d9402:	f47f af25 	bne.w	d9250 <__aeabi_dmul+0x234>
   d9406:	4610      	mov	r0, r2
   d9408:	4619      	mov	r1, r3
   d940a:	e72c      	b.n	d9266 <__aeabi_dmul+0x24a>
   d940c:	ea95 0f0c 	teq	r5, ip
   d9410:	d106      	bne.n	d9420 <__aeabi_ddiv+0x1b0>
   d9412:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d9416:	f43f aefd 	beq.w	d9214 <__aeabi_dmul+0x1f8>
   d941a:	4610      	mov	r0, r2
   d941c:	4619      	mov	r1, r3
   d941e:	e722      	b.n	d9266 <__aeabi_dmul+0x24a>
   d9420:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d9424:	bf18      	it	ne
   d9426:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d942a:	f47f aec5 	bne.w	d91b8 <__aeabi_dmul+0x19c>
   d942e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d9432:	f47f af0d 	bne.w	d9250 <__aeabi_dmul+0x234>
   d9436:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d943a:	f47f aeeb 	bne.w	d9214 <__aeabi_dmul+0x1f8>
   d943e:	e712      	b.n	d9266 <__aeabi_dmul+0x24a>

000d9440 <__gedf2>:
   d9440:	f04f 3cff 	mov.w	ip, #4294967295
   d9444:	e006      	b.n	d9454 <__cmpdf2+0x4>
   d9446:	bf00      	nop

000d9448 <__ledf2>:
   d9448:	f04f 0c01 	mov.w	ip, #1
   d944c:	e002      	b.n	d9454 <__cmpdf2+0x4>
   d944e:	bf00      	nop

000d9450 <__cmpdf2>:
   d9450:	f04f 0c01 	mov.w	ip, #1
   d9454:	f84d cd04 	str.w	ip, [sp, #-4]!
   d9458:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d945c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9460:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d9464:	bf18      	it	ne
   d9466:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d946a:	d01b      	beq.n	d94a4 <__cmpdf2+0x54>
   d946c:	b001      	add	sp, #4
   d946e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d9472:	bf0c      	ite	eq
   d9474:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d9478:	ea91 0f03 	teqne	r1, r3
   d947c:	bf02      	ittt	eq
   d947e:	ea90 0f02 	teqeq	r0, r2
   d9482:	2000      	moveq	r0, #0
   d9484:	4770      	bxeq	lr
   d9486:	f110 0f00 	cmn.w	r0, #0
   d948a:	ea91 0f03 	teq	r1, r3
   d948e:	bf58      	it	pl
   d9490:	4299      	cmppl	r1, r3
   d9492:	bf08      	it	eq
   d9494:	4290      	cmpeq	r0, r2
   d9496:	bf2c      	ite	cs
   d9498:	17d8      	asrcs	r0, r3, #31
   d949a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d949e:	f040 0001 	orr.w	r0, r0, #1
   d94a2:	4770      	bx	lr
   d94a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d94a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d94ac:	d102      	bne.n	d94b4 <__cmpdf2+0x64>
   d94ae:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d94b2:	d107      	bne.n	d94c4 <__cmpdf2+0x74>
   d94b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d94b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d94bc:	d1d6      	bne.n	d946c <__cmpdf2+0x1c>
   d94be:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d94c2:	d0d3      	beq.n	d946c <__cmpdf2+0x1c>
   d94c4:	f85d 0b04 	ldr.w	r0, [sp], #4
   d94c8:	4770      	bx	lr
   d94ca:	bf00      	nop

000d94cc <__aeabi_cdrcmple>:
   d94cc:	4684      	mov	ip, r0
   d94ce:	4610      	mov	r0, r2
   d94d0:	4662      	mov	r2, ip
   d94d2:	468c      	mov	ip, r1
   d94d4:	4619      	mov	r1, r3
   d94d6:	4663      	mov	r3, ip
   d94d8:	e000      	b.n	d94dc <__aeabi_cdcmpeq>
   d94da:	bf00      	nop

000d94dc <__aeabi_cdcmpeq>:
   d94dc:	b501      	push	{r0, lr}
   d94de:	f7ff ffb7 	bl	d9450 <__cmpdf2>
   d94e2:	2800      	cmp	r0, #0
   d94e4:	bf48      	it	mi
   d94e6:	f110 0f00 	cmnmi.w	r0, #0
   d94ea:	bd01      	pop	{r0, pc}

000d94ec <__aeabi_dcmpeq>:
   d94ec:	f84d ed08 	str.w	lr, [sp, #-8]!
   d94f0:	f7ff fff4 	bl	d94dc <__aeabi_cdcmpeq>
   d94f4:	bf0c      	ite	eq
   d94f6:	2001      	moveq	r0, #1
   d94f8:	2000      	movne	r0, #0
   d94fa:	f85d fb08 	ldr.w	pc, [sp], #8
   d94fe:	bf00      	nop

000d9500 <__aeabi_dcmplt>:
   d9500:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9504:	f7ff ffea 	bl	d94dc <__aeabi_cdcmpeq>
   d9508:	bf34      	ite	cc
   d950a:	2001      	movcc	r0, #1
   d950c:	2000      	movcs	r0, #0
   d950e:	f85d fb08 	ldr.w	pc, [sp], #8
   d9512:	bf00      	nop

000d9514 <__aeabi_dcmple>:
   d9514:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9518:	f7ff ffe0 	bl	d94dc <__aeabi_cdcmpeq>
   d951c:	bf94      	ite	ls
   d951e:	2001      	movls	r0, #1
   d9520:	2000      	movhi	r0, #0
   d9522:	f85d fb08 	ldr.w	pc, [sp], #8
   d9526:	bf00      	nop

000d9528 <__aeabi_dcmpge>:
   d9528:	f84d ed08 	str.w	lr, [sp, #-8]!
   d952c:	f7ff ffce 	bl	d94cc <__aeabi_cdrcmple>
   d9530:	bf94      	ite	ls
   d9532:	2001      	movls	r0, #1
   d9534:	2000      	movhi	r0, #0
   d9536:	f85d fb08 	ldr.w	pc, [sp], #8
   d953a:	bf00      	nop

000d953c <__aeabi_dcmpgt>:
   d953c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9540:	f7ff ffc4 	bl	d94cc <__aeabi_cdrcmple>
   d9544:	bf34      	ite	cc
   d9546:	2001      	movcc	r0, #1
   d9548:	2000      	movcs	r0, #0
   d954a:	f85d fb08 	ldr.w	pc, [sp], #8
   d954e:	bf00      	nop

000d9550 <__aeabi_d2uiz>:
   d9550:	004a      	lsls	r2, r1, #1
   d9552:	d211      	bcs.n	d9578 <__aeabi_d2uiz+0x28>
   d9554:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d9558:	d211      	bcs.n	d957e <__aeabi_d2uiz+0x2e>
   d955a:	d50d      	bpl.n	d9578 <__aeabi_d2uiz+0x28>
   d955c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d9560:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d9564:	d40e      	bmi.n	d9584 <__aeabi_d2uiz+0x34>
   d9566:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d956a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d956e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d9572:	fa23 f002 	lsr.w	r0, r3, r2
   d9576:	4770      	bx	lr
   d9578:	f04f 0000 	mov.w	r0, #0
   d957c:	4770      	bx	lr
   d957e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d9582:	d102      	bne.n	d958a <__aeabi_d2uiz+0x3a>
   d9584:	f04f 30ff 	mov.w	r0, #4294967295
   d9588:	4770      	bx	lr
   d958a:	f04f 0000 	mov.w	r0, #0
   d958e:	4770      	bx	lr

000d9590 <__aeabi_d2f>:
   d9590:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d9594:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d9598:	bf24      	itt	cs
   d959a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d959e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d95a2:	d90d      	bls.n	d95c0 <__aeabi_d2f+0x30>
   d95a4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d95a8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d95ac:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d95b0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d95b4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d95b8:	bf08      	it	eq
   d95ba:	f020 0001 	biceq.w	r0, r0, #1
   d95be:	4770      	bx	lr
   d95c0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d95c4:	d121      	bne.n	d960a <__aeabi_d2f+0x7a>
   d95c6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d95ca:	bfbc      	itt	lt
   d95cc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d95d0:	4770      	bxlt	lr
   d95d2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d95d6:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d95da:	f1c2 0218 	rsb	r2, r2, #24
   d95de:	f1c2 0c20 	rsb	ip, r2, #32
   d95e2:	fa10 f30c 	lsls.w	r3, r0, ip
   d95e6:	fa20 f002 	lsr.w	r0, r0, r2
   d95ea:	bf18      	it	ne
   d95ec:	f040 0001 	orrne.w	r0, r0, #1
   d95f0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d95f4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d95f8:	fa03 fc0c 	lsl.w	ip, r3, ip
   d95fc:	ea40 000c 	orr.w	r0, r0, ip
   d9600:	fa23 f302 	lsr.w	r3, r3, r2
   d9604:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d9608:	e7cc      	b.n	d95a4 <__aeabi_d2f+0x14>
   d960a:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d960e:	d107      	bne.n	d9620 <__aeabi_d2f+0x90>
   d9610:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d9614:	bf1e      	ittt	ne
   d9616:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d961a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d961e:	4770      	bxne	lr
   d9620:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d9624:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d9628:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d962c:	4770      	bx	lr
   d962e:	bf00      	nop

000d9630 <__aeabi_uldivmod>:
   d9630:	b953      	cbnz	r3, d9648 <__aeabi_uldivmod+0x18>
   d9632:	b94a      	cbnz	r2, d9648 <__aeabi_uldivmod+0x18>
   d9634:	2900      	cmp	r1, #0
   d9636:	bf08      	it	eq
   d9638:	2800      	cmpeq	r0, #0
   d963a:	bf1c      	itt	ne
   d963c:	f04f 31ff 	movne.w	r1, #4294967295
   d9640:	f04f 30ff 	movne.w	r0, #4294967295
   d9644:	f000 b98c 	b.w	d9960 <__aeabi_idiv0>
   d9648:	f1ad 0c08 	sub.w	ip, sp, #8
   d964c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   d9650:	f000 f824 	bl	d969c <__udivmoddi4>
   d9654:	f8dd e004 	ldr.w	lr, [sp, #4]
   d9658:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d965c:	b004      	add	sp, #16
   d965e:	4770      	bx	lr

000d9660 <__aeabi_d2ulz>:
   d9660:	b5d0      	push	{r4, r6, r7, lr}
   d9662:	4b0c      	ldr	r3, [pc, #48]	; (d9694 <__aeabi_d2ulz+0x34>)
   d9664:	2200      	movs	r2, #0
   d9666:	4606      	mov	r6, r0
   d9668:	460f      	mov	r7, r1
   d966a:	f7ff fcd7 	bl	d901c <__aeabi_dmul>
   d966e:	f7ff ff6f 	bl	d9550 <__aeabi_d2uiz>
   d9672:	4604      	mov	r4, r0
   d9674:	f7ff fc58 	bl	d8f28 <__aeabi_ui2d>
   d9678:	4b07      	ldr	r3, [pc, #28]	; (d9698 <__aeabi_d2ulz+0x38>)
   d967a:	2200      	movs	r2, #0
   d967c:	f7ff fcce 	bl	d901c <__aeabi_dmul>
   d9680:	4602      	mov	r2, r0
   d9682:	460b      	mov	r3, r1
   d9684:	4630      	mov	r0, r6
   d9686:	4639      	mov	r1, r7
   d9688:	f7ff fb10 	bl	d8cac <__aeabi_dsub>
   d968c:	f7ff ff60 	bl	d9550 <__aeabi_d2uiz>
   d9690:	4621      	mov	r1, r4
   d9692:	bdd0      	pop	{r4, r6, r7, pc}
   d9694:	3df00000 	.word	0x3df00000
   d9698:	41f00000 	.word	0x41f00000

000d969c <__udivmoddi4>:
   d969c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d96a0:	9d08      	ldr	r5, [sp, #32]
   d96a2:	4604      	mov	r4, r0
   d96a4:	468c      	mov	ip, r1
   d96a6:	2b00      	cmp	r3, #0
   d96a8:	f040 8083 	bne.w	d97b2 <__udivmoddi4+0x116>
   d96ac:	428a      	cmp	r2, r1
   d96ae:	4617      	mov	r7, r2
   d96b0:	d947      	bls.n	d9742 <__udivmoddi4+0xa6>
   d96b2:	fab2 f282 	clz	r2, r2
   d96b6:	b142      	cbz	r2, d96ca <__udivmoddi4+0x2e>
   d96b8:	f1c2 0020 	rsb	r0, r2, #32
   d96bc:	fa24 f000 	lsr.w	r0, r4, r0
   d96c0:	4091      	lsls	r1, r2
   d96c2:	4097      	lsls	r7, r2
   d96c4:	ea40 0c01 	orr.w	ip, r0, r1
   d96c8:	4094      	lsls	r4, r2
   d96ca:	ea4f 4817 	mov.w	r8, r7, lsr #16
   d96ce:	0c23      	lsrs	r3, r4, #16
   d96d0:	fbbc f6f8 	udiv	r6, ip, r8
   d96d4:	fa1f fe87 	uxth.w	lr, r7
   d96d8:	fb08 c116 	mls	r1, r8, r6, ip
   d96dc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   d96e0:	fb06 f10e 	mul.w	r1, r6, lr
   d96e4:	4299      	cmp	r1, r3
   d96e6:	d909      	bls.n	d96fc <__udivmoddi4+0x60>
   d96e8:	18fb      	adds	r3, r7, r3
   d96ea:	f106 30ff 	add.w	r0, r6, #4294967295
   d96ee:	f080 8119 	bcs.w	d9924 <__udivmoddi4+0x288>
   d96f2:	4299      	cmp	r1, r3
   d96f4:	f240 8116 	bls.w	d9924 <__udivmoddi4+0x288>
   d96f8:	3e02      	subs	r6, #2
   d96fa:	443b      	add	r3, r7
   d96fc:	1a5b      	subs	r3, r3, r1
   d96fe:	b2a4      	uxth	r4, r4
   d9700:	fbb3 f0f8 	udiv	r0, r3, r8
   d9704:	fb08 3310 	mls	r3, r8, r0, r3
   d9708:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   d970c:	fb00 fe0e 	mul.w	lr, r0, lr
   d9710:	45a6      	cmp	lr, r4
   d9712:	d909      	bls.n	d9728 <__udivmoddi4+0x8c>
   d9714:	193c      	adds	r4, r7, r4
   d9716:	f100 33ff 	add.w	r3, r0, #4294967295
   d971a:	f080 8105 	bcs.w	d9928 <__udivmoddi4+0x28c>
   d971e:	45a6      	cmp	lr, r4
   d9720:	f240 8102 	bls.w	d9928 <__udivmoddi4+0x28c>
   d9724:	3802      	subs	r0, #2
   d9726:	443c      	add	r4, r7
   d9728:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   d972c:	eba4 040e 	sub.w	r4, r4, lr
   d9730:	2600      	movs	r6, #0
   d9732:	b11d      	cbz	r5, d973c <__udivmoddi4+0xa0>
   d9734:	40d4      	lsrs	r4, r2
   d9736:	2300      	movs	r3, #0
   d9738:	e9c5 4300 	strd	r4, r3, [r5]
   d973c:	4631      	mov	r1, r6
   d973e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9742:	b902      	cbnz	r2, d9746 <__udivmoddi4+0xaa>
   d9744:	deff      	udf	#255	; 0xff
   d9746:	fab2 f282 	clz	r2, r2
   d974a:	2a00      	cmp	r2, #0
   d974c:	d150      	bne.n	d97f0 <__udivmoddi4+0x154>
   d974e:	1bcb      	subs	r3, r1, r7
   d9750:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   d9754:	fa1f f887 	uxth.w	r8, r7
   d9758:	2601      	movs	r6, #1
   d975a:	fbb3 fcfe 	udiv	ip, r3, lr
   d975e:	0c21      	lsrs	r1, r4, #16
   d9760:	fb0e 331c 	mls	r3, lr, ip, r3
   d9764:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   d9768:	fb08 f30c 	mul.w	r3, r8, ip
   d976c:	428b      	cmp	r3, r1
   d976e:	d907      	bls.n	d9780 <__udivmoddi4+0xe4>
   d9770:	1879      	adds	r1, r7, r1
   d9772:	f10c 30ff 	add.w	r0, ip, #4294967295
   d9776:	d202      	bcs.n	d977e <__udivmoddi4+0xe2>
   d9778:	428b      	cmp	r3, r1
   d977a:	f200 80e9 	bhi.w	d9950 <__udivmoddi4+0x2b4>
   d977e:	4684      	mov	ip, r0
   d9780:	1ac9      	subs	r1, r1, r3
   d9782:	b2a3      	uxth	r3, r4
   d9784:	fbb1 f0fe 	udiv	r0, r1, lr
   d9788:	fb0e 1110 	mls	r1, lr, r0, r1
   d978c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   d9790:	fb08 f800 	mul.w	r8, r8, r0
   d9794:	45a0      	cmp	r8, r4
   d9796:	d907      	bls.n	d97a8 <__udivmoddi4+0x10c>
   d9798:	193c      	adds	r4, r7, r4
   d979a:	f100 33ff 	add.w	r3, r0, #4294967295
   d979e:	d202      	bcs.n	d97a6 <__udivmoddi4+0x10a>
   d97a0:	45a0      	cmp	r8, r4
   d97a2:	f200 80d9 	bhi.w	d9958 <__udivmoddi4+0x2bc>
   d97a6:	4618      	mov	r0, r3
   d97a8:	eba4 0408 	sub.w	r4, r4, r8
   d97ac:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   d97b0:	e7bf      	b.n	d9732 <__udivmoddi4+0x96>
   d97b2:	428b      	cmp	r3, r1
   d97b4:	d909      	bls.n	d97ca <__udivmoddi4+0x12e>
   d97b6:	2d00      	cmp	r5, #0
   d97b8:	f000 80b1 	beq.w	d991e <__udivmoddi4+0x282>
   d97bc:	2600      	movs	r6, #0
   d97be:	e9c5 0100 	strd	r0, r1, [r5]
   d97c2:	4630      	mov	r0, r6
   d97c4:	4631      	mov	r1, r6
   d97c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d97ca:	fab3 f683 	clz	r6, r3
   d97ce:	2e00      	cmp	r6, #0
   d97d0:	d14a      	bne.n	d9868 <__udivmoddi4+0x1cc>
   d97d2:	428b      	cmp	r3, r1
   d97d4:	d302      	bcc.n	d97dc <__udivmoddi4+0x140>
   d97d6:	4282      	cmp	r2, r0
   d97d8:	f200 80b8 	bhi.w	d994c <__udivmoddi4+0x2b0>
   d97dc:	1a84      	subs	r4, r0, r2
   d97de:	eb61 0103 	sbc.w	r1, r1, r3
   d97e2:	2001      	movs	r0, #1
   d97e4:	468c      	mov	ip, r1
   d97e6:	2d00      	cmp	r5, #0
   d97e8:	d0a8      	beq.n	d973c <__udivmoddi4+0xa0>
   d97ea:	e9c5 4c00 	strd	r4, ip, [r5]
   d97ee:	e7a5      	b.n	d973c <__udivmoddi4+0xa0>
   d97f0:	f1c2 0320 	rsb	r3, r2, #32
   d97f4:	fa20 f603 	lsr.w	r6, r0, r3
   d97f8:	4097      	lsls	r7, r2
   d97fa:	fa01 f002 	lsl.w	r0, r1, r2
   d97fe:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   d9802:	40d9      	lsrs	r1, r3
   d9804:	4330      	orrs	r0, r6
   d9806:	0c03      	lsrs	r3, r0, #16
   d9808:	fbb1 f6fe 	udiv	r6, r1, lr
   d980c:	fa1f f887 	uxth.w	r8, r7
   d9810:	fb0e 1116 	mls	r1, lr, r6, r1
   d9814:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   d9818:	fb06 f108 	mul.w	r1, r6, r8
   d981c:	4299      	cmp	r1, r3
   d981e:	fa04 f402 	lsl.w	r4, r4, r2
   d9822:	d909      	bls.n	d9838 <__udivmoddi4+0x19c>
   d9824:	18fb      	adds	r3, r7, r3
   d9826:	f106 3cff 	add.w	ip, r6, #4294967295
   d982a:	f080 808d 	bcs.w	d9948 <__udivmoddi4+0x2ac>
   d982e:	4299      	cmp	r1, r3
   d9830:	f240 808a 	bls.w	d9948 <__udivmoddi4+0x2ac>
   d9834:	3e02      	subs	r6, #2
   d9836:	443b      	add	r3, r7
   d9838:	1a5b      	subs	r3, r3, r1
   d983a:	b281      	uxth	r1, r0
   d983c:	fbb3 f0fe 	udiv	r0, r3, lr
   d9840:	fb0e 3310 	mls	r3, lr, r0, r3
   d9844:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   d9848:	fb00 f308 	mul.w	r3, r0, r8
   d984c:	428b      	cmp	r3, r1
   d984e:	d907      	bls.n	d9860 <__udivmoddi4+0x1c4>
   d9850:	1879      	adds	r1, r7, r1
   d9852:	f100 3cff 	add.w	ip, r0, #4294967295
   d9856:	d273      	bcs.n	d9940 <__udivmoddi4+0x2a4>
   d9858:	428b      	cmp	r3, r1
   d985a:	d971      	bls.n	d9940 <__udivmoddi4+0x2a4>
   d985c:	3802      	subs	r0, #2
   d985e:	4439      	add	r1, r7
   d9860:	1acb      	subs	r3, r1, r3
   d9862:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
   d9866:	e778      	b.n	d975a <__udivmoddi4+0xbe>
   d9868:	f1c6 0c20 	rsb	ip, r6, #32
   d986c:	fa03 f406 	lsl.w	r4, r3, r6
   d9870:	fa22 f30c 	lsr.w	r3, r2, ip
   d9874:	431c      	orrs	r4, r3
   d9876:	fa20 f70c 	lsr.w	r7, r0, ip
   d987a:	fa01 f306 	lsl.w	r3, r1, r6
   d987e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
   d9882:	fa21 f10c 	lsr.w	r1, r1, ip
   d9886:	431f      	orrs	r7, r3
   d9888:	0c3b      	lsrs	r3, r7, #16
   d988a:	fbb1 f9fe 	udiv	r9, r1, lr
   d988e:	fa1f f884 	uxth.w	r8, r4
   d9892:	fb0e 1119 	mls	r1, lr, r9, r1
   d9896:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   d989a:	fb09 fa08 	mul.w	sl, r9, r8
   d989e:	458a      	cmp	sl, r1
   d98a0:	fa02 f206 	lsl.w	r2, r2, r6
   d98a4:	fa00 f306 	lsl.w	r3, r0, r6
   d98a8:	d908      	bls.n	d98bc <__udivmoddi4+0x220>
   d98aa:	1861      	adds	r1, r4, r1
   d98ac:	f109 30ff 	add.w	r0, r9, #4294967295
   d98b0:	d248      	bcs.n	d9944 <__udivmoddi4+0x2a8>
   d98b2:	458a      	cmp	sl, r1
   d98b4:	d946      	bls.n	d9944 <__udivmoddi4+0x2a8>
   d98b6:	f1a9 0902 	sub.w	r9, r9, #2
   d98ba:	4421      	add	r1, r4
   d98bc:	eba1 010a 	sub.w	r1, r1, sl
   d98c0:	b2bf      	uxth	r7, r7
   d98c2:	fbb1 f0fe 	udiv	r0, r1, lr
   d98c6:	fb0e 1110 	mls	r1, lr, r0, r1
   d98ca:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
   d98ce:	fb00 f808 	mul.w	r8, r0, r8
   d98d2:	45b8      	cmp	r8, r7
   d98d4:	d907      	bls.n	d98e6 <__udivmoddi4+0x24a>
   d98d6:	19e7      	adds	r7, r4, r7
   d98d8:	f100 31ff 	add.w	r1, r0, #4294967295
   d98dc:	d22e      	bcs.n	d993c <__udivmoddi4+0x2a0>
   d98de:	45b8      	cmp	r8, r7
   d98e0:	d92c      	bls.n	d993c <__udivmoddi4+0x2a0>
   d98e2:	3802      	subs	r0, #2
   d98e4:	4427      	add	r7, r4
   d98e6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   d98ea:	eba7 0708 	sub.w	r7, r7, r8
   d98ee:	fba0 8902 	umull	r8, r9, r0, r2
   d98f2:	454f      	cmp	r7, r9
   d98f4:	46c6      	mov	lr, r8
   d98f6:	4649      	mov	r1, r9
   d98f8:	d31a      	bcc.n	d9930 <__udivmoddi4+0x294>
   d98fa:	d017      	beq.n	d992c <__udivmoddi4+0x290>
   d98fc:	b15d      	cbz	r5, d9916 <__udivmoddi4+0x27a>
   d98fe:	ebb3 020e 	subs.w	r2, r3, lr
   d9902:	eb67 0701 	sbc.w	r7, r7, r1
   d9906:	fa07 fc0c 	lsl.w	ip, r7, ip
   d990a:	40f2      	lsrs	r2, r6
   d990c:	ea4c 0202 	orr.w	r2, ip, r2
   d9910:	40f7      	lsrs	r7, r6
   d9912:	e9c5 2700 	strd	r2, r7, [r5]
   d9916:	2600      	movs	r6, #0
   d9918:	4631      	mov	r1, r6
   d991a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d991e:	462e      	mov	r6, r5
   d9920:	4628      	mov	r0, r5
   d9922:	e70b      	b.n	d973c <__udivmoddi4+0xa0>
   d9924:	4606      	mov	r6, r0
   d9926:	e6e9      	b.n	d96fc <__udivmoddi4+0x60>
   d9928:	4618      	mov	r0, r3
   d992a:	e6fd      	b.n	d9728 <__udivmoddi4+0x8c>
   d992c:	4543      	cmp	r3, r8
   d992e:	d2e5      	bcs.n	d98fc <__udivmoddi4+0x260>
   d9930:	ebb8 0e02 	subs.w	lr, r8, r2
   d9934:	eb69 0104 	sbc.w	r1, r9, r4
   d9938:	3801      	subs	r0, #1
   d993a:	e7df      	b.n	d98fc <__udivmoddi4+0x260>
   d993c:	4608      	mov	r0, r1
   d993e:	e7d2      	b.n	d98e6 <__udivmoddi4+0x24a>
   d9940:	4660      	mov	r0, ip
   d9942:	e78d      	b.n	d9860 <__udivmoddi4+0x1c4>
   d9944:	4681      	mov	r9, r0
   d9946:	e7b9      	b.n	d98bc <__udivmoddi4+0x220>
   d9948:	4666      	mov	r6, ip
   d994a:	e775      	b.n	d9838 <__udivmoddi4+0x19c>
   d994c:	4630      	mov	r0, r6
   d994e:	e74a      	b.n	d97e6 <__udivmoddi4+0x14a>
   d9950:	f1ac 0c02 	sub.w	ip, ip, #2
   d9954:	4439      	add	r1, r7
   d9956:	e713      	b.n	d9780 <__udivmoddi4+0xe4>
   d9958:	3802      	subs	r0, #2
   d995a:	443c      	add	r4, r7
   d995c:	e724      	b.n	d97a8 <__udivmoddi4+0x10c>
   d995e:	bf00      	nop

000d9960 <__aeabi_idiv0>:
   d9960:	4770      	bx	lr
   d9962:	bf00      	nop

000d9964 <atof>:
   d9964:	2100      	movs	r1, #0
   d9966:	f000 bef1 	b.w	da74c <strtod>
	...

000d996c <__cxa_atexit>:
   d996c:	b510      	push	{r4, lr}
   d996e:	4c05      	ldr	r4, [pc, #20]	; (d9984 <__cxa_atexit+0x18>)
   d9970:	4613      	mov	r3, r2
   d9972:	b12c      	cbz	r4, d9980 <__cxa_atexit+0x14>
   d9974:	460a      	mov	r2, r1
   d9976:	4601      	mov	r1, r0
   d9978:	2002      	movs	r0, #2
   d997a:	f3af 8000 	nop.w
   d997e:	bd10      	pop	{r4, pc}
   d9980:	4620      	mov	r0, r4
   d9982:	e7fc      	b.n	d997e <__cxa_atexit+0x12>
   d9984:	00000000 	.word	0x00000000

000d9988 <memcpy>:
   d9988:	440a      	add	r2, r1
   d998a:	4291      	cmp	r1, r2
   d998c:	f100 33ff 	add.w	r3, r0, #4294967295
   d9990:	d100      	bne.n	d9994 <memcpy+0xc>
   d9992:	4770      	bx	lr
   d9994:	b510      	push	{r4, lr}
   d9996:	f811 4b01 	ldrb.w	r4, [r1], #1
   d999a:	f803 4f01 	strb.w	r4, [r3, #1]!
   d999e:	4291      	cmp	r1, r2
   d99a0:	d1f9      	bne.n	d9996 <memcpy+0xe>
   d99a2:	bd10      	pop	{r4, pc}

000d99a4 <memset>:
   d99a4:	4402      	add	r2, r0
   d99a6:	4603      	mov	r3, r0
   d99a8:	4293      	cmp	r3, r2
   d99aa:	d100      	bne.n	d99ae <memset+0xa>
   d99ac:	4770      	bx	lr
   d99ae:	f803 1b01 	strb.w	r1, [r3], #1
   d99b2:	e7f9      	b.n	d99a8 <memset+0x4>

000d99b4 <srand>:
   d99b4:	b538      	push	{r3, r4, r5, lr}
   d99b6:	4b0d      	ldr	r3, [pc, #52]	; (d99ec <srand+0x38>)
   d99b8:	681d      	ldr	r5, [r3, #0]
   d99ba:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d99bc:	4604      	mov	r4, r0
   d99be:	b97b      	cbnz	r3, d99e0 <srand+0x2c>
   d99c0:	2018      	movs	r0, #24
   d99c2:	f7fc ffc7 	bl	d6954 <malloc>
   d99c6:	4a0a      	ldr	r2, [pc, #40]	; (d99f0 <srand+0x3c>)
   d99c8:	4b0a      	ldr	r3, [pc, #40]	; (d99f4 <srand+0x40>)
   d99ca:	63a8      	str	r0, [r5, #56]	; 0x38
   d99cc:	e9c0 2300 	strd	r2, r3, [r0]
   d99d0:	4b09      	ldr	r3, [pc, #36]	; (d99f8 <srand+0x44>)
   d99d2:	6083      	str	r3, [r0, #8]
   d99d4:	230b      	movs	r3, #11
   d99d6:	8183      	strh	r3, [r0, #12]
   d99d8:	2201      	movs	r2, #1
   d99da:	2300      	movs	r3, #0
   d99dc:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d99e0:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d99e2:	2200      	movs	r2, #0
   d99e4:	611c      	str	r4, [r3, #16]
   d99e6:	615a      	str	r2, [r3, #20]
   d99e8:	bd38      	pop	{r3, r4, r5, pc}
   d99ea:	bf00      	nop
   d99ec:	2003e294 	.word	0x2003e294
   d99f0:	abcd330e 	.word	0xabcd330e
   d99f4:	e66d1234 	.word	0xe66d1234
   d99f8:	0005deec 	.word	0x0005deec

000d99fc <strchr>:
   d99fc:	b2c9      	uxtb	r1, r1
   d99fe:	4603      	mov	r3, r0
   d9a00:	f810 2b01 	ldrb.w	r2, [r0], #1
   d9a04:	b11a      	cbz	r2, d9a0e <strchr+0x12>
   d9a06:	428a      	cmp	r2, r1
   d9a08:	d1f9      	bne.n	d99fe <strchr+0x2>
   d9a0a:	4618      	mov	r0, r3
   d9a0c:	4770      	bx	lr
   d9a0e:	2900      	cmp	r1, #0
   d9a10:	bf18      	it	ne
   d9a12:	2300      	movne	r3, #0
   d9a14:	e7f9      	b.n	d9a0a <strchr+0xe>

000d9a16 <strcmp>:
   d9a16:	f810 2b01 	ldrb.w	r2, [r0], #1
   d9a1a:	f811 3b01 	ldrb.w	r3, [r1], #1
   d9a1e:	2a01      	cmp	r2, #1
   d9a20:	bf28      	it	cs
   d9a22:	429a      	cmpcs	r2, r3
   d9a24:	d0f7      	beq.n	d9a16 <strcmp>
   d9a26:	1ad0      	subs	r0, r2, r3
   d9a28:	4770      	bx	lr

000d9a2a <strcpy>:
   d9a2a:	4603      	mov	r3, r0
   d9a2c:	f811 2b01 	ldrb.w	r2, [r1], #1
   d9a30:	f803 2b01 	strb.w	r2, [r3], #1
   d9a34:	2a00      	cmp	r2, #0
   d9a36:	d1f9      	bne.n	d9a2c <strcpy+0x2>
   d9a38:	4770      	bx	lr
	...

000d9a3c <strdup>:
   d9a3c:	4b02      	ldr	r3, [pc, #8]	; (d9a48 <strdup+0xc>)
   d9a3e:	4601      	mov	r1, r0
   d9a40:	6818      	ldr	r0, [r3, #0]
   d9a42:	f000 b803 	b.w	d9a4c <_strdup_r>
   d9a46:	bf00      	nop
   d9a48:	2003e294 	.word	0x2003e294

000d9a4c <_strdup_r>:
   d9a4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d9a4e:	4604      	mov	r4, r0
   d9a50:	4608      	mov	r0, r1
   d9a52:	460d      	mov	r5, r1
   d9a54:	f000 f80f 	bl	d9a76 <strlen>
   d9a58:	1c42      	adds	r2, r0, #1
   d9a5a:	4611      	mov	r1, r2
   d9a5c:	4620      	mov	r0, r4
   d9a5e:	9201      	str	r2, [sp, #4]
   d9a60:	f7fc ffa0 	bl	d69a4 <_malloc_r>
   d9a64:	4604      	mov	r4, r0
   d9a66:	b118      	cbz	r0, d9a70 <_strdup_r+0x24>
   d9a68:	9a01      	ldr	r2, [sp, #4]
   d9a6a:	4629      	mov	r1, r5
   d9a6c:	f7ff ff8c 	bl	d9988 <memcpy>
   d9a70:	4620      	mov	r0, r4
   d9a72:	b003      	add	sp, #12
   d9a74:	bd30      	pop	{r4, r5, pc}

000d9a76 <strlen>:
   d9a76:	4603      	mov	r3, r0
   d9a78:	f813 2b01 	ldrb.w	r2, [r3], #1
   d9a7c:	2a00      	cmp	r2, #0
   d9a7e:	d1fb      	bne.n	d9a78 <strlen+0x2>
   d9a80:	1a18      	subs	r0, r3, r0
   d9a82:	3801      	subs	r0, #1
   d9a84:	4770      	bx	lr

000d9a86 <strncmp>:
   d9a86:	b510      	push	{r4, lr}
   d9a88:	b16a      	cbz	r2, d9aa6 <strncmp+0x20>
   d9a8a:	3901      	subs	r1, #1
   d9a8c:	1884      	adds	r4, r0, r2
   d9a8e:	f810 3b01 	ldrb.w	r3, [r0], #1
   d9a92:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   d9a96:	4293      	cmp	r3, r2
   d9a98:	d103      	bne.n	d9aa2 <strncmp+0x1c>
   d9a9a:	42a0      	cmp	r0, r4
   d9a9c:	d001      	beq.n	d9aa2 <strncmp+0x1c>
   d9a9e:	2b00      	cmp	r3, #0
   d9aa0:	d1f5      	bne.n	d9a8e <strncmp+0x8>
   d9aa2:	1a98      	subs	r0, r3, r2
   d9aa4:	bd10      	pop	{r4, pc}
   d9aa6:	4610      	mov	r0, r2
   d9aa8:	e7fc      	b.n	d9aa4 <strncmp+0x1e>

000d9aaa <strncpy>:
   d9aaa:	b510      	push	{r4, lr}
   d9aac:	3901      	subs	r1, #1
   d9aae:	4603      	mov	r3, r0
   d9ab0:	b132      	cbz	r2, d9ac0 <strncpy+0x16>
   d9ab2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d9ab6:	f803 4b01 	strb.w	r4, [r3], #1
   d9aba:	3a01      	subs	r2, #1
   d9abc:	2c00      	cmp	r4, #0
   d9abe:	d1f7      	bne.n	d9ab0 <strncpy+0x6>
   d9ac0:	441a      	add	r2, r3
   d9ac2:	2100      	movs	r1, #0
   d9ac4:	4293      	cmp	r3, r2
   d9ac6:	d100      	bne.n	d9aca <strncpy+0x20>
   d9ac8:	bd10      	pop	{r4, pc}
   d9aca:	f803 1b01 	strb.w	r1, [r3], #1
   d9ace:	e7f9      	b.n	d9ac4 <strncpy+0x1a>

000d9ad0 <strstr>:
   d9ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d9ad2:	780c      	ldrb	r4, [r1, #0]
   d9ad4:	b164      	cbz	r4, d9af0 <strstr+0x20>
   d9ad6:	4603      	mov	r3, r0
   d9ad8:	781a      	ldrb	r2, [r3, #0]
   d9ada:	4618      	mov	r0, r3
   d9adc:	1c5e      	adds	r6, r3, #1
   d9ade:	b90a      	cbnz	r2, d9ae4 <strstr+0x14>
   d9ae0:	4610      	mov	r0, r2
   d9ae2:	e005      	b.n	d9af0 <strstr+0x20>
   d9ae4:	4294      	cmp	r4, r2
   d9ae6:	d108      	bne.n	d9afa <strstr+0x2a>
   d9ae8:	460d      	mov	r5, r1
   d9aea:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   d9aee:	b902      	cbnz	r2, d9af2 <strstr+0x22>
   d9af0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d9af2:	f813 7f01 	ldrb.w	r7, [r3, #1]!
   d9af6:	4297      	cmp	r7, r2
   d9af8:	d0f7      	beq.n	d9aea <strstr+0x1a>
   d9afa:	4633      	mov	r3, r6
   d9afc:	e7ec      	b.n	d9ad8 <strstr+0x8>

000d9afe <sulp>:
   d9afe:	b570      	push	{r4, r5, r6, lr}
   d9b00:	4604      	mov	r4, r0
   d9b02:	460d      	mov	r5, r1
   d9b04:	ec45 4b10 	vmov	d0, r4, r5
   d9b08:	4616      	mov	r6, r2
   d9b0a:	f001 fce9 	bl	db4e0 <__ulp>
   d9b0e:	ec51 0b10 	vmov	r0, r1, d0
   d9b12:	b17e      	cbz	r6, d9b34 <sulp+0x36>
   d9b14:	f3c5 530a 	ubfx	r3, r5, #20, #11
   d9b18:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d9b1c:	2b00      	cmp	r3, #0
   d9b1e:	dd09      	ble.n	d9b34 <sulp+0x36>
   d9b20:	051b      	lsls	r3, r3, #20
   d9b22:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   d9b26:	2400      	movs	r4, #0
   d9b28:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   d9b2c:	4622      	mov	r2, r4
   d9b2e:	462b      	mov	r3, r5
   d9b30:	f7ff fa74 	bl	d901c <__aeabi_dmul>
   d9b34:	bd70      	pop	{r4, r5, r6, pc}
	...

000d9b38 <_strtod_l>:
   d9b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9b3c:	b0a3      	sub	sp, #140	; 0x8c
   d9b3e:	461f      	mov	r7, r3
   d9b40:	2300      	movs	r3, #0
   d9b42:	931e      	str	r3, [sp, #120]	; 0x78
   d9b44:	4ba4      	ldr	r3, [pc, #656]	; (d9dd8 <_strtod_l+0x2a0>)
   d9b46:	9219      	str	r2, [sp, #100]	; 0x64
   d9b48:	681b      	ldr	r3, [r3, #0]
   d9b4a:	9307      	str	r3, [sp, #28]
   d9b4c:	4604      	mov	r4, r0
   d9b4e:	4618      	mov	r0, r3
   d9b50:	4688      	mov	r8, r1
   d9b52:	f7ff ff90 	bl	d9a76 <strlen>
   d9b56:	f04f 0a00 	mov.w	sl, #0
   d9b5a:	4605      	mov	r5, r0
   d9b5c:	f04f 0b00 	mov.w	fp, #0
   d9b60:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   d9b64:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d9b66:	781a      	ldrb	r2, [r3, #0]
   d9b68:	2a2b      	cmp	r2, #43	; 0x2b
   d9b6a:	d04c      	beq.n	d9c06 <_strtod_l+0xce>
   d9b6c:	d839      	bhi.n	d9be2 <_strtod_l+0xaa>
   d9b6e:	2a0d      	cmp	r2, #13
   d9b70:	d832      	bhi.n	d9bd8 <_strtod_l+0xa0>
   d9b72:	2a08      	cmp	r2, #8
   d9b74:	d832      	bhi.n	d9bdc <_strtod_l+0xa4>
   d9b76:	2a00      	cmp	r2, #0
   d9b78:	d03c      	beq.n	d9bf4 <_strtod_l+0xbc>
   d9b7a:	2300      	movs	r3, #0
   d9b7c:	930e      	str	r3, [sp, #56]	; 0x38
   d9b7e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
   d9b80:	7833      	ldrb	r3, [r6, #0]
   d9b82:	2b30      	cmp	r3, #48	; 0x30
   d9b84:	f040 80b4 	bne.w	d9cf0 <_strtod_l+0x1b8>
   d9b88:	7873      	ldrb	r3, [r6, #1]
   d9b8a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   d9b8e:	2b58      	cmp	r3, #88	; 0x58
   d9b90:	d16c      	bne.n	d9c6c <_strtod_l+0x134>
   d9b92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d9b94:	9301      	str	r3, [sp, #4]
   d9b96:	ab1e      	add	r3, sp, #120	; 0x78
   d9b98:	9702      	str	r7, [sp, #8]
   d9b9a:	9300      	str	r3, [sp, #0]
   d9b9c:	4a8f      	ldr	r2, [pc, #572]	; (d9ddc <_strtod_l+0x2a4>)
   d9b9e:	ab1f      	add	r3, sp, #124	; 0x7c
   d9ba0:	a91d      	add	r1, sp, #116	; 0x74
   d9ba2:	4620      	mov	r0, r4
   d9ba4:	f000 fe98 	bl	da8d8 <__gethex>
   d9ba8:	f010 0707 	ands.w	r7, r0, #7
   d9bac:	4605      	mov	r5, r0
   d9bae:	d005      	beq.n	d9bbc <_strtod_l+0x84>
   d9bb0:	2f06      	cmp	r7, #6
   d9bb2:	d12a      	bne.n	d9c0a <_strtod_l+0xd2>
   d9bb4:	3601      	adds	r6, #1
   d9bb6:	2300      	movs	r3, #0
   d9bb8:	961d      	str	r6, [sp, #116]	; 0x74
   d9bba:	930e      	str	r3, [sp, #56]	; 0x38
   d9bbc:	9b19      	ldr	r3, [sp, #100]	; 0x64
   d9bbe:	2b00      	cmp	r3, #0
   d9bc0:	f040 8596 	bne.w	da6f0 <_strtod_l+0xbb8>
   d9bc4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d9bc6:	b1db      	cbz	r3, d9c00 <_strtod_l+0xc8>
   d9bc8:	4652      	mov	r2, sl
   d9bca:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   d9bce:	ec43 2b10 	vmov	d0, r2, r3
   d9bd2:	b023      	add	sp, #140	; 0x8c
   d9bd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d9bd8:	2a20      	cmp	r2, #32
   d9bda:	d1ce      	bne.n	d9b7a <_strtod_l+0x42>
   d9bdc:	3301      	adds	r3, #1
   d9bde:	931d      	str	r3, [sp, #116]	; 0x74
   d9be0:	e7c0      	b.n	d9b64 <_strtod_l+0x2c>
   d9be2:	2a2d      	cmp	r2, #45	; 0x2d
   d9be4:	d1c9      	bne.n	d9b7a <_strtod_l+0x42>
   d9be6:	2201      	movs	r2, #1
   d9be8:	920e      	str	r2, [sp, #56]	; 0x38
   d9bea:	1c5a      	adds	r2, r3, #1
   d9bec:	921d      	str	r2, [sp, #116]	; 0x74
   d9bee:	785b      	ldrb	r3, [r3, #1]
   d9bf0:	2b00      	cmp	r3, #0
   d9bf2:	d1c4      	bne.n	d9b7e <_strtod_l+0x46>
   d9bf4:	9b19      	ldr	r3, [sp, #100]	; 0x64
   d9bf6:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   d9bfa:	2b00      	cmp	r3, #0
   d9bfc:	f040 8576 	bne.w	da6ec <_strtod_l+0xbb4>
   d9c00:	4652      	mov	r2, sl
   d9c02:	465b      	mov	r3, fp
   d9c04:	e7e3      	b.n	d9bce <_strtod_l+0x96>
   d9c06:	2200      	movs	r2, #0
   d9c08:	e7ee      	b.n	d9be8 <_strtod_l+0xb0>
   d9c0a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   d9c0c:	b13a      	cbz	r2, d9c1e <_strtod_l+0xe6>
   d9c0e:	2135      	movs	r1, #53	; 0x35
   d9c10:	a820      	add	r0, sp, #128	; 0x80
   d9c12:	f001 fd64 	bl	db6de <__copybits>
   d9c16:	991e      	ldr	r1, [sp, #120]	; 0x78
   d9c18:	4620      	mov	r0, r4
   d9c1a:	f001 f999 	bl	daf50 <_Bfree>
   d9c1e:	3f01      	subs	r7, #1
   d9c20:	2f05      	cmp	r7, #5
   d9c22:	d807      	bhi.n	d9c34 <_strtod_l+0xfc>
   d9c24:	e8df f007 	tbb	[pc, r7]
   d9c28:	1d180b0e 	.word	0x1d180b0e
   d9c2c:	030e      	.short	0x030e
   d9c2e:	f04f 0b00 	mov.w	fp, #0
   d9c32:	46da      	mov	sl, fp
   d9c34:	0728      	lsls	r0, r5, #28
   d9c36:	d5c1      	bpl.n	d9bbc <_strtod_l+0x84>
   d9c38:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   d9c3c:	e7be      	b.n	d9bbc <_strtod_l+0x84>
   d9c3e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
   d9c42:	e7f7      	b.n	d9c34 <_strtod_l+0xfc>
   d9c44:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
   d9c48:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   d9c4a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   d9c4e:	f202 4233 	addw	r2, r2, #1075	; 0x433
   d9c52:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   d9c56:	e7ed      	b.n	d9c34 <_strtod_l+0xfc>
   d9c58:	f8df b184 	ldr.w	fp, [pc, #388]	; d9de0 <_strtod_l+0x2a8>
   d9c5c:	f04f 0a00 	mov.w	sl, #0
   d9c60:	e7e8      	b.n	d9c34 <_strtod_l+0xfc>
   d9c62:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   d9c66:	f04f 3aff 	mov.w	sl, #4294967295
   d9c6a:	e7e3      	b.n	d9c34 <_strtod_l+0xfc>
   d9c6c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d9c6e:	1c5a      	adds	r2, r3, #1
   d9c70:	921d      	str	r2, [sp, #116]	; 0x74
   d9c72:	785b      	ldrb	r3, [r3, #1]
   d9c74:	2b30      	cmp	r3, #48	; 0x30
   d9c76:	d0f9      	beq.n	d9c6c <_strtod_l+0x134>
   d9c78:	2b00      	cmp	r3, #0
   d9c7a:	d09f      	beq.n	d9bbc <_strtod_l+0x84>
   d9c7c:	2301      	movs	r3, #1
   d9c7e:	f04f 0900 	mov.w	r9, #0
   d9c82:	9304      	str	r3, [sp, #16]
   d9c84:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d9c86:	930a      	str	r3, [sp, #40]	; 0x28
   d9c88:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   d9c8c:	464f      	mov	r7, r9
   d9c8e:	220a      	movs	r2, #10
   d9c90:	981d      	ldr	r0, [sp, #116]	; 0x74
   d9c92:	7806      	ldrb	r6, [r0, #0]
   d9c94:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   d9c98:	b2d9      	uxtb	r1, r3
   d9c9a:	2909      	cmp	r1, #9
   d9c9c:	d92a      	bls.n	d9cf4 <_strtod_l+0x1bc>
   d9c9e:	9907      	ldr	r1, [sp, #28]
   d9ca0:	462a      	mov	r2, r5
   d9ca2:	f7ff fef0 	bl	d9a86 <strncmp>
   d9ca6:	b398      	cbz	r0, d9d10 <_strtod_l+0x1d8>
   d9ca8:	2000      	movs	r0, #0
   d9caa:	4633      	mov	r3, r6
   d9cac:	463d      	mov	r5, r7
   d9cae:	9007      	str	r0, [sp, #28]
   d9cb0:	4602      	mov	r2, r0
   d9cb2:	2b65      	cmp	r3, #101	; 0x65
   d9cb4:	d001      	beq.n	d9cba <_strtod_l+0x182>
   d9cb6:	2b45      	cmp	r3, #69	; 0x45
   d9cb8:	d118      	bne.n	d9cec <_strtod_l+0x1b4>
   d9cba:	b91d      	cbnz	r5, d9cc4 <_strtod_l+0x18c>
   d9cbc:	9b04      	ldr	r3, [sp, #16]
   d9cbe:	4303      	orrs	r3, r0
   d9cc0:	d098      	beq.n	d9bf4 <_strtod_l+0xbc>
   d9cc2:	2500      	movs	r5, #0
   d9cc4:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
   d9cc8:	f108 0301 	add.w	r3, r8, #1
   d9ccc:	931d      	str	r3, [sp, #116]	; 0x74
   d9cce:	f898 3001 	ldrb.w	r3, [r8, #1]
   d9cd2:	2b2b      	cmp	r3, #43	; 0x2b
   d9cd4:	d075      	beq.n	d9dc2 <_strtod_l+0x28a>
   d9cd6:	2b2d      	cmp	r3, #45	; 0x2d
   d9cd8:	d07b      	beq.n	d9dd2 <_strtod_l+0x29a>
   d9cda:	f04f 0c00 	mov.w	ip, #0
   d9cde:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   d9ce2:	2909      	cmp	r1, #9
   d9ce4:	f240 8082 	bls.w	d9dec <_strtod_l+0x2b4>
   d9ce8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   d9cec:	2600      	movs	r6, #0
   d9cee:	e09d      	b.n	d9e2c <_strtod_l+0x2f4>
   d9cf0:	2300      	movs	r3, #0
   d9cf2:	e7c4      	b.n	d9c7e <_strtod_l+0x146>
   d9cf4:	2f08      	cmp	r7, #8
   d9cf6:	bfd8      	it	le
   d9cf8:	9909      	ldrle	r1, [sp, #36]	; 0x24
   d9cfa:	f100 0001 	add.w	r0, r0, #1
   d9cfe:	bfda      	itte	le
   d9d00:	fb02 3301 	mlale	r3, r2, r1, r3
   d9d04:	9309      	strle	r3, [sp, #36]	; 0x24
   d9d06:	fb02 3909 	mlagt	r9, r2, r9, r3
   d9d0a:	3701      	adds	r7, #1
   d9d0c:	901d      	str	r0, [sp, #116]	; 0x74
   d9d0e:	e7bf      	b.n	d9c90 <_strtod_l+0x158>
   d9d10:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d9d12:	195a      	adds	r2, r3, r5
   d9d14:	921d      	str	r2, [sp, #116]	; 0x74
   d9d16:	5d5b      	ldrb	r3, [r3, r5]
   d9d18:	2f00      	cmp	r7, #0
   d9d1a:	d037      	beq.n	d9d8c <_strtod_l+0x254>
   d9d1c:	9007      	str	r0, [sp, #28]
   d9d1e:	463d      	mov	r5, r7
   d9d20:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   d9d24:	2a09      	cmp	r2, #9
   d9d26:	d912      	bls.n	d9d4e <_strtod_l+0x216>
   d9d28:	2201      	movs	r2, #1
   d9d2a:	e7c2      	b.n	d9cb2 <_strtod_l+0x17a>
   d9d2c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d9d2e:	1c5a      	adds	r2, r3, #1
   d9d30:	921d      	str	r2, [sp, #116]	; 0x74
   d9d32:	785b      	ldrb	r3, [r3, #1]
   d9d34:	3001      	adds	r0, #1
   d9d36:	2b30      	cmp	r3, #48	; 0x30
   d9d38:	d0f8      	beq.n	d9d2c <_strtod_l+0x1f4>
   d9d3a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   d9d3e:	2a08      	cmp	r2, #8
   d9d40:	f200 84db 	bhi.w	da6fa <_strtod_l+0xbc2>
   d9d44:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   d9d46:	9007      	str	r0, [sp, #28]
   d9d48:	2000      	movs	r0, #0
   d9d4a:	920a      	str	r2, [sp, #40]	; 0x28
   d9d4c:	4605      	mov	r5, r0
   d9d4e:	3b30      	subs	r3, #48	; 0x30
   d9d50:	f100 0201 	add.w	r2, r0, #1
   d9d54:	d014      	beq.n	d9d80 <_strtod_l+0x248>
   d9d56:	9907      	ldr	r1, [sp, #28]
   d9d58:	4411      	add	r1, r2
   d9d5a:	9107      	str	r1, [sp, #28]
   d9d5c:	462a      	mov	r2, r5
   d9d5e:	eb00 0e05 	add.w	lr, r0, r5
   d9d62:	210a      	movs	r1, #10
   d9d64:	4572      	cmp	r2, lr
   d9d66:	d113      	bne.n	d9d90 <_strtod_l+0x258>
   d9d68:	182a      	adds	r2, r5, r0
   d9d6a:	2a08      	cmp	r2, #8
   d9d6c:	f105 0501 	add.w	r5, r5, #1
   d9d70:	4405      	add	r5, r0
   d9d72:	dc1c      	bgt.n	d9dae <_strtod_l+0x276>
   d9d74:	9909      	ldr	r1, [sp, #36]	; 0x24
   d9d76:	220a      	movs	r2, #10
   d9d78:	fb02 3301 	mla	r3, r2, r1, r3
   d9d7c:	9309      	str	r3, [sp, #36]	; 0x24
   d9d7e:	2200      	movs	r2, #0
   d9d80:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d9d82:	1c59      	adds	r1, r3, #1
   d9d84:	911d      	str	r1, [sp, #116]	; 0x74
   d9d86:	785b      	ldrb	r3, [r3, #1]
   d9d88:	4610      	mov	r0, r2
   d9d8a:	e7c9      	b.n	d9d20 <_strtod_l+0x1e8>
   d9d8c:	4638      	mov	r0, r7
   d9d8e:	e7d2      	b.n	d9d36 <_strtod_l+0x1fe>
   d9d90:	2a08      	cmp	r2, #8
   d9d92:	dc04      	bgt.n	d9d9e <_strtod_l+0x266>
   d9d94:	9e09      	ldr	r6, [sp, #36]	; 0x24
   d9d96:	434e      	muls	r6, r1
   d9d98:	9609      	str	r6, [sp, #36]	; 0x24
   d9d9a:	3201      	adds	r2, #1
   d9d9c:	e7e2      	b.n	d9d64 <_strtod_l+0x22c>
   d9d9e:	f102 0c01 	add.w	ip, r2, #1
   d9da2:	f1bc 0f10 	cmp.w	ip, #16
   d9da6:	bfd8      	it	le
   d9da8:	fb01 f909 	mulle.w	r9, r1, r9
   d9dac:	e7f5      	b.n	d9d9a <_strtod_l+0x262>
   d9dae:	2d10      	cmp	r5, #16
   d9db0:	bfdc      	itt	le
   d9db2:	220a      	movle	r2, #10
   d9db4:	fb02 3909 	mlale	r9, r2, r9, r3
   d9db8:	e7e1      	b.n	d9d7e <_strtod_l+0x246>
   d9dba:	2300      	movs	r3, #0
   d9dbc:	9307      	str	r3, [sp, #28]
   d9dbe:	2201      	movs	r2, #1
   d9dc0:	e77c      	b.n	d9cbc <_strtod_l+0x184>
   d9dc2:	f04f 0c00 	mov.w	ip, #0
   d9dc6:	f108 0302 	add.w	r3, r8, #2
   d9dca:	931d      	str	r3, [sp, #116]	; 0x74
   d9dcc:	f898 3002 	ldrb.w	r3, [r8, #2]
   d9dd0:	e785      	b.n	d9cde <_strtod_l+0x1a6>
   d9dd2:	f04f 0c01 	mov.w	ip, #1
   d9dd6:	e7f6      	b.n	d9dc6 <_strtod_l+0x28e>
   d9dd8:	000dc2f4 	.word	0x000dc2f4
   d9ddc:	000dc19c 	.word	0x000dc19c
   d9de0:	7ff00000 	.word	0x7ff00000
   d9de4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d9de6:	1c59      	adds	r1, r3, #1
   d9de8:	911d      	str	r1, [sp, #116]	; 0x74
   d9dea:	785b      	ldrb	r3, [r3, #1]
   d9dec:	2b30      	cmp	r3, #48	; 0x30
   d9dee:	d0f9      	beq.n	d9de4 <_strtod_l+0x2ac>
   d9df0:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
   d9df4:	2908      	cmp	r1, #8
   d9df6:	f63f af79 	bhi.w	d9cec <_strtod_l+0x1b4>
   d9dfa:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   d9dfe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d9e00:	9308      	str	r3, [sp, #32]
   d9e02:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d9e04:	1c59      	adds	r1, r3, #1
   d9e06:	911d      	str	r1, [sp, #116]	; 0x74
   d9e08:	785b      	ldrb	r3, [r3, #1]
   d9e0a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   d9e0e:	2e09      	cmp	r6, #9
   d9e10:	d937      	bls.n	d9e82 <_strtod_l+0x34a>
   d9e12:	9e08      	ldr	r6, [sp, #32]
   d9e14:	1b89      	subs	r1, r1, r6
   d9e16:	2908      	cmp	r1, #8
   d9e18:	f644 661f 	movw	r6, #19999	; 0x4e1f
   d9e1c:	dc02      	bgt.n	d9e24 <_strtod_l+0x2ec>
   d9e1e:	4576      	cmp	r6, lr
   d9e20:	bfa8      	it	ge
   d9e22:	4676      	movge	r6, lr
   d9e24:	f1bc 0f00 	cmp.w	ip, #0
   d9e28:	d000      	beq.n	d9e2c <_strtod_l+0x2f4>
   d9e2a:	4276      	negs	r6, r6
   d9e2c:	2d00      	cmp	r5, #0
   d9e2e:	d14f      	bne.n	d9ed0 <_strtod_l+0x398>
   d9e30:	9904      	ldr	r1, [sp, #16]
   d9e32:	4301      	orrs	r1, r0
   d9e34:	f47f aec2 	bne.w	d9bbc <_strtod_l+0x84>
   d9e38:	2a00      	cmp	r2, #0
   d9e3a:	f47f aedb 	bne.w	d9bf4 <_strtod_l+0xbc>
   d9e3e:	2b69      	cmp	r3, #105	; 0x69
   d9e40:	d027      	beq.n	d9e92 <_strtod_l+0x35a>
   d9e42:	dc24      	bgt.n	d9e8e <_strtod_l+0x356>
   d9e44:	2b49      	cmp	r3, #73	; 0x49
   d9e46:	d024      	beq.n	d9e92 <_strtod_l+0x35a>
   d9e48:	2b4e      	cmp	r3, #78	; 0x4e
   d9e4a:	f47f aed3 	bne.w	d9bf4 <_strtod_l+0xbc>
   d9e4e:	499e      	ldr	r1, [pc, #632]	; (da0c8 <_strtod_l+0x590>)
   d9e50:	a81d      	add	r0, sp, #116	; 0x74
   d9e52:	f000 ff87 	bl	dad64 <__match>
   d9e56:	2800      	cmp	r0, #0
   d9e58:	f43f aecc 	beq.w	d9bf4 <_strtod_l+0xbc>
   d9e5c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d9e5e:	781b      	ldrb	r3, [r3, #0]
   d9e60:	2b28      	cmp	r3, #40	; 0x28
   d9e62:	d12d      	bne.n	d9ec0 <_strtod_l+0x388>
   d9e64:	4999      	ldr	r1, [pc, #612]	; (da0cc <_strtod_l+0x594>)
   d9e66:	aa20      	add	r2, sp, #128	; 0x80
   d9e68:	a81d      	add	r0, sp, #116	; 0x74
   d9e6a:	f000 ff8f 	bl	dad8c <__hexnan>
   d9e6e:	2805      	cmp	r0, #5
   d9e70:	d126      	bne.n	d9ec0 <_strtod_l+0x388>
   d9e72:	9b21      	ldr	r3, [sp, #132]	; 0x84
   d9e74:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
   d9e78:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   d9e7c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   d9e80:	e69c      	b.n	d9bbc <_strtod_l+0x84>
   d9e82:	210a      	movs	r1, #10
   d9e84:	fb01 3e0e 	mla	lr, r1, lr, r3
   d9e88:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   d9e8c:	e7b9      	b.n	d9e02 <_strtod_l+0x2ca>
   d9e8e:	2b6e      	cmp	r3, #110	; 0x6e
   d9e90:	e7db      	b.n	d9e4a <_strtod_l+0x312>
   d9e92:	498f      	ldr	r1, [pc, #572]	; (da0d0 <_strtod_l+0x598>)
   d9e94:	a81d      	add	r0, sp, #116	; 0x74
   d9e96:	f000 ff65 	bl	dad64 <__match>
   d9e9a:	2800      	cmp	r0, #0
   d9e9c:	f43f aeaa 	beq.w	d9bf4 <_strtod_l+0xbc>
   d9ea0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d9ea2:	498c      	ldr	r1, [pc, #560]	; (da0d4 <_strtod_l+0x59c>)
   d9ea4:	3b01      	subs	r3, #1
   d9ea6:	a81d      	add	r0, sp, #116	; 0x74
   d9ea8:	931d      	str	r3, [sp, #116]	; 0x74
   d9eaa:	f000 ff5b 	bl	dad64 <__match>
   d9eae:	b910      	cbnz	r0, d9eb6 <_strtod_l+0x37e>
   d9eb0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d9eb2:	3301      	adds	r3, #1
   d9eb4:	931d      	str	r3, [sp, #116]	; 0x74
   d9eb6:	f8df b22c 	ldr.w	fp, [pc, #556]	; da0e4 <_strtod_l+0x5ac>
   d9eba:	f04f 0a00 	mov.w	sl, #0
   d9ebe:	e67d      	b.n	d9bbc <_strtod_l+0x84>
   d9ec0:	4885      	ldr	r0, [pc, #532]	; (da0d8 <_strtod_l+0x5a0>)
   d9ec2:	f001 fc61 	bl	db788 <nan>
   d9ec6:	ed8d 0b04 	vstr	d0, [sp, #16]
   d9eca:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
   d9ece:	e675      	b.n	d9bbc <_strtod_l+0x84>
   d9ed0:	9b07      	ldr	r3, [sp, #28]
   d9ed2:	9809      	ldr	r0, [sp, #36]	; 0x24
   d9ed4:	1af3      	subs	r3, r6, r3
   d9ed6:	2f00      	cmp	r7, #0
   d9ed8:	bf08      	it	eq
   d9eda:	462f      	moveq	r7, r5
   d9edc:	2d10      	cmp	r5, #16
   d9ede:	9308      	str	r3, [sp, #32]
   d9ee0:	46a8      	mov	r8, r5
   d9ee2:	bfa8      	it	ge
   d9ee4:	f04f 0810 	movge.w	r8, #16
   d9ee8:	f7ff f81e 	bl	d8f28 <__aeabi_ui2d>
   d9eec:	2d09      	cmp	r5, #9
   d9eee:	4682      	mov	sl, r0
   d9ef0:	468b      	mov	fp, r1
   d9ef2:	dd13      	ble.n	d9f1c <_strtod_l+0x3e4>
   d9ef4:	4b79      	ldr	r3, [pc, #484]	; (da0dc <_strtod_l+0x5a4>)
   d9ef6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   d9efa:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   d9efe:	f7ff f88d 	bl	d901c <__aeabi_dmul>
   d9f02:	4682      	mov	sl, r0
   d9f04:	4648      	mov	r0, r9
   d9f06:	468b      	mov	fp, r1
   d9f08:	f7ff f80e 	bl	d8f28 <__aeabi_ui2d>
   d9f0c:	4602      	mov	r2, r0
   d9f0e:	460b      	mov	r3, r1
   d9f10:	4650      	mov	r0, sl
   d9f12:	4659      	mov	r1, fp
   d9f14:	f7fe fecc 	bl	d8cb0 <__adddf3>
   d9f18:	4682      	mov	sl, r0
   d9f1a:	468b      	mov	fp, r1
   d9f1c:	2d0f      	cmp	r5, #15
   d9f1e:	dc38      	bgt.n	d9f92 <_strtod_l+0x45a>
   d9f20:	9b08      	ldr	r3, [sp, #32]
   d9f22:	2b00      	cmp	r3, #0
   d9f24:	f43f ae4a 	beq.w	d9bbc <_strtod_l+0x84>
   d9f28:	dd24      	ble.n	d9f74 <_strtod_l+0x43c>
   d9f2a:	2b16      	cmp	r3, #22
   d9f2c:	dc0b      	bgt.n	d9f46 <_strtod_l+0x40e>
   d9f2e:	4d6b      	ldr	r5, [pc, #428]	; (da0dc <_strtod_l+0x5a4>)
   d9f30:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
   d9f34:	e9d5 0100 	ldrd	r0, r1, [r5]
   d9f38:	4652      	mov	r2, sl
   d9f3a:	465b      	mov	r3, fp
   d9f3c:	f7ff f86e 	bl	d901c <__aeabi_dmul>
   d9f40:	4682      	mov	sl, r0
   d9f42:	468b      	mov	fp, r1
   d9f44:	e63a      	b.n	d9bbc <_strtod_l+0x84>
   d9f46:	9a08      	ldr	r2, [sp, #32]
   d9f48:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   d9f4c:	4293      	cmp	r3, r2
   d9f4e:	db20      	blt.n	d9f92 <_strtod_l+0x45a>
   d9f50:	4c62      	ldr	r4, [pc, #392]	; (da0dc <_strtod_l+0x5a4>)
   d9f52:	f1c5 050f 	rsb	r5, r5, #15
   d9f56:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   d9f5a:	4652      	mov	r2, sl
   d9f5c:	465b      	mov	r3, fp
   d9f5e:	e9d1 0100 	ldrd	r0, r1, [r1]
   d9f62:	f7ff f85b 	bl	d901c <__aeabi_dmul>
   d9f66:	9b08      	ldr	r3, [sp, #32]
   d9f68:	1b5d      	subs	r5, r3, r5
   d9f6a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   d9f6e:	e9d4 2300 	ldrd	r2, r3, [r4]
   d9f72:	e7e3      	b.n	d9f3c <_strtod_l+0x404>
   d9f74:	9b08      	ldr	r3, [sp, #32]
   d9f76:	3316      	adds	r3, #22
   d9f78:	db0b      	blt.n	d9f92 <_strtod_l+0x45a>
   d9f7a:	9b07      	ldr	r3, [sp, #28]
   d9f7c:	4a57      	ldr	r2, [pc, #348]	; (da0dc <_strtod_l+0x5a4>)
   d9f7e:	1b9e      	subs	r6, r3, r6
   d9f80:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
   d9f84:	e9d6 2300 	ldrd	r2, r3, [r6]
   d9f88:	4650      	mov	r0, sl
   d9f8a:	4659      	mov	r1, fp
   d9f8c:	f7ff f970 	bl	d9270 <__aeabi_ddiv>
   d9f90:	e7d6      	b.n	d9f40 <_strtod_l+0x408>
   d9f92:	9b08      	ldr	r3, [sp, #32]
   d9f94:	eba5 0808 	sub.w	r8, r5, r8
   d9f98:	4498      	add	r8, r3
   d9f9a:	f1b8 0f00 	cmp.w	r8, #0
   d9f9e:	dd71      	ble.n	da084 <_strtod_l+0x54c>
   d9fa0:	f018 030f 	ands.w	r3, r8, #15
   d9fa4:	d00a      	beq.n	d9fbc <_strtod_l+0x484>
   d9fa6:	494d      	ldr	r1, [pc, #308]	; (da0dc <_strtod_l+0x5a4>)
   d9fa8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   d9fac:	4652      	mov	r2, sl
   d9fae:	465b      	mov	r3, fp
   d9fb0:	e9d1 0100 	ldrd	r0, r1, [r1]
   d9fb4:	f7ff f832 	bl	d901c <__aeabi_dmul>
   d9fb8:	4682      	mov	sl, r0
   d9fba:	468b      	mov	fp, r1
   d9fbc:	f038 080f 	bics.w	r8, r8, #15
   d9fc0:	d04d      	beq.n	da05e <_strtod_l+0x526>
   d9fc2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   d9fc6:	dd22      	ble.n	da00e <_strtod_l+0x4d6>
   d9fc8:	2500      	movs	r5, #0
   d9fca:	462e      	mov	r6, r5
   d9fcc:	9509      	str	r5, [sp, #36]	; 0x24
   d9fce:	9507      	str	r5, [sp, #28]
   d9fd0:	2322      	movs	r3, #34	; 0x22
   d9fd2:	f8df b110 	ldr.w	fp, [pc, #272]	; da0e4 <_strtod_l+0x5ac>
   d9fd6:	6023      	str	r3, [r4, #0]
   d9fd8:	f04f 0a00 	mov.w	sl, #0
   d9fdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d9fde:	2b00      	cmp	r3, #0
   d9fe0:	f43f adec 	beq.w	d9bbc <_strtod_l+0x84>
   d9fe4:	991e      	ldr	r1, [sp, #120]	; 0x78
   d9fe6:	4620      	mov	r0, r4
   d9fe8:	f000 ffb2 	bl	daf50 <_Bfree>
   d9fec:	9907      	ldr	r1, [sp, #28]
   d9fee:	4620      	mov	r0, r4
   d9ff0:	f000 ffae 	bl	daf50 <_Bfree>
   d9ff4:	4631      	mov	r1, r6
   d9ff6:	4620      	mov	r0, r4
   d9ff8:	f000 ffaa 	bl	daf50 <_Bfree>
   d9ffc:	9909      	ldr	r1, [sp, #36]	; 0x24
   d9ffe:	4620      	mov	r0, r4
   da000:	f000 ffa6 	bl	daf50 <_Bfree>
   da004:	4629      	mov	r1, r5
   da006:	4620      	mov	r0, r4
   da008:	f000 ffa2 	bl	daf50 <_Bfree>
   da00c:	e5d6      	b.n	d9bbc <_strtod_l+0x84>
   da00e:	2300      	movs	r3, #0
   da010:	ea4f 1828 	mov.w	r8, r8, asr #4
   da014:	4650      	mov	r0, sl
   da016:	4659      	mov	r1, fp
   da018:	4699      	mov	r9, r3
   da01a:	f1b8 0f01 	cmp.w	r8, #1
   da01e:	dc21      	bgt.n	da064 <_strtod_l+0x52c>
   da020:	b10b      	cbz	r3, da026 <_strtod_l+0x4ee>
   da022:	4682      	mov	sl, r0
   da024:	468b      	mov	fp, r1
   da026:	4b2e      	ldr	r3, [pc, #184]	; (da0e0 <_strtod_l+0x5a8>)
   da028:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   da02c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   da030:	4652      	mov	r2, sl
   da032:	465b      	mov	r3, fp
   da034:	e9d9 0100 	ldrd	r0, r1, [r9]
   da038:	f7fe fff0 	bl	d901c <__aeabi_dmul>
   da03c:	4b29      	ldr	r3, [pc, #164]	; (da0e4 <_strtod_l+0x5ac>)
   da03e:	460a      	mov	r2, r1
   da040:	400b      	ands	r3, r1
   da042:	4929      	ldr	r1, [pc, #164]	; (da0e8 <_strtod_l+0x5b0>)
   da044:	428b      	cmp	r3, r1
   da046:	4682      	mov	sl, r0
   da048:	d8be      	bhi.n	d9fc8 <_strtod_l+0x490>
   da04a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   da04e:	428b      	cmp	r3, r1
   da050:	bf86      	itte	hi
   da052:	f8df b098 	ldrhi.w	fp, [pc, #152]	; da0ec <_strtod_l+0x5b4>
   da056:	f04f 3aff 	movhi.w	sl, #4294967295
   da05a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   da05e:	2300      	movs	r3, #0
   da060:	9304      	str	r3, [sp, #16]
   da062:	e081      	b.n	da168 <_strtod_l+0x630>
   da064:	f018 0f01 	tst.w	r8, #1
   da068:	d007      	beq.n	da07a <_strtod_l+0x542>
   da06a:	4b1d      	ldr	r3, [pc, #116]	; (da0e0 <_strtod_l+0x5a8>)
   da06c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
   da070:	e9d3 2300 	ldrd	r2, r3, [r3]
   da074:	f7fe ffd2 	bl	d901c <__aeabi_dmul>
   da078:	2301      	movs	r3, #1
   da07a:	f109 0901 	add.w	r9, r9, #1
   da07e:	ea4f 0868 	mov.w	r8, r8, asr #1
   da082:	e7ca      	b.n	da01a <_strtod_l+0x4e2>
   da084:	d0eb      	beq.n	da05e <_strtod_l+0x526>
   da086:	f1c8 0800 	rsb	r8, r8, #0
   da08a:	f018 020f 	ands.w	r2, r8, #15
   da08e:	d00a      	beq.n	da0a6 <_strtod_l+0x56e>
   da090:	4b12      	ldr	r3, [pc, #72]	; (da0dc <_strtod_l+0x5a4>)
   da092:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   da096:	4650      	mov	r0, sl
   da098:	4659      	mov	r1, fp
   da09a:	e9d3 2300 	ldrd	r2, r3, [r3]
   da09e:	f7ff f8e7 	bl	d9270 <__aeabi_ddiv>
   da0a2:	4682      	mov	sl, r0
   da0a4:	468b      	mov	fp, r1
   da0a6:	ea5f 1828 	movs.w	r8, r8, asr #4
   da0aa:	d0d8      	beq.n	da05e <_strtod_l+0x526>
   da0ac:	f1b8 0f1f 	cmp.w	r8, #31
   da0b0:	dd1e      	ble.n	da0f0 <_strtod_l+0x5b8>
   da0b2:	2500      	movs	r5, #0
   da0b4:	462e      	mov	r6, r5
   da0b6:	9509      	str	r5, [sp, #36]	; 0x24
   da0b8:	9507      	str	r5, [sp, #28]
   da0ba:	2322      	movs	r3, #34	; 0x22
   da0bc:	f04f 0a00 	mov.w	sl, #0
   da0c0:	f04f 0b00 	mov.w	fp, #0
   da0c4:	6023      	str	r3, [r4, #0]
   da0c6:	e789      	b.n	d9fdc <_strtod_l+0x4a4>
   da0c8:	000dc196 	.word	0x000dc196
   da0cc:	000dc1b0 	.word	0x000dc1b0
   da0d0:	000dc18d 	.word	0x000dc18d
   da0d4:	000dc190 	.word	0x000dc190
   da0d8:	000dbd11 	.word	0x000dbd11
   da0dc:	000dc330 	.word	0x000dc330
   da0e0:	000dc308 	.word	0x000dc308
   da0e4:	7ff00000 	.word	0x7ff00000
   da0e8:	7ca00000 	.word	0x7ca00000
   da0ec:	7fefffff 	.word	0x7fefffff
   da0f0:	f018 0310 	ands.w	r3, r8, #16
   da0f4:	bf18      	it	ne
   da0f6:	236a      	movne	r3, #106	; 0x6a
   da0f8:	f8df 93b4 	ldr.w	r9, [pc, #948]	; da4b0 <_strtod_l+0x978>
   da0fc:	9304      	str	r3, [sp, #16]
   da0fe:	4650      	mov	r0, sl
   da100:	4659      	mov	r1, fp
   da102:	2300      	movs	r3, #0
   da104:	f018 0f01 	tst.w	r8, #1
   da108:	d004      	beq.n	da114 <_strtod_l+0x5dc>
   da10a:	e9d9 2300 	ldrd	r2, r3, [r9]
   da10e:	f7fe ff85 	bl	d901c <__aeabi_dmul>
   da112:	2301      	movs	r3, #1
   da114:	ea5f 0868 	movs.w	r8, r8, asr #1
   da118:	f109 0908 	add.w	r9, r9, #8
   da11c:	d1f2      	bne.n	da104 <_strtod_l+0x5cc>
   da11e:	b10b      	cbz	r3, da124 <_strtod_l+0x5ec>
   da120:	4682      	mov	sl, r0
   da122:	468b      	mov	fp, r1
   da124:	9b04      	ldr	r3, [sp, #16]
   da126:	b1bb      	cbz	r3, da158 <_strtod_l+0x620>
   da128:	f3cb 530a 	ubfx	r3, fp, #20, #11
   da12c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   da130:	2b00      	cmp	r3, #0
   da132:	4659      	mov	r1, fp
   da134:	dd10      	ble.n	da158 <_strtod_l+0x620>
   da136:	2b1f      	cmp	r3, #31
   da138:	f340 8128 	ble.w	da38c <_strtod_l+0x854>
   da13c:	2b34      	cmp	r3, #52	; 0x34
   da13e:	bfde      	ittt	le
   da140:	3b20      	suble	r3, #32
   da142:	f04f 32ff 	movle.w	r2, #4294967295
   da146:	fa02 f303 	lslle.w	r3, r2, r3
   da14a:	f04f 0a00 	mov.w	sl, #0
   da14e:	bfcc      	ite	gt
   da150:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   da154:	ea03 0b01 	andle.w	fp, r3, r1
   da158:	2200      	movs	r2, #0
   da15a:	2300      	movs	r3, #0
   da15c:	4650      	mov	r0, sl
   da15e:	4659      	mov	r1, fp
   da160:	f7ff f9c4 	bl	d94ec <__aeabi_dcmpeq>
   da164:	2800      	cmp	r0, #0
   da166:	d1a4      	bne.n	da0b2 <_strtod_l+0x57a>
   da168:	9b09      	ldr	r3, [sp, #36]	; 0x24
   da16a:	9300      	str	r3, [sp, #0]
   da16c:	990a      	ldr	r1, [sp, #40]	; 0x28
   da16e:	462b      	mov	r3, r5
   da170:	463a      	mov	r2, r7
   da172:	4620      	mov	r0, r4
   da174:	f000 ff41 	bl	daffa <__s2b>
   da178:	9009      	str	r0, [sp, #36]	; 0x24
   da17a:	2800      	cmp	r0, #0
   da17c:	f43f af24 	beq.w	d9fc8 <_strtod_l+0x490>
   da180:	9b07      	ldr	r3, [sp, #28]
   da182:	1b9e      	subs	r6, r3, r6
   da184:	9b08      	ldr	r3, [sp, #32]
   da186:	2b00      	cmp	r3, #0
   da188:	bfb4      	ite	lt
   da18a:	4633      	movlt	r3, r6
   da18c:	2300      	movge	r3, #0
   da18e:	9310      	str	r3, [sp, #64]	; 0x40
   da190:	9b08      	ldr	r3, [sp, #32]
   da192:	2500      	movs	r5, #0
   da194:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   da198:	9318      	str	r3, [sp, #96]	; 0x60
   da19a:	462e      	mov	r6, r5
   da19c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   da19e:	4620      	mov	r0, r4
   da1a0:	6859      	ldr	r1, [r3, #4]
   da1a2:	f000 fea1 	bl	daee8 <_Balloc>
   da1a6:	9007      	str	r0, [sp, #28]
   da1a8:	2800      	cmp	r0, #0
   da1aa:	f43f af11 	beq.w	d9fd0 <_strtod_l+0x498>
   da1ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
   da1b0:	691a      	ldr	r2, [r3, #16]
   da1b2:	3202      	adds	r2, #2
   da1b4:	f103 010c 	add.w	r1, r3, #12
   da1b8:	0092      	lsls	r2, r2, #2
   da1ba:	300c      	adds	r0, #12
   da1bc:	f7ff fbe4 	bl	d9988 <memcpy>
   da1c0:	ec4b ab10 	vmov	d0, sl, fp
   da1c4:	aa20      	add	r2, sp, #128	; 0x80
   da1c6:	a91f      	add	r1, sp, #124	; 0x7c
   da1c8:	4620      	mov	r0, r4
   da1ca:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
   da1ce:	f001 fa03 	bl	db5d8 <__d2b>
   da1d2:	901e      	str	r0, [sp, #120]	; 0x78
   da1d4:	2800      	cmp	r0, #0
   da1d6:	f43f aefb 	beq.w	d9fd0 <_strtod_l+0x498>
   da1da:	2101      	movs	r1, #1
   da1dc:	4620      	mov	r0, r4
   da1de:	f000 ff9a 	bl	db116 <__i2b>
   da1e2:	4606      	mov	r6, r0
   da1e4:	2800      	cmp	r0, #0
   da1e6:	f43f aef3 	beq.w	d9fd0 <_strtod_l+0x498>
   da1ea:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   da1ec:	9904      	ldr	r1, [sp, #16]
   da1ee:	2b00      	cmp	r3, #0
   da1f0:	bfab      	itete	ge
   da1f2:	9a10      	ldrge	r2, [sp, #64]	; 0x40
   da1f4:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
   da1f6:	9f18      	ldrge	r7, [sp, #96]	; 0x60
   da1f8:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
   da1fc:	bfac      	ite	ge
   da1fe:	eb03 0902 	addge.w	r9, r3, r2
   da202:	1ad7      	sublt	r7, r2, r3
   da204:	9a20      	ldr	r2, [sp, #128]	; 0x80
   da206:	eba3 0801 	sub.w	r8, r3, r1
   da20a:	4490      	add	r8, r2
   da20c:	4ba3      	ldr	r3, [pc, #652]	; (da49c <_strtod_l+0x964>)
   da20e:	f108 38ff 	add.w	r8, r8, #4294967295
   da212:	4598      	cmp	r8, r3
   da214:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   da218:	f280 80cc 	bge.w	da3b4 <_strtod_l+0x87c>
   da21c:	eba3 0308 	sub.w	r3, r3, r8
   da220:	2b1f      	cmp	r3, #31
   da222:	eba2 0203 	sub.w	r2, r2, r3
   da226:	f04f 0101 	mov.w	r1, #1
   da22a:	f300 80b6 	bgt.w	da39a <_strtod_l+0x862>
   da22e:	fa01 f303 	lsl.w	r3, r1, r3
   da232:	9311      	str	r3, [sp, #68]	; 0x44
   da234:	2300      	movs	r3, #0
   da236:	930c      	str	r3, [sp, #48]	; 0x30
   da238:	eb09 0802 	add.w	r8, r9, r2
   da23c:	9b04      	ldr	r3, [sp, #16]
   da23e:	45c1      	cmp	r9, r8
   da240:	4417      	add	r7, r2
   da242:	441f      	add	r7, r3
   da244:	464b      	mov	r3, r9
   da246:	bfa8      	it	ge
   da248:	4643      	movge	r3, r8
   da24a:	42bb      	cmp	r3, r7
   da24c:	bfa8      	it	ge
   da24e:	463b      	movge	r3, r7
   da250:	2b00      	cmp	r3, #0
   da252:	bfc2      	ittt	gt
   da254:	eba8 0803 	subgt.w	r8, r8, r3
   da258:	1aff      	subgt	r7, r7, r3
   da25a:	eba9 0903 	subgt.w	r9, r9, r3
   da25e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   da260:	2b00      	cmp	r3, #0
   da262:	dd17      	ble.n	da294 <_strtod_l+0x75c>
   da264:	4631      	mov	r1, r6
   da266:	461a      	mov	r2, r3
   da268:	4620      	mov	r0, r4
   da26a:	f000 fff9 	bl	db260 <__pow5mult>
   da26e:	4606      	mov	r6, r0
   da270:	2800      	cmp	r0, #0
   da272:	f43f aead 	beq.w	d9fd0 <_strtod_l+0x498>
   da276:	4601      	mov	r1, r0
   da278:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   da27a:	4620      	mov	r0, r4
   da27c:	f000 ff54 	bl	db128 <__multiply>
   da280:	900f      	str	r0, [sp, #60]	; 0x3c
   da282:	2800      	cmp	r0, #0
   da284:	f43f aea4 	beq.w	d9fd0 <_strtod_l+0x498>
   da288:	991e      	ldr	r1, [sp, #120]	; 0x78
   da28a:	4620      	mov	r0, r4
   da28c:	f000 fe60 	bl	daf50 <_Bfree>
   da290:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   da292:	931e      	str	r3, [sp, #120]	; 0x78
   da294:	f1b8 0f00 	cmp.w	r8, #0
   da298:	f300 8091 	bgt.w	da3be <_strtod_l+0x886>
   da29c:	9b08      	ldr	r3, [sp, #32]
   da29e:	2b00      	cmp	r3, #0
   da2a0:	dd08      	ble.n	da2b4 <_strtod_l+0x77c>
   da2a2:	9a18      	ldr	r2, [sp, #96]	; 0x60
   da2a4:	9907      	ldr	r1, [sp, #28]
   da2a6:	4620      	mov	r0, r4
   da2a8:	f000 ffda 	bl	db260 <__pow5mult>
   da2ac:	9007      	str	r0, [sp, #28]
   da2ae:	2800      	cmp	r0, #0
   da2b0:	f43f ae8e 	beq.w	d9fd0 <_strtod_l+0x498>
   da2b4:	2f00      	cmp	r7, #0
   da2b6:	dd08      	ble.n	da2ca <_strtod_l+0x792>
   da2b8:	9907      	ldr	r1, [sp, #28]
   da2ba:	463a      	mov	r2, r7
   da2bc:	4620      	mov	r0, r4
   da2be:	f001 f81d 	bl	db2fc <__lshift>
   da2c2:	9007      	str	r0, [sp, #28]
   da2c4:	2800      	cmp	r0, #0
   da2c6:	f43f ae83 	beq.w	d9fd0 <_strtod_l+0x498>
   da2ca:	f1b9 0f00 	cmp.w	r9, #0
   da2ce:	dd08      	ble.n	da2e2 <_strtod_l+0x7aa>
   da2d0:	4631      	mov	r1, r6
   da2d2:	464a      	mov	r2, r9
   da2d4:	4620      	mov	r0, r4
   da2d6:	f001 f811 	bl	db2fc <__lshift>
   da2da:	4606      	mov	r6, r0
   da2dc:	2800      	cmp	r0, #0
   da2de:	f43f ae77 	beq.w	d9fd0 <_strtod_l+0x498>
   da2e2:	9a07      	ldr	r2, [sp, #28]
   da2e4:	991e      	ldr	r1, [sp, #120]	; 0x78
   da2e6:	4620      	mov	r0, r4
   da2e8:	f001 f883 	bl	db3f2 <__mdiff>
   da2ec:	4605      	mov	r5, r0
   da2ee:	2800      	cmp	r0, #0
   da2f0:	f43f ae6e 	beq.w	d9fd0 <_strtod_l+0x498>
   da2f4:	68c3      	ldr	r3, [r0, #12]
   da2f6:	930f      	str	r3, [sp, #60]	; 0x3c
   da2f8:	2300      	movs	r3, #0
   da2fa:	60c3      	str	r3, [r0, #12]
   da2fc:	4631      	mov	r1, r6
   da2fe:	f001 f85c 	bl	db3ba <__mcmp>
   da302:	2800      	cmp	r0, #0
   da304:	da65      	bge.n	da3d2 <_strtod_l+0x89a>
   da306:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   da308:	ea53 030a 	orrs.w	r3, r3, sl
   da30c:	f040 8087 	bne.w	da41e <_strtod_l+0x8e6>
   da310:	f3cb 0313 	ubfx	r3, fp, #0, #20
   da314:	2b00      	cmp	r3, #0
   da316:	f040 8082 	bne.w	da41e <_strtod_l+0x8e6>
   da31a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   da31e:	0d1b      	lsrs	r3, r3, #20
   da320:	051b      	lsls	r3, r3, #20
   da322:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   da326:	d97a      	bls.n	da41e <_strtod_l+0x8e6>
   da328:	696b      	ldr	r3, [r5, #20]
   da32a:	b913      	cbnz	r3, da332 <_strtod_l+0x7fa>
   da32c:	692b      	ldr	r3, [r5, #16]
   da32e:	2b01      	cmp	r3, #1
   da330:	dd75      	ble.n	da41e <_strtod_l+0x8e6>
   da332:	4629      	mov	r1, r5
   da334:	2201      	movs	r2, #1
   da336:	4620      	mov	r0, r4
   da338:	f000 ffe0 	bl	db2fc <__lshift>
   da33c:	4631      	mov	r1, r6
   da33e:	4605      	mov	r5, r0
   da340:	f001 f83b 	bl	db3ba <__mcmp>
   da344:	2800      	cmp	r0, #0
   da346:	dd6a      	ble.n	da41e <_strtod_l+0x8e6>
   da348:	9904      	ldr	r1, [sp, #16]
   da34a:	4a55      	ldr	r2, [pc, #340]	; (da4a0 <_strtod_l+0x968>)
   da34c:	465b      	mov	r3, fp
   da34e:	2900      	cmp	r1, #0
   da350:	f000 8085 	beq.w	da45e <_strtod_l+0x926>
   da354:	ea02 010b 	and.w	r1, r2, fp
   da358:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   da35c:	dc7f      	bgt.n	da45e <_strtod_l+0x926>
   da35e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   da362:	f77f aeaa 	ble.w	da0ba <_strtod_l+0x582>
   da366:	4a4f      	ldr	r2, [pc, #316]	; (da4a4 <_strtod_l+0x96c>)
   da368:	2300      	movs	r3, #0
   da36a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
   da36e:	4650      	mov	r0, sl
   da370:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   da374:	4659      	mov	r1, fp
   da376:	f7fe fe51 	bl	d901c <__aeabi_dmul>
   da37a:	460b      	mov	r3, r1
   da37c:	4303      	orrs	r3, r0
   da37e:	bf08      	it	eq
   da380:	2322      	moveq	r3, #34	; 0x22
   da382:	4682      	mov	sl, r0
   da384:	468b      	mov	fp, r1
   da386:	bf08      	it	eq
   da388:	6023      	streq	r3, [r4, #0]
   da38a:	e62b      	b.n	d9fe4 <_strtod_l+0x4ac>
   da38c:	f04f 32ff 	mov.w	r2, #4294967295
   da390:	fa02 f303 	lsl.w	r3, r2, r3
   da394:	ea03 0a0a 	and.w	sl, r3, sl
   da398:	e6de      	b.n	da158 <_strtod_l+0x620>
   da39a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   da39e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   da3a2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   da3a6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   da3aa:	fa01 f308 	lsl.w	r3, r1, r8
   da3ae:	930c      	str	r3, [sp, #48]	; 0x30
   da3b0:	9111      	str	r1, [sp, #68]	; 0x44
   da3b2:	e741      	b.n	da238 <_strtod_l+0x700>
   da3b4:	2300      	movs	r3, #0
   da3b6:	930c      	str	r3, [sp, #48]	; 0x30
   da3b8:	2301      	movs	r3, #1
   da3ba:	9311      	str	r3, [sp, #68]	; 0x44
   da3bc:	e73c      	b.n	da238 <_strtod_l+0x700>
   da3be:	991e      	ldr	r1, [sp, #120]	; 0x78
   da3c0:	4642      	mov	r2, r8
   da3c2:	4620      	mov	r0, r4
   da3c4:	f000 ff9a 	bl	db2fc <__lshift>
   da3c8:	901e      	str	r0, [sp, #120]	; 0x78
   da3ca:	2800      	cmp	r0, #0
   da3cc:	f47f af66 	bne.w	da29c <_strtod_l+0x764>
   da3d0:	e5fe      	b.n	d9fd0 <_strtod_l+0x498>
   da3d2:	465f      	mov	r7, fp
   da3d4:	d16e      	bne.n	da4b4 <_strtod_l+0x97c>
   da3d6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   da3d8:	f3cb 0313 	ubfx	r3, fp, #0, #20
   da3dc:	b342      	cbz	r2, da430 <_strtod_l+0x8f8>
   da3de:	4a32      	ldr	r2, [pc, #200]	; (da4a8 <_strtod_l+0x970>)
   da3e0:	4293      	cmp	r3, r2
   da3e2:	d128      	bne.n	da436 <_strtod_l+0x8fe>
   da3e4:	9b04      	ldr	r3, [sp, #16]
   da3e6:	4650      	mov	r0, sl
   da3e8:	b1eb      	cbz	r3, da426 <_strtod_l+0x8ee>
   da3ea:	4a2d      	ldr	r2, [pc, #180]	; (da4a0 <_strtod_l+0x968>)
   da3ec:	403a      	ands	r2, r7
   da3ee:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
   da3f2:	f04f 31ff 	mov.w	r1, #4294967295
   da3f6:	d819      	bhi.n	da42c <_strtod_l+0x8f4>
   da3f8:	0d12      	lsrs	r2, r2, #20
   da3fa:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   da3fe:	fa01 f303 	lsl.w	r3, r1, r3
   da402:	4298      	cmp	r0, r3
   da404:	d117      	bne.n	da436 <_strtod_l+0x8fe>
   da406:	4b29      	ldr	r3, [pc, #164]	; (da4ac <_strtod_l+0x974>)
   da408:	429f      	cmp	r7, r3
   da40a:	d102      	bne.n	da412 <_strtod_l+0x8da>
   da40c:	3001      	adds	r0, #1
   da40e:	f43f addf 	beq.w	d9fd0 <_strtod_l+0x498>
   da412:	4b23      	ldr	r3, [pc, #140]	; (da4a0 <_strtod_l+0x968>)
   da414:	403b      	ands	r3, r7
   da416:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   da41a:	f04f 0a00 	mov.w	sl, #0
   da41e:	9b04      	ldr	r3, [sp, #16]
   da420:	2b00      	cmp	r3, #0
   da422:	d1a0      	bne.n	da366 <_strtod_l+0x82e>
   da424:	e5de      	b.n	d9fe4 <_strtod_l+0x4ac>
   da426:	f04f 33ff 	mov.w	r3, #4294967295
   da42a:	e7ea      	b.n	da402 <_strtod_l+0x8ca>
   da42c:	460b      	mov	r3, r1
   da42e:	e7e8      	b.n	da402 <_strtod_l+0x8ca>
   da430:	ea53 030a 	orrs.w	r3, r3, sl
   da434:	d088      	beq.n	da348 <_strtod_l+0x810>
   da436:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   da438:	b1db      	cbz	r3, da472 <_strtod_l+0x93a>
   da43a:	423b      	tst	r3, r7
   da43c:	d0ef      	beq.n	da41e <_strtod_l+0x8e6>
   da43e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   da440:	9a04      	ldr	r2, [sp, #16]
   da442:	4650      	mov	r0, sl
   da444:	4659      	mov	r1, fp
   da446:	b1c3      	cbz	r3, da47a <_strtod_l+0x942>
   da448:	f7ff fb59 	bl	d9afe <sulp>
   da44c:	4602      	mov	r2, r0
   da44e:	460b      	mov	r3, r1
   da450:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   da454:	f7fe fc2c 	bl	d8cb0 <__adddf3>
   da458:	4682      	mov	sl, r0
   da45a:	468b      	mov	fp, r1
   da45c:	e7df      	b.n	da41e <_strtod_l+0x8e6>
   da45e:	4013      	ands	r3, r2
   da460:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   da464:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   da468:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   da46c:	f04f 3aff 	mov.w	sl, #4294967295
   da470:	e7d5      	b.n	da41e <_strtod_l+0x8e6>
   da472:	9b11      	ldr	r3, [sp, #68]	; 0x44
   da474:	ea13 0f0a 	tst.w	r3, sl
   da478:	e7e0      	b.n	da43c <_strtod_l+0x904>
   da47a:	f7ff fb40 	bl	d9afe <sulp>
   da47e:	4602      	mov	r2, r0
   da480:	460b      	mov	r3, r1
   da482:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   da486:	f7fe fc11 	bl	d8cac <__aeabi_dsub>
   da48a:	2200      	movs	r2, #0
   da48c:	2300      	movs	r3, #0
   da48e:	4682      	mov	sl, r0
   da490:	468b      	mov	fp, r1
   da492:	f7ff f82b 	bl	d94ec <__aeabi_dcmpeq>
   da496:	2800      	cmp	r0, #0
   da498:	d0c1      	beq.n	da41e <_strtod_l+0x8e6>
   da49a:	e60e      	b.n	da0ba <_strtod_l+0x582>
   da49c:	fffffc02 	.word	0xfffffc02
   da4a0:	7ff00000 	.word	0x7ff00000
   da4a4:	39500000 	.word	0x39500000
   da4a8:	000fffff 	.word	0x000fffff
   da4ac:	7fefffff 	.word	0x7fefffff
   da4b0:	000dc1c8 	.word	0x000dc1c8
   da4b4:	4631      	mov	r1, r6
   da4b6:	4628      	mov	r0, r5
   da4b8:	f001 f8de 	bl	db678 <__ratio>
   da4bc:	ec59 8b10 	vmov	r8, r9, d0
   da4c0:	ee10 0a10 	vmov	r0, s0
   da4c4:	2200      	movs	r2, #0
   da4c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   da4ca:	4649      	mov	r1, r9
   da4cc:	f7ff f822 	bl	d9514 <__aeabi_dcmple>
   da4d0:	2800      	cmp	r0, #0
   da4d2:	d07c      	beq.n	da5ce <_strtod_l+0xa96>
   da4d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   da4d6:	2b00      	cmp	r3, #0
   da4d8:	d04c      	beq.n	da574 <_strtod_l+0xa3c>
   da4da:	4b95      	ldr	r3, [pc, #596]	; (da730 <_strtod_l+0xbf8>)
   da4dc:	2200      	movs	r2, #0
   da4de:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   da4e2:	f8df 924c 	ldr.w	r9, [pc, #588]	; da730 <_strtod_l+0xbf8>
   da4e6:	f04f 0800 	mov.w	r8, #0
   da4ea:	4b92      	ldr	r3, [pc, #584]	; (da734 <_strtod_l+0xbfc>)
   da4ec:	403b      	ands	r3, r7
   da4ee:	9311      	str	r3, [sp, #68]	; 0x44
   da4f0:	9a11      	ldr	r2, [sp, #68]	; 0x44
   da4f2:	4b91      	ldr	r3, [pc, #580]	; (da738 <_strtod_l+0xc00>)
   da4f4:	429a      	cmp	r2, r3
   da4f6:	f040 80b2 	bne.w	da65e <_strtod_l+0xb26>
   da4fa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   da4fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   da502:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   da506:	ec4b ab10 	vmov	d0, sl, fp
   da50a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
   da50e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   da512:	f000 ffe5 	bl	db4e0 <__ulp>
   da516:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   da51a:	ec53 2b10 	vmov	r2, r3, d0
   da51e:	f7fe fd7d 	bl	d901c <__aeabi_dmul>
   da522:	4652      	mov	r2, sl
   da524:	465b      	mov	r3, fp
   da526:	f7fe fbc3 	bl	d8cb0 <__adddf3>
   da52a:	460b      	mov	r3, r1
   da52c:	4981      	ldr	r1, [pc, #516]	; (da734 <_strtod_l+0xbfc>)
   da52e:	4a83      	ldr	r2, [pc, #524]	; (da73c <_strtod_l+0xc04>)
   da530:	4019      	ands	r1, r3
   da532:	4291      	cmp	r1, r2
   da534:	4682      	mov	sl, r0
   da536:	d95e      	bls.n	da5f6 <_strtod_l+0xabe>
   da538:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   da53a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   da53e:	4293      	cmp	r3, r2
   da540:	d103      	bne.n	da54a <_strtod_l+0xa12>
   da542:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   da544:	3301      	adds	r3, #1
   da546:	f43f ad43 	beq.w	d9fd0 <_strtod_l+0x498>
   da54a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; da748 <_strtod_l+0xc10>
   da54e:	f04f 3aff 	mov.w	sl, #4294967295
   da552:	991e      	ldr	r1, [sp, #120]	; 0x78
   da554:	4620      	mov	r0, r4
   da556:	f000 fcfb 	bl	daf50 <_Bfree>
   da55a:	9907      	ldr	r1, [sp, #28]
   da55c:	4620      	mov	r0, r4
   da55e:	f000 fcf7 	bl	daf50 <_Bfree>
   da562:	4631      	mov	r1, r6
   da564:	4620      	mov	r0, r4
   da566:	f000 fcf3 	bl	daf50 <_Bfree>
   da56a:	4629      	mov	r1, r5
   da56c:	4620      	mov	r0, r4
   da56e:	f000 fcef 	bl	daf50 <_Bfree>
   da572:	e613      	b.n	da19c <_strtod_l+0x664>
   da574:	f1ba 0f00 	cmp.w	sl, #0
   da578:	d11b      	bne.n	da5b2 <_strtod_l+0xa7a>
   da57a:	f3cb 0313 	ubfx	r3, fp, #0, #20
   da57e:	b9f3      	cbnz	r3, da5be <_strtod_l+0xa86>
   da580:	4b6b      	ldr	r3, [pc, #428]	; (da730 <_strtod_l+0xbf8>)
   da582:	2200      	movs	r2, #0
   da584:	4640      	mov	r0, r8
   da586:	4649      	mov	r1, r9
   da588:	f7fe ffba 	bl	d9500 <__aeabi_dcmplt>
   da58c:	b9d0      	cbnz	r0, da5c4 <_strtod_l+0xa8c>
   da58e:	4640      	mov	r0, r8
   da590:	4649      	mov	r1, r9
   da592:	4b6b      	ldr	r3, [pc, #428]	; (da740 <_strtod_l+0xc08>)
   da594:	2200      	movs	r2, #0
   da596:	f7fe fd41 	bl	d901c <__aeabi_dmul>
   da59a:	4680      	mov	r8, r0
   da59c:	4689      	mov	r9, r1
   da59e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   da5a2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
   da5a6:	931b      	str	r3, [sp, #108]	; 0x6c
   da5a8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
   da5ac:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   da5b0:	e79b      	b.n	da4ea <_strtod_l+0x9b2>
   da5b2:	f1ba 0f01 	cmp.w	sl, #1
   da5b6:	d102      	bne.n	da5be <_strtod_l+0xa86>
   da5b8:	2f00      	cmp	r7, #0
   da5ba:	f43f ad7e 	beq.w	da0ba <_strtod_l+0x582>
   da5be:	4b61      	ldr	r3, [pc, #388]	; (da744 <_strtod_l+0xc0c>)
   da5c0:	2200      	movs	r2, #0
   da5c2:	e78c      	b.n	da4de <_strtod_l+0x9a6>
   da5c4:	f8df 9178 	ldr.w	r9, [pc, #376]	; da740 <_strtod_l+0xc08>
   da5c8:	f04f 0800 	mov.w	r8, #0
   da5cc:	e7e7      	b.n	da59e <_strtod_l+0xa66>
   da5ce:	4b5c      	ldr	r3, [pc, #368]	; (da740 <_strtod_l+0xc08>)
   da5d0:	4640      	mov	r0, r8
   da5d2:	4649      	mov	r1, r9
   da5d4:	2200      	movs	r2, #0
   da5d6:	f7fe fd21 	bl	d901c <__aeabi_dmul>
   da5da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   da5dc:	4680      	mov	r8, r0
   da5de:	4689      	mov	r9, r1
   da5e0:	b933      	cbnz	r3, da5f0 <_strtod_l+0xab8>
   da5e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   da5e6:	9012      	str	r0, [sp, #72]	; 0x48
   da5e8:	9313      	str	r3, [sp, #76]	; 0x4c
   da5ea:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
   da5ee:	e7dd      	b.n	da5ac <_strtod_l+0xa74>
   da5f0:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
   da5f4:	e7f9      	b.n	da5ea <_strtod_l+0xab2>
   da5f6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   da5fa:	9b04      	ldr	r3, [sp, #16]
   da5fc:	2b00      	cmp	r3, #0
   da5fe:	d1a8      	bne.n	da552 <_strtod_l+0xa1a>
   da600:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   da604:	9a11      	ldr	r2, [sp, #68]	; 0x44
   da606:	0d1b      	lsrs	r3, r3, #20
   da608:	051b      	lsls	r3, r3, #20
   da60a:	429a      	cmp	r2, r3
   da60c:	d1a1      	bne.n	da552 <_strtod_l+0xa1a>
   da60e:	4640      	mov	r0, r8
   da610:	4649      	mov	r1, r9
   da612:	f001 f8cf 	bl	db7b4 <__aeabi_d2lz>
   da616:	f7fe fcd3 	bl	d8fc0 <__aeabi_l2d>
   da61a:	4602      	mov	r2, r0
   da61c:	460b      	mov	r3, r1
   da61e:	4640      	mov	r0, r8
   da620:	4649      	mov	r1, r9
   da622:	f7fe fb43 	bl	d8cac <__aeabi_dsub>
   da626:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   da628:	f3cb 0313 	ubfx	r3, fp, #0, #20
   da62c:	ea43 030a 	orr.w	r3, r3, sl
   da630:	4313      	orrs	r3, r2
   da632:	4680      	mov	r8, r0
   da634:	4689      	mov	r9, r1
   da636:	d053      	beq.n	da6e0 <_strtod_l+0xba8>
   da638:	a335      	add	r3, pc, #212	; (adr r3, da710 <_strtod_l+0xbd8>)
   da63a:	e9d3 2300 	ldrd	r2, r3, [r3]
   da63e:	f7fe ff5f 	bl	d9500 <__aeabi_dcmplt>
   da642:	2800      	cmp	r0, #0
   da644:	f47f acce 	bne.w	d9fe4 <_strtod_l+0x4ac>
   da648:	a333      	add	r3, pc, #204	; (adr r3, da718 <_strtod_l+0xbe0>)
   da64a:	e9d3 2300 	ldrd	r2, r3, [r3]
   da64e:	4640      	mov	r0, r8
   da650:	4649      	mov	r1, r9
   da652:	f7fe ff73 	bl	d953c <__aeabi_dcmpgt>
   da656:	2800      	cmp	r0, #0
   da658:	f43f af7b 	beq.w	da552 <_strtod_l+0xa1a>
   da65c:	e4c2      	b.n	d9fe4 <_strtod_l+0x4ac>
   da65e:	9b04      	ldr	r3, [sp, #16]
   da660:	b333      	cbz	r3, da6b0 <_strtod_l+0xb78>
   da662:	9b11      	ldr	r3, [sp, #68]	; 0x44
   da664:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   da668:	d822      	bhi.n	da6b0 <_strtod_l+0xb78>
   da66a:	a32d      	add	r3, pc, #180	; (adr r3, da720 <_strtod_l+0xbe8>)
   da66c:	e9d3 2300 	ldrd	r2, r3, [r3]
   da670:	4640      	mov	r0, r8
   da672:	4649      	mov	r1, r9
   da674:	f7fe ff4e 	bl	d9514 <__aeabi_dcmple>
   da678:	b1a0      	cbz	r0, da6a4 <_strtod_l+0xb6c>
   da67a:	4649      	mov	r1, r9
   da67c:	4640      	mov	r0, r8
   da67e:	f7fe ff67 	bl	d9550 <__aeabi_d2uiz>
   da682:	2801      	cmp	r0, #1
   da684:	bf38      	it	cc
   da686:	2001      	movcc	r0, #1
   da688:	f7fe fc4e 	bl	d8f28 <__aeabi_ui2d>
   da68c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   da68e:	4680      	mov	r8, r0
   da690:	4689      	mov	r9, r1
   da692:	bb13      	cbnz	r3, da6da <_strtod_l+0xba2>
   da694:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   da698:	9014      	str	r0, [sp, #80]	; 0x50
   da69a:	9315      	str	r3, [sp, #84]	; 0x54
   da69c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   da6a0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   da6a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   da6a6:	9a11      	ldr	r2, [sp, #68]	; 0x44
   da6a8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   da6ac:	1a9b      	subs	r3, r3, r2
   da6ae:	930d      	str	r3, [sp, #52]	; 0x34
   da6b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   da6b4:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
   da6b8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   da6bc:	f000 ff10 	bl	db4e0 <__ulp>
   da6c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   da6c4:	ec53 2b10 	vmov	r2, r3, d0
   da6c8:	f7fe fca8 	bl	d901c <__aeabi_dmul>
   da6cc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   da6d0:	f7fe faee 	bl	d8cb0 <__adddf3>
   da6d4:	4682      	mov	sl, r0
   da6d6:	468b      	mov	fp, r1
   da6d8:	e78f      	b.n	da5fa <_strtod_l+0xac2>
   da6da:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
   da6de:	e7dd      	b.n	da69c <_strtod_l+0xb64>
   da6e0:	a311      	add	r3, pc, #68	; (adr r3, da728 <_strtod_l+0xbf0>)
   da6e2:	e9d3 2300 	ldrd	r2, r3, [r3]
   da6e6:	f7fe ff0b 	bl	d9500 <__aeabi_dcmplt>
   da6ea:	e7b4      	b.n	da656 <_strtod_l+0xb1e>
   da6ec:	2300      	movs	r3, #0
   da6ee:	930e      	str	r3, [sp, #56]	; 0x38
   da6f0:	9a19      	ldr	r2, [sp, #100]	; 0x64
   da6f2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   da6f4:	6013      	str	r3, [r2, #0]
   da6f6:	f7ff ba65 	b.w	d9bc4 <_strtod_l+0x8c>
   da6fa:	2b65      	cmp	r3, #101	; 0x65
   da6fc:	f43f ab5d 	beq.w	d9dba <_strtod_l+0x282>
   da700:	2b45      	cmp	r3, #69	; 0x45
   da702:	f43f ab5a 	beq.w	d9dba <_strtod_l+0x282>
   da706:	2201      	movs	r2, #1
   da708:	f7ff bb92 	b.w	d9e30 <_strtod_l+0x2f8>
   da70c:	f3af 8000 	nop.w
   da710:	94a03595 	.word	0x94a03595
   da714:	3fdfffff 	.word	0x3fdfffff
   da718:	35afe535 	.word	0x35afe535
   da71c:	3fe00000 	.word	0x3fe00000
   da720:	ffc00000 	.word	0xffc00000
   da724:	41dfffff 	.word	0x41dfffff
   da728:	94a03595 	.word	0x94a03595
   da72c:	3fcfffff 	.word	0x3fcfffff
   da730:	3ff00000 	.word	0x3ff00000
   da734:	7ff00000 	.word	0x7ff00000
   da738:	7fe00000 	.word	0x7fe00000
   da73c:	7c9fffff 	.word	0x7c9fffff
   da740:	3fe00000 	.word	0x3fe00000
   da744:	bff00000 	.word	0xbff00000
   da748:	7fefffff 	.word	0x7fefffff

000da74c <strtod>:
   da74c:	460a      	mov	r2, r1
   da74e:	4601      	mov	r1, r0
   da750:	4802      	ldr	r0, [pc, #8]	; (da75c <strtod+0x10>)
   da752:	4b03      	ldr	r3, [pc, #12]	; (da760 <strtod+0x14>)
   da754:	6800      	ldr	r0, [r0, #0]
   da756:	f7ff b9ef 	b.w	d9b38 <_strtod_l>
   da75a:	bf00      	nop
   da75c:	2003e294 	.word	0x2003e294
   da760:	2003e2fc 	.word	0x2003e2fc

000da764 <strtok>:
   da764:	4b13      	ldr	r3, [pc, #76]	; (da7b4 <strtok+0x50>)
   da766:	b573      	push	{r0, r1, r4, r5, r6, lr}
   da768:	681e      	ldr	r6, [r3, #0]
   da76a:	6db4      	ldr	r4, [r6, #88]	; 0x58
   da76c:	4605      	mov	r5, r0
   da76e:	b9c4      	cbnz	r4, da7a2 <strtok+0x3e>
   da770:	2050      	movs	r0, #80	; 0x50
   da772:	9101      	str	r1, [sp, #4]
   da774:	f7fc f8ee 	bl	d6954 <malloc>
   da778:	65b0      	str	r0, [r6, #88]	; 0x58
   da77a:	e9c0 4400 	strd	r4, r4, [r0]
   da77e:	e9c0 4402 	strd	r4, r4, [r0, #8]
   da782:	e9c0 4404 	strd	r4, r4, [r0, #16]
   da786:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
   da78a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
   da78e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
   da792:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
   da796:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
   da79a:	9901      	ldr	r1, [sp, #4]
   da79c:	6184      	str	r4, [r0, #24]
   da79e:	7704      	strb	r4, [r0, #28]
   da7a0:	6244      	str	r4, [r0, #36]	; 0x24
   da7a2:	6db2      	ldr	r2, [r6, #88]	; 0x58
   da7a4:	2301      	movs	r3, #1
   da7a6:	4628      	mov	r0, r5
   da7a8:	b002      	add	sp, #8
   da7aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   da7ae:	f000 b803 	b.w	da7b8 <__strtok_r>
   da7b2:	bf00      	nop
   da7b4:	2003e294 	.word	0x2003e294

000da7b8 <__strtok_r>:
   da7b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   da7ba:	b908      	cbnz	r0, da7c0 <__strtok_r+0x8>
   da7bc:	6810      	ldr	r0, [r2, #0]
   da7be:	b188      	cbz	r0, da7e4 <__strtok_r+0x2c>
   da7c0:	4604      	mov	r4, r0
   da7c2:	4620      	mov	r0, r4
   da7c4:	f814 5b01 	ldrb.w	r5, [r4], #1
   da7c8:	460f      	mov	r7, r1
   da7ca:	f817 6b01 	ldrb.w	r6, [r7], #1
   da7ce:	b91e      	cbnz	r6, da7d8 <__strtok_r+0x20>
   da7d0:	b965      	cbnz	r5, da7ec <__strtok_r+0x34>
   da7d2:	6015      	str	r5, [r2, #0]
   da7d4:	4628      	mov	r0, r5
   da7d6:	e005      	b.n	da7e4 <__strtok_r+0x2c>
   da7d8:	42b5      	cmp	r5, r6
   da7da:	d1f6      	bne.n	da7ca <__strtok_r+0x12>
   da7dc:	2b00      	cmp	r3, #0
   da7de:	d1f0      	bne.n	da7c2 <__strtok_r+0xa>
   da7e0:	6014      	str	r4, [r2, #0]
   da7e2:	7003      	strb	r3, [r0, #0]
   da7e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   da7e6:	461c      	mov	r4, r3
   da7e8:	e00c      	b.n	da804 <__strtok_r+0x4c>
   da7ea:	b915      	cbnz	r5, da7f2 <__strtok_r+0x3a>
   da7ec:	f814 3b01 	ldrb.w	r3, [r4], #1
   da7f0:	460e      	mov	r6, r1
   da7f2:	f816 5b01 	ldrb.w	r5, [r6], #1
   da7f6:	42ab      	cmp	r3, r5
   da7f8:	d1f7      	bne.n	da7ea <__strtok_r+0x32>
   da7fa:	2b00      	cmp	r3, #0
   da7fc:	d0f3      	beq.n	da7e6 <__strtok_r+0x2e>
   da7fe:	2300      	movs	r3, #0
   da800:	f804 3c01 	strb.w	r3, [r4, #-1]
   da804:	6014      	str	r4, [r2, #0]
   da806:	e7ed      	b.n	da7e4 <__strtok_r+0x2c>

000da808 <rshift>:
   da808:	6903      	ldr	r3, [r0, #16]
   da80a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   da80e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   da812:	ea4f 1261 	mov.w	r2, r1, asr #5
   da816:	f100 0414 	add.w	r4, r0, #20
   da81a:	dd45      	ble.n	da8a8 <rshift+0xa0>
   da81c:	f011 011f 	ands.w	r1, r1, #31
   da820:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   da824:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   da828:	d10c      	bne.n	da844 <rshift+0x3c>
   da82a:	f100 0710 	add.w	r7, r0, #16
   da82e:	4629      	mov	r1, r5
   da830:	42b1      	cmp	r1, r6
   da832:	d334      	bcc.n	da89e <rshift+0x96>
   da834:	1a9b      	subs	r3, r3, r2
   da836:	009b      	lsls	r3, r3, #2
   da838:	1eea      	subs	r2, r5, #3
   da83a:	4296      	cmp	r6, r2
   da83c:	bf38      	it	cc
   da83e:	2300      	movcc	r3, #0
   da840:	4423      	add	r3, r4
   da842:	e015      	b.n	da870 <rshift+0x68>
   da844:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   da848:	f1c1 0820 	rsb	r8, r1, #32
   da84c:	40cf      	lsrs	r7, r1
   da84e:	f105 0e04 	add.w	lr, r5, #4
   da852:	46a1      	mov	r9, r4
   da854:	4576      	cmp	r6, lr
   da856:	46f4      	mov	ip, lr
   da858:	d815      	bhi.n	da886 <rshift+0x7e>
   da85a:	1a9b      	subs	r3, r3, r2
   da85c:	009a      	lsls	r2, r3, #2
   da85e:	3a04      	subs	r2, #4
   da860:	3501      	adds	r5, #1
   da862:	42ae      	cmp	r6, r5
   da864:	bf38      	it	cc
   da866:	2200      	movcc	r2, #0
   da868:	18a3      	adds	r3, r4, r2
   da86a:	50a7      	str	r7, [r4, r2]
   da86c:	b107      	cbz	r7, da870 <rshift+0x68>
   da86e:	3304      	adds	r3, #4
   da870:	1b1a      	subs	r2, r3, r4
   da872:	42a3      	cmp	r3, r4
   da874:	ea4f 02a2 	mov.w	r2, r2, asr #2
   da878:	bf08      	it	eq
   da87a:	2300      	moveq	r3, #0
   da87c:	6102      	str	r2, [r0, #16]
   da87e:	bf08      	it	eq
   da880:	6143      	streq	r3, [r0, #20]
   da882:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   da886:	f8dc c000 	ldr.w	ip, [ip]
   da88a:	fa0c fc08 	lsl.w	ip, ip, r8
   da88e:	ea4c 0707 	orr.w	r7, ip, r7
   da892:	f849 7b04 	str.w	r7, [r9], #4
   da896:	f85e 7b04 	ldr.w	r7, [lr], #4
   da89a:	40cf      	lsrs	r7, r1
   da89c:	e7da      	b.n	da854 <rshift+0x4c>
   da89e:	f851 cb04 	ldr.w	ip, [r1], #4
   da8a2:	f847 cf04 	str.w	ip, [r7, #4]!
   da8a6:	e7c3      	b.n	da830 <rshift+0x28>
   da8a8:	4623      	mov	r3, r4
   da8aa:	e7e1      	b.n	da870 <rshift+0x68>

000da8ac <__hexdig_fun>:
   da8ac:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   da8b0:	2b09      	cmp	r3, #9
   da8b2:	d802      	bhi.n	da8ba <__hexdig_fun+0xe>
   da8b4:	3820      	subs	r0, #32
   da8b6:	b2c0      	uxtb	r0, r0
   da8b8:	4770      	bx	lr
   da8ba:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   da8be:	2b05      	cmp	r3, #5
   da8c0:	d801      	bhi.n	da8c6 <__hexdig_fun+0x1a>
   da8c2:	3847      	subs	r0, #71	; 0x47
   da8c4:	e7f7      	b.n	da8b6 <__hexdig_fun+0xa>
   da8c6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   da8ca:	2b05      	cmp	r3, #5
   da8cc:	d801      	bhi.n	da8d2 <__hexdig_fun+0x26>
   da8ce:	3827      	subs	r0, #39	; 0x27
   da8d0:	e7f1      	b.n	da8b6 <__hexdig_fun+0xa>
   da8d2:	2000      	movs	r0, #0
   da8d4:	4770      	bx	lr
	...

000da8d8 <__gethex>:
   da8d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da8dc:	ed2d 8b02 	vpush	{d8}
   da8e0:	b089      	sub	sp, #36	; 0x24
   da8e2:	ee08 0a10 	vmov	s16, r0
   da8e6:	9304      	str	r3, [sp, #16]
   da8e8:	4bbc      	ldr	r3, [pc, #752]	; (dabdc <__gethex+0x304>)
   da8ea:	681b      	ldr	r3, [r3, #0]
   da8ec:	9301      	str	r3, [sp, #4]
   da8ee:	4618      	mov	r0, r3
   da8f0:	468b      	mov	fp, r1
   da8f2:	4690      	mov	r8, r2
   da8f4:	f7ff f8bf 	bl	d9a76 <strlen>
   da8f8:	9b01      	ldr	r3, [sp, #4]
   da8fa:	f8db 2000 	ldr.w	r2, [fp]
   da8fe:	4403      	add	r3, r0
   da900:	4682      	mov	sl, r0
   da902:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   da906:	9305      	str	r3, [sp, #20]
   da908:	1c93      	adds	r3, r2, #2
   da90a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   da90e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   da912:	32fe      	adds	r2, #254	; 0xfe
   da914:	18d1      	adds	r1, r2, r3
   da916:	461f      	mov	r7, r3
   da918:	f813 0b01 	ldrb.w	r0, [r3], #1
   da91c:	9100      	str	r1, [sp, #0]
   da91e:	2830      	cmp	r0, #48	; 0x30
   da920:	d0f8      	beq.n	da914 <__gethex+0x3c>
   da922:	f7ff ffc3 	bl	da8ac <__hexdig_fun>
   da926:	4604      	mov	r4, r0
   da928:	2800      	cmp	r0, #0
   da92a:	d13a      	bne.n	da9a2 <__gethex+0xca>
   da92c:	9901      	ldr	r1, [sp, #4]
   da92e:	4652      	mov	r2, sl
   da930:	4638      	mov	r0, r7
   da932:	f7ff f8a8 	bl	d9a86 <strncmp>
   da936:	4605      	mov	r5, r0
   da938:	2800      	cmp	r0, #0
   da93a:	d168      	bne.n	daa0e <__gethex+0x136>
   da93c:	f817 000a 	ldrb.w	r0, [r7, sl]
   da940:	eb07 060a 	add.w	r6, r7, sl
   da944:	f7ff ffb2 	bl	da8ac <__hexdig_fun>
   da948:	2800      	cmp	r0, #0
   da94a:	d062      	beq.n	daa12 <__gethex+0x13a>
   da94c:	4633      	mov	r3, r6
   da94e:	7818      	ldrb	r0, [r3, #0]
   da950:	2830      	cmp	r0, #48	; 0x30
   da952:	461f      	mov	r7, r3
   da954:	f103 0301 	add.w	r3, r3, #1
   da958:	d0f9      	beq.n	da94e <__gethex+0x76>
   da95a:	f7ff ffa7 	bl	da8ac <__hexdig_fun>
   da95e:	2301      	movs	r3, #1
   da960:	fab0 f480 	clz	r4, r0
   da964:	0964      	lsrs	r4, r4, #5
   da966:	4635      	mov	r5, r6
   da968:	9300      	str	r3, [sp, #0]
   da96a:	463a      	mov	r2, r7
   da96c:	4616      	mov	r6, r2
   da96e:	3201      	adds	r2, #1
   da970:	7830      	ldrb	r0, [r6, #0]
   da972:	f7ff ff9b 	bl	da8ac <__hexdig_fun>
   da976:	2800      	cmp	r0, #0
   da978:	d1f8      	bne.n	da96c <__gethex+0x94>
   da97a:	9901      	ldr	r1, [sp, #4]
   da97c:	4652      	mov	r2, sl
   da97e:	4630      	mov	r0, r6
   da980:	f7ff f881 	bl	d9a86 <strncmp>
   da984:	b980      	cbnz	r0, da9a8 <__gethex+0xd0>
   da986:	b94d      	cbnz	r5, da99c <__gethex+0xc4>
   da988:	eb06 050a 	add.w	r5, r6, sl
   da98c:	462a      	mov	r2, r5
   da98e:	4616      	mov	r6, r2
   da990:	3201      	adds	r2, #1
   da992:	7830      	ldrb	r0, [r6, #0]
   da994:	f7ff ff8a 	bl	da8ac <__hexdig_fun>
   da998:	2800      	cmp	r0, #0
   da99a:	d1f8      	bne.n	da98e <__gethex+0xb6>
   da99c:	1bad      	subs	r5, r5, r6
   da99e:	00ad      	lsls	r5, r5, #2
   da9a0:	e004      	b.n	da9ac <__gethex+0xd4>
   da9a2:	2400      	movs	r4, #0
   da9a4:	4625      	mov	r5, r4
   da9a6:	e7e0      	b.n	da96a <__gethex+0x92>
   da9a8:	2d00      	cmp	r5, #0
   da9aa:	d1f7      	bne.n	da99c <__gethex+0xc4>
   da9ac:	7833      	ldrb	r3, [r6, #0]
   da9ae:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   da9b2:	2b50      	cmp	r3, #80	; 0x50
   da9b4:	d13b      	bne.n	daa2e <__gethex+0x156>
   da9b6:	7873      	ldrb	r3, [r6, #1]
   da9b8:	2b2b      	cmp	r3, #43	; 0x2b
   da9ba:	d02c      	beq.n	daa16 <__gethex+0x13e>
   da9bc:	2b2d      	cmp	r3, #45	; 0x2d
   da9be:	d02e      	beq.n	daa1e <__gethex+0x146>
   da9c0:	1c71      	adds	r1, r6, #1
   da9c2:	f04f 0900 	mov.w	r9, #0
   da9c6:	7808      	ldrb	r0, [r1, #0]
   da9c8:	f7ff ff70 	bl	da8ac <__hexdig_fun>
   da9cc:	1e43      	subs	r3, r0, #1
   da9ce:	b2db      	uxtb	r3, r3
   da9d0:	2b18      	cmp	r3, #24
   da9d2:	d82c      	bhi.n	daa2e <__gethex+0x156>
   da9d4:	f1a0 0210 	sub.w	r2, r0, #16
   da9d8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   da9dc:	f7ff ff66 	bl	da8ac <__hexdig_fun>
   da9e0:	1e43      	subs	r3, r0, #1
   da9e2:	b2db      	uxtb	r3, r3
   da9e4:	2b18      	cmp	r3, #24
   da9e6:	d91d      	bls.n	daa24 <__gethex+0x14c>
   da9e8:	f1b9 0f00 	cmp.w	r9, #0
   da9ec:	d000      	beq.n	da9f0 <__gethex+0x118>
   da9ee:	4252      	negs	r2, r2
   da9f0:	4415      	add	r5, r2
   da9f2:	f8cb 1000 	str.w	r1, [fp]
   da9f6:	b1e4      	cbz	r4, daa32 <__gethex+0x15a>
   da9f8:	9b00      	ldr	r3, [sp, #0]
   da9fa:	2b00      	cmp	r3, #0
   da9fc:	bf14      	ite	ne
   da9fe:	2700      	movne	r7, #0
   daa00:	2706      	moveq	r7, #6
   daa02:	4638      	mov	r0, r7
   daa04:	b009      	add	sp, #36	; 0x24
   daa06:	ecbd 8b02 	vpop	{d8}
   daa0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   daa0e:	463e      	mov	r6, r7
   daa10:	4625      	mov	r5, r4
   daa12:	2401      	movs	r4, #1
   daa14:	e7ca      	b.n	da9ac <__gethex+0xd4>
   daa16:	f04f 0900 	mov.w	r9, #0
   daa1a:	1cb1      	adds	r1, r6, #2
   daa1c:	e7d3      	b.n	da9c6 <__gethex+0xee>
   daa1e:	f04f 0901 	mov.w	r9, #1
   daa22:	e7fa      	b.n	daa1a <__gethex+0x142>
   daa24:	230a      	movs	r3, #10
   daa26:	fb03 0202 	mla	r2, r3, r2, r0
   daa2a:	3a10      	subs	r2, #16
   daa2c:	e7d4      	b.n	da9d8 <__gethex+0x100>
   daa2e:	4631      	mov	r1, r6
   daa30:	e7df      	b.n	da9f2 <__gethex+0x11a>
   daa32:	1bf3      	subs	r3, r6, r7
   daa34:	3b01      	subs	r3, #1
   daa36:	4621      	mov	r1, r4
   daa38:	2b07      	cmp	r3, #7
   daa3a:	dc52      	bgt.n	daae2 <__gethex+0x20a>
   daa3c:	ee18 0a10 	vmov	r0, s16
   daa40:	f000 fa52 	bl	daee8 <_Balloc>
   daa44:	f04f 0b00 	mov.w	fp, #0
   daa48:	f100 0914 	add.w	r9, r0, #20
   daa4c:	f1ca 0301 	rsb	r3, sl, #1
   daa50:	4604      	mov	r4, r0
   daa52:	f8cd 9008 	str.w	r9, [sp, #8]
   daa56:	f8cd b000 	str.w	fp, [sp]
   daa5a:	9306      	str	r3, [sp, #24]
   daa5c:	42b7      	cmp	r7, r6
   daa5e:	d343      	bcc.n	daae8 <__gethex+0x210>
   daa60:	9802      	ldr	r0, [sp, #8]
   daa62:	9b00      	ldr	r3, [sp, #0]
   daa64:	f840 3b04 	str.w	r3, [r0], #4
   daa68:	eba0 0009 	sub.w	r0, r0, r9
   daa6c:	1080      	asrs	r0, r0, #2
   daa6e:	0146      	lsls	r6, r0, #5
   daa70:	6120      	str	r0, [r4, #16]
   daa72:	4618      	mov	r0, r3
   daa74:	f000 faff 	bl	db076 <__hi0bits>
   daa78:	1a30      	subs	r0, r6, r0
   daa7a:	f8d8 6000 	ldr.w	r6, [r8]
   daa7e:	42b0      	cmp	r0, r6
   daa80:	dd66      	ble.n	dab50 <__gethex+0x278>
   daa82:	1b87      	subs	r7, r0, r6
   daa84:	4639      	mov	r1, r7
   daa86:	4620      	mov	r0, r4
   daa88:	f000 fe4c 	bl	db724 <__any_on>
   daa8c:	4682      	mov	sl, r0
   daa8e:	b1a8      	cbz	r0, daabc <__gethex+0x1e4>
   daa90:	1e7b      	subs	r3, r7, #1
   daa92:	1159      	asrs	r1, r3, #5
   daa94:	f003 021f 	and.w	r2, r3, #31
   daa98:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   daa9c:	f04f 0a01 	mov.w	sl, #1
   daaa0:	fa0a f202 	lsl.w	r2, sl, r2
   daaa4:	420a      	tst	r2, r1
   daaa6:	d009      	beq.n	daabc <__gethex+0x1e4>
   daaa8:	4553      	cmp	r3, sl
   daaaa:	dd05      	ble.n	daab8 <__gethex+0x1e0>
   daaac:	1eb9      	subs	r1, r7, #2
   daaae:	4620      	mov	r0, r4
   daab0:	f000 fe38 	bl	db724 <__any_on>
   daab4:	2800      	cmp	r0, #0
   daab6:	d148      	bne.n	dab4a <__gethex+0x272>
   daab8:	f04f 0a02 	mov.w	sl, #2
   daabc:	4639      	mov	r1, r7
   daabe:	4620      	mov	r0, r4
   daac0:	f7ff fea2 	bl	da808 <rshift>
   daac4:	443d      	add	r5, r7
   daac6:	f8d8 3008 	ldr.w	r3, [r8, #8]
   daaca:	42ab      	cmp	r3, r5
   daacc:	da4f      	bge.n	dab6e <__gethex+0x296>
   daace:	ee18 0a10 	vmov	r0, s16
   daad2:	4621      	mov	r1, r4
   daad4:	f000 fa3c 	bl	daf50 <_Bfree>
   daad8:	9a14      	ldr	r2, [sp, #80]	; 0x50
   daada:	2300      	movs	r3, #0
   daadc:	6013      	str	r3, [r2, #0]
   daade:	27a3      	movs	r7, #163	; 0xa3
   daae0:	e78f      	b.n	daa02 <__gethex+0x12a>
   daae2:	3101      	adds	r1, #1
   daae4:	105b      	asrs	r3, r3, #1
   daae6:	e7a7      	b.n	daa38 <__gethex+0x160>
   daae8:	1e73      	subs	r3, r6, #1
   daaea:	9a05      	ldr	r2, [sp, #20]
   daaec:	9303      	str	r3, [sp, #12]
   daaee:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   daaf2:	4293      	cmp	r3, r2
   daaf4:	d019      	beq.n	dab2a <__gethex+0x252>
   daaf6:	f1bb 0f20 	cmp.w	fp, #32
   daafa:	d107      	bne.n	dab0c <__gethex+0x234>
   daafc:	9b02      	ldr	r3, [sp, #8]
   daafe:	9a00      	ldr	r2, [sp, #0]
   dab00:	f843 2b04 	str.w	r2, [r3], #4
   dab04:	9302      	str	r3, [sp, #8]
   dab06:	2300      	movs	r3, #0
   dab08:	9300      	str	r3, [sp, #0]
   dab0a:	469b      	mov	fp, r3
   dab0c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   dab10:	f7ff fecc 	bl	da8ac <__hexdig_fun>
   dab14:	9b00      	ldr	r3, [sp, #0]
   dab16:	f000 000f 	and.w	r0, r0, #15
   dab1a:	fa00 f00b 	lsl.w	r0, r0, fp
   dab1e:	4303      	orrs	r3, r0
   dab20:	9300      	str	r3, [sp, #0]
   dab22:	f10b 0b04 	add.w	fp, fp, #4
   dab26:	9b03      	ldr	r3, [sp, #12]
   dab28:	e00d      	b.n	dab46 <__gethex+0x26e>
   dab2a:	9b03      	ldr	r3, [sp, #12]
   dab2c:	9a06      	ldr	r2, [sp, #24]
   dab2e:	4413      	add	r3, r2
   dab30:	42bb      	cmp	r3, r7
   dab32:	d3e0      	bcc.n	daaf6 <__gethex+0x21e>
   dab34:	4618      	mov	r0, r3
   dab36:	9901      	ldr	r1, [sp, #4]
   dab38:	9307      	str	r3, [sp, #28]
   dab3a:	4652      	mov	r2, sl
   dab3c:	f7fe ffa3 	bl	d9a86 <strncmp>
   dab40:	9b07      	ldr	r3, [sp, #28]
   dab42:	2800      	cmp	r0, #0
   dab44:	d1d7      	bne.n	daaf6 <__gethex+0x21e>
   dab46:	461e      	mov	r6, r3
   dab48:	e788      	b.n	daa5c <__gethex+0x184>
   dab4a:	f04f 0a03 	mov.w	sl, #3
   dab4e:	e7b5      	b.n	daabc <__gethex+0x1e4>
   dab50:	da0a      	bge.n	dab68 <__gethex+0x290>
   dab52:	1a37      	subs	r7, r6, r0
   dab54:	4621      	mov	r1, r4
   dab56:	ee18 0a10 	vmov	r0, s16
   dab5a:	463a      	mov	r2, r7
   dab5c:	f000 fbce 	bl	db2fc <__lshift>
   dab60:	1bed      	subs	r5, r5, r7
   dab62:	4604      	mov	r4, r0
   dab64:	f100 0914 	add.w	r9, r0, #20
   dab68:	f04f 0a00 	mov.w	sl, #0
   dab6c:	e7ab      	b.n	daac6 <__gethex+0x1ee>
   dab6e:	f8d8 0004 	ldr.w	r0, [r8, #4]
   dab72:	42a8      	cmp	r0, r5
   dab74:	dd6d      	ble.n	dac52 <__gethex+0x37a>
   dab76:	1b45      	subs	r5, r0, r5
   dab78:	42ae      	cmp	r6, r5
   dab7a:	dc31      	bgt.n	dabe0 <__gethex+0x308>
   dab7c:	f8d8 300c 	ldr.w	r3, [r8, #12]
   dab80:	2b02      	cmp	r3, #2
   dab82:	d023      	beq.n	dabcc <__gethex+0x2f4>
   dab84:	2b03      	cmp	r3, #3
   dab86:	d025      	beq.n	dabd4 <__gethex+0x2fc>
   dab88:	2b01      	cmp	r3, #1
   dab8a:	d115      	bne.n	dabb8 <__gethex+0x2e0>
   dab8c:	42ae      	cmp	r6, r5
   dab8e:	d113      	bne.n	dabb8 <__gethex+0x2e0>
   dab90:	2e01      	cmp	r6, #1
   dab92:	d10b      	bne.n	dabac <__gethex+0x2d4>
   dab94:	9a04      	ldr	r2, [sp, #16]
   dab96:	f8d8 3004 	ldr.w	r3, [r8, #4]
   dab9a:	6013      	str	r3, [r2, #0]
   dab9c:	2301      	movs	r3, #1
   dab9e:	6123      	str	r3, [r4, #16]
   daba0:	f8c9 3000 	str.w	r3, [r9]
   daba4:	9b14      	ldr	r3, [sp, #80]	; 0x50
   daba6:	2762      	movs	r7, #98	; 0x62
   daba8:	601c      	str	r4, [r3, #0]
   dabaa:	e72a      	b.n	daa02 <__gethex+0x12a>
   dabac:	1e71      	subs	r1, r6, #1
   dabae:	4620      	mov	r0, r4
   dabb0:	f000 fdb8 	bl	db724 <__any_on>
   dabb4:	2800      	cmp	r0, #0
   dabb6:	d1ed      	bne.n	dab94 <__gethex+0x2bc>
   dabb8:	ee18 0a10 	vmov	r0, s16
   dabbc:	4621      	mov	r1, r4
   dabbe:	f000 f9c7 	bl	daf50 <_Bfree>
   dabc2:	9a14      	ldr	r2, [sp, #80]	; 0x50
   dabc4:	2300      	movs	r3, #0
   dabc6:	6013      	str	r3, [r2, #0]
   dabc8:	2750      	movs	r7, #80	; 0x50
   dabca:	e71a      	b.n	daa02 <__gethex+0x12a>
   dabcc:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dabce:	2b00      	cmp	r3, #0
   dabd0:	d1f2      	bne.n	dabb8 <__gethex+0x2e0>
   dabd2:	e7df      	b.n	dab94 <__gethex+0x2bc>
   dabd4:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dabd6:	2b00      	cmp	r3, #0
   dabd8:	d1dc      	bne.n	dab94 <__gethex+0x2bc>
   dabda:	e7ed      	b.n	dabb8 <__gethex+0x2e0>
   dabdc:	000dc2f4 	.word	0x000dc2f4
   dabe0:	1e6f      	subs	r7, r5, #1
   dabe2:	f1ba 0f00 	cmp.w	sl, #0
   dabe6:	d131      	bne.n	dac4c <__gethex+0x374>
   dabe8:	b127      	cbz	r7, dabf4 <__gethex+0x31c>
   dabea:	4639      	mov	r1, r7
   dabec:	4620      	mov	r0, r4
   dabee:	f000 fd99 	bl	db724 <__any_on>
   dabf2:	4682      	mov	sl, r0
   dabf4:	117b      	asrs	r3, r7, #5
   dabf6:	2101      	movs	r1, #1
   dabf8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   dabfc:	f007 071f 	and.w	r7, r7, #31
   dac00:	fa01 f707 	lsl.w	r7, r1, r7
   dac04:	421f      	tst	r7, r3
   dac06:	4629      	mov	r1, r5
   dac08:	4620      	mov	r0, r4
   dac0a:	bf18      	it	ne
   dac0c:	f04a 0a02 	orrne.w	sl, sl, #2
   dac10:	1b76      	subs	r6, r6, r5
   dac12:	f7ff fdf9 	bl	da808 <rshift>
   dac16:	f8d8 5004 	ldr.w	r5, [r8, #4]
   dac1a:	2702      	movs	r7, #2
   dac1c:	f1ba 0f00 	cmp.w	sl, #0
   dac20:	d048      	beq.n	dacb4 <__gethex+0x3dc>
   dac22:	f8d8 300c 	ldr.w	r3, [r8, #12]
   dac26:	2b02      	cmp	r3, #2
   dac28:	d015      	beq.n	dac56 <__gethex+0x37e>
   dac2a:	2b03      	cmp	r3, #3
   dac2c:	d017      	beq.n	dac5e <__gethex+0x386>
   dac2e:	2b01      	cmp	r3, #1
   dac30:	d109      	bne.n	dac46 <__gethex+0x36e>
   dac32:	f01a 0f02 	tst.w	sl, #2
   dac36:	d006      	beq.n	dac46 <__gethex+0x36e>
   dac38:	f8d9 0000 	ldr.w	r0, [r9]
   dac3c:	ea4a 0a00 	orr.w	sl, sl, r0
   dac40:	f01a 0f01 	tst.w	sl, #1
   dac44:	d10e      	bne.n	dac64 <__gethex+0x38c>
   dac46:	f047 0710 	orr.w	r7, r7, #16
   dac4a:	e033      	b.n	dacb4 <__gethex+0x3dc>
   dac4c:	f04f 0a01 	mov.w	sl, #1
   dac50:	e7d0      	b.n	dabf4 <__gethex+0x31c>
   dac52:	2701      	movs	r7, #1
   dac54:	e7e2      	b.n	dac1c <__gethex+0x344>
   dac56:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dac58:	f1c3 0301 	rsb	r3, r3, #1
   dac5c:	9315      	str	r3, [sp, #84]	; 0x54
   dac5e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dac60:	2b00      	cmp	r3, #0
   dac62:	d0f0      	beq.n	dac46 <__gethex+0x36e>
   dac64:	f8d4 9010 	ldr.w	r9, [r4, #16]
   dac68:	f104 0314 	add.w	r3, r4, #20
   dac6c:	ea4f 0b89 	mov.w	fp, r9, lsl #2
   dac70:	eb03 0189 	add.w	r1, r3, r9, lsl #2
   dac74:	f04f 0c00 	mov.w	ip, #0
   dac78:	4618      	mov	r0, r3
   dac7a:	f853 2b04 	ldr.w	r2, [r3], #4
   dac7e:	f1b2 3fff 	cmp.w	r2, #4294967295
   dac82:	d01c      	beq.n	dacbe <__gethex+0x3e6>
   dac84:	3201      	adds	r2, #1
   dac86:	6002      	str	r2, [r0, #0]
   dac88:	2f02      	cmp	r7, #2
   dac8a:	f104 0314 	add.w	r3, r4, #20
   dac8e:	d13a      	bne.n	dad06 <__gethex+0x42e>
   dac90:	f8d8 2000 	ldr.w	r2, [r8]
   dac94:	3a01      	subs	r2, #1
   dac96:	42b2      	cmp	r2, r6
   dac98:	d10a      	bne.n	dacb0 <__gethex+0x3d8>
   dac9a:	1171      	asrs	r1, r6, #5
   dac9c:	2201      	movs	r2, #1
   dac9e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   daca2:	f006 061f 	and.w	r6, r6, #31
   daca6:	fa02 f606 	lsl.w	r6, r2, r6
   dacaa:	421e      	tst	r6, r3
   dacac:	bf18      	it	ne
   dacae:	4617      	movne	r7, r2
   dacb0:	f047 0720 	orr.w	r7, r7, #32
   dacb4:	9b14      	ldr	r3, [sp, #80]	; 0x50
   dacb6:	601c      	str	r4, [r3, #0]
   dacb8:	9b04      	ldr	r3, [sp, #16]
   dacba:	601d      	str	r5, [r3, #0]
   dacbc:	e6a1      	b.n	daa02 <__gethex+0x12a>
   dacbe:	4299      	cmp	r1, r3
   dacc0:	f843 cc04 	str.w	ip, [r3, #-4]
   dacc4:	d8d8      	bhi.n	dac78 <__gethex+0x3a0>
   dacc6:	68a3      	ldr	r3, [r4, #8]
   dacc8:	4599      	cmp	r9, r3
   dacca:	db14      	blt.n	dacf6 <__gethex+0x41e>
   daccc:	6861      	ldr	r1, [r4, #4]
   dacce:	ee18 0a10 	vmov	r0, s16
   dacd2:	3101      	adds	r1, #1
   dacd4:	f000 f908 	bl	daee8 <_Balloc>
   dacd8:	6922      	ldr	r2, [r4, #16]
   dacda:	3202      	adds	r2, #2
   dacdc:	f104 010c 	add.w	r1, r4, #12
   dace0:	4682      	mov	sl, r0
   dace2:	0092      	lsls	r2, r2, #2
   dace4:	300c      	adds	r0, #12
   dace6:	f7fe fe4f 	bl	d9988 <memcpy>
   dacea:	4621      	mov	r1, r4
   dacec:	ee18 0a10 	vmov	r0, s16
   dacf0:	f000 f92e 	bl	daf50 <_Bfree>
   dacf4:	4654      	mov	r4, sl
   dacf6:	6923      	ldr	r3, [r4, #16]
   dacf8:	1c5a      	adds	r2, r3, #1
   dacfa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   dacfe:	6122      	str	r2, [r4, #16]
   dad00:	2201      	movs	r2, #1
   dad02:	615a      	str	r2, [r3, #20]
   dad04:	e7c0      	b.n	dac88 <__gethex+0x3b0>
   dad06:	6922      	ldr	r2, [r4, #16]
   dad08:	454a      	cmp	r2, r9
   dad0a:	dd0b      	ble.n	dad24 <__gethex+0x44c>
   dad0c:	2101      	movs	r1, #1
   dad0e:	4620      	mov	r0, r4
   dad10:	f7ff fd7a 	bl	da808 <rshift>
   dad14:	f8d8 3008 	ldr.w	r3, [r8, #8]
   dad18:	3501      	adds	r5, #1
   dad1a:	42ab      	cmp	r3, r5
   dad1c:	f6ff aed7 	blt.w	daace <__gethex+0x1f6>
   dad20:	2701      	movs	r7, #1
   dad22:	e7c5      	b.n	dacb0 <__gethex+0x3d8>
   dad24:	f016 061f 	ands.w	r6, r6, #31
   dad28:	d0fa      	beq.n	dad20 <__gethex+0x448>
   dad2a:	449b      	add	fp, r3
   dad2c:	f1c6 0620 	rsb	r6, r6, #32
   dad30:	f85b 0c04 	ldr.w	r0, [fp, #-4]
   dad34:	f000 f99f 	bl	db076 <__hi0bits>
   dad38:	42b0      	cmp	r0, r6
   dad3a:	dbe7      	blt.n	dad0c <__gethex+0x434>
   dad3c:	e7f0      	b.n	dad20 <__gethex+0x448>
   dad3e:	bf00      	nop

000dad40 <L_shift>:
   dad40:	f1c2 0208 	rsb	r2, r2, #8
   dad44:	0092      	lsls	r2, r2, #2
   dad46:	b570      	push	{r4, r5, r6, lr}
   dad48:	f1c2 0620 	rsb	r6, r2, #32
   dad4c:	6843      	ldr	r3, [r0, #4]
   dad4e:	6804      	ldr	r4, [r0, #0]
   dad50:	fa03 f506 	lsl.w	r5, r3, r6
   dad54:	432c      	orrs	r4, r5
   dad56:	40d3      	lsrs	r3, r2
   dad58:	6004      	str	r4, [r0, #0]
   dad5a:	f840 3f04 	str.w	r3, [r0, #4]!
   dad5e:	4288      	cmp	r0, r1
   dad60:	d3f4      	bcc.n	dad4c <L_shift+0xc>
   dad62:	bd70      	pop	{r4, r5, r6, pc}

000dad64 <__match>:
   dad64:	b530      	push	{r4, r5, lr}
   dad66:	6803      	ldr	r3, [r0, #0]
   dad68:	3301      	adds	r3, #1
   dad6a:	f811 4b01 	ldrb.w	r4, [r1], #1
   dad6e:	b914      	cbnz	r4, dad76 <__match+0x12>
   dad70:	6003      	str	r3, [r0, #0]
   dad72:	2001      	movs	r0, #1
   dad74:	bd30      	pop	{r4, r5, pc}
   dad76:	f813 2b01 	ldrb.w	r2, [r3], #1
   dad7a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   dad7e:	2d19      	cmp	r5, #25
   dad80:	bf98      	it	ls
   dad82:	3220      	addls	r2, #32
   dad84:	42a2      	cmp	r2, r4
   dad86:	d0f0      	beq.n	dad6a <__match+0x6>
   dad88:	2000      	movs	r0, #0
   dad8a:	e7f3      	b.n	dad74 <__match+0x10>

000dad8c <__hexnan>:
   dad8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dad90:	680b      	ldr	r3, [r1, #0]
   dad92:	6801      	ldr	r1, [r0, #0]
   dad94:	115e      	asrs	r6, r3, #5
   dad96:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   dad9a:	f013 031f 	ands.w	r3, r3, #31
   dad9e:	b087      	sub	sp, #28
   dada0:	bf18      	it	ne
   dada2:	3604      	addne	r6, #4
   dada4:	2500      	movs	r5, #0
   dada6:	1f37      	subs	r7, r6, #4
   dada8:	4682      	mov	sl, r0
   dadaa:	4690      	mov	r8, r2
   dadac:	9301      	str	r3, [sp, #4]
   dadae:	f846 5c04 	str.w	r5, [r6, #-4]
   dadb2:	46b9      	mov	r9, r7
   dadb4:	463c      	mov	r4, r7
   dadb6:	9502      	str	r5, [sp, #8]
   dadb8:	46ab      	mov	fp, r5
   dadba:	784a      	ldrb	r2, [r1, #1]
   dadbc:	1c4b      	adds	r3, r1, #1
   dadbe:	9303      	str	r3, [sp, #12]
   dadc0:	b342      	cbz	r2, dae14 <__hexnan+0x88>
   dadc2:	4610      	mov	r0, r2
   dadc4:	9105      	str	r1, [sp, #20]
   dadc6:	9204      	str	r2, [sp, #16]
   dadc8:	f7ff fd70 	bl	da8ac <__hexdig_fun>
   dadcc:	2800      	cmp	r0, #0
   dadce:	d14f      	bne.n	dae70 <__hexnan+0xe4>
   dadd0:	9a04      	ldr	r2, [sp, #16]
   dadd2:	9905      	ldr	r1, [sp, #20]
   dadd4:	2a20      	cmp	r2, #32
   dadd6:	d818      	bhi.n	dae0a <__hexnan+0x7e>
   dadd8:	9b02      	ldr	r3, [sp, #8]
   dadda:	459b      	cmp	fp, r3
   daddc:	dd13      	ble.n	dae06 <__hexnan+0x7a>
   dadde:	454c      	cmp	r4, r9
   dade0:	d206      	bcs.n	dadf0 <__hexnan+0x64>
   dade2:	2d07      	cmp	r5, #7
   dade4:	dc04      	bgt.n	dadf0 <__hexnan+0x64>
   dade6:	462a      	mov	r2, r5
   dade8:	4649      	mov	r1, r9
   dadea:	4620      	mov	r0, r4
   dadec:	f7ff ffa8 	bl	dad40 <L_shift>
   dadf0:	4544      	cmp	r4, r8
   dadf2:	d950      	bls.n	dae96 <__hexnan+0x10a>
   dadf4:	2300      	movs	r3, #0
   dadf6:	f1a4 0904 	sub.w	r9, r4, #4
   dadfa:	f844 3c04 	str.w	r3, [r4, #-4]
   dadfe:	f8cd b008 	str.w	fp, [sp, #8]
   dae02:	464c      	mov	r4, r9
   dae04:	461d      	mov	r5, r3
   dae06:	9903      	ldr	r1, [sp, #12]
   dae08:	e7d7      	b.n	dadba <__hexnan+0x2e>
   dae0a:	2a29      	cmp	r2, #41	; 0x29
   dae0c:	d156      	bne.n	daebc <__hexnan+0x130>
   dae0e:	3102      	adds	r1, #2
   dae10:	f8ca 1000 	str.w	r1, [sl]
   dae14:	f1bb 0f00 	cmp.w	fp, #0
   dae18:	d050      	beq.n	daebc <__hexnan+0x130>
   dae1a:	454c      	cmp	r4, r9
   dae1c:	d206      	bcs.n	dae2c <__hexnan+0xa0>
   dae1e:	2d07      	cmp	r5, #7
   dae20:	dc04      	bgt.n	dae2c <__hexnan+0xa0>
   dae22:	462a      	mov	r2, r5
   dae24:	4649      	mov	r1, r9
   dae26:	4620      	mov	r0, r4
   dae28:	f7ff ff8a 	bl	dad40 <L_shift>
   dae2c:	4544      	cmp	r4, r8
   dae2e:	d934      	bls.n	dae9a <__hexnan+0x10e>
   dae30:	f1a8 0204 	sub.w	r2, r8, #4
   dae34:	4623      	mov	r3, r4
   dae36:	f853 1b04 	ldr.w	r1, [r3], #4
   dae3a:	f842 1f04 	str.w	r1, [r2, #4]!
   dae3e:	429f      	cmp	r7, r3
   dae40:	d2f9      	bcs.n	dae36 <__hexnan+0xaa>
   dae42:	1b3b      	subs	r3, r7, r4
   dae44:	f023 0303 	bic.w	r3, r3, #3
   dae48:	3304      	adds	r3, #4
   dae4a:	3401      	adds	r4, #1
   dae4c:	3e03      	subs	r6, #3
   dae4e:	42b4      	cmp	r4, r6
   dae50:	bf88      	it	hi
   dae52:	2304      	movhi	r3, #4
   dae54:	4443      	add	r3, r8
   dae56:	2200      	movs	r2, #0
   dae58:	f843 2b04 	str.w	r2, [r3], #4
   dae5c:	429f      	cmp	r7, r3
   dae5e:	d2fb      	bcs.n	dae58 <__hexnan+0xcc>
   dae60:	683b      	ldr	r3, [r7, #0]
   dae62:	b91b      	cbnz	r3, dae6c <__hexnan+0xe0>
   dae64:	4547      	cmp	r7, r8
   dae66:	d127      	bne.n	daeb8 <__hexnan+0x12c>
   dae68:	2301      	movs	r3, #1
   dae6a:	603b      	str	r3, [r7, #0]
   dae6c:	2005      	movs	r0, #5
   dae6e:	e026      	b.n	daebe <__hexnan+0x132>
   dae70:	3501      	adds	r5, #1
   dae72:	2d08      	cmp	r5, #8
   dae74:	f10b 0b01 	add.w	fp, fp, #1
   dae78:	dd06      	ble.n	dae88 <__hexnan+0xfc>
   dae7a:	4544      	cmp	r4, r8
   dae7c:	d9c3      	bls.n	dae06 <__hexnan+0x7a>
   dae7e:	2300      	movs	r3, #0
   dae80:	f844 3c04 	str.w	r3, [r4, #-4]
   dae84:	2501      	movs	r5, #1
   dae86:	3c04      	subs	r4, #4
   dae88:	6822      	ldr	r2, [r4, #0]
   dae8a:	f000 000f 	and.w	r0, r0, #15
   dae8e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   dae92:	6022      	str	r2, [r4, #0]
   dae94:	e7b7      	b.n	dae06 <__hexnan+0x7a>
   dae96:	2508      	movs	r5, #8
   dae98:	e7b5      	b.n	dae06 <__hexnan+0x7a>
   dae9a:	9b01      	ldr	r3, [sp, #4]
   dae9c:	2b00      	cmp	r3, #0
   dae9e:	d0df      	beq.n	dae60 <__hexnan+0xd4>
   daea0:	f04f 32ff 	mov.w	r2, #4294967295
   daea4:	f1c3 0320 	rsb	r3, r3, #32
   daea8:	fa22 f303 	lsr.w	r3, r2, r3
   daeac:	f856 2c04 	ldr.w	r2, [r6, #-4]
   daeb0:	401a      	ands	r2, r3
   daeb2:	f846 2c04 	str.w	r2, [r6, #-4]
   daeb6:	e7d3      	b.n	dae60 <__hexnan+0xd4>
   daeb8:	3f04      	subs	r7, #4
   daeba:	e7d1      	b.n	dae60 <__hexnan+0xd4>
   daebc:	2004      	movs	r0, #4
   daebe:	b007      	add	sp, #28
   daec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000daec4 <__ascii_mbtowc>:
   daec4:	b082      	sub	sp, #8
   daec6:	b901      	cbnz	r1, daeca <__ascii_mbtowc+0x6>
   daec8:	a901      	add	r1, sp, #4
   daeca:	b142      	cbz	r2, daede <__ascii_mbtowc+0x1a>
   daecc:	b14b      	cbz	r3, daee2 <__ascii_mbtowc+0x1e>
   daece:	7813      	ldrb	r3, [r2, #0]
   daed0:	600b      	str	r3, [r1, #0]
   daed2:	7812      	ldrb	r2, [r2, #0]
   daed4:	1e10      	subs	r0, r2, #0
   daed6:	bf18      	it	ne
   daed8:	2001      	movne	r0, #1
   daeda:	b002      	add	sp, #8
   daedc:	4770      	bx	lr
   daede:	4610      	mov	r0, r2
   daee0:	e7fb      	b.n	daeda <__ascii_mbtowc+0x16>
   daee2:	f06f 0001 	mvn.w	r0, #1
   daee6:	e7f8      	b.n	daeda <__ascii_mbtowc+0x16>

000daee8 <_Balloc>:
   daee8:	b570      	push	{r4, r5, r6, lr}
   daeea:	6a46      	ldr	r6, [r0, #36]	; 0x24
   daeec:	4604      	mov	r4, r0
   daeee:	460d      	mov	r5, r1
   daef0:	b93e      	cbnz	r6, daf02 <_Balloc+0x1a>
   daef2:	2010      	movs	r0, #16
   daef4:	f7fb fd2e 	bl	d6954 <malloc>
   daef8:	e9c0 6601 	strd	r6, r6, [r0, #4]
   daefc:	6260      	str	r0, [r4, #36]	; 0x24
   daefe:	6006      	str	r6, [r0, #0]
   daf00:	60c6      	str	r6, [r0, #12]
   daf02:	6a66      	ldr	r6, [r4, #36]	; 0x24
   daf04:	68f3      	ldr	r3, [r6, #12]
   daf06:	b183      	cbz	r3, daf2a <_Balloc+0x42>
   daf08:	6a63      	ldr	r3, [r4, #36]	; 0x24
   daf0a:	68db      	ldr	r3, [r3, #12]
   daf0c:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   daf10:	b9b8      	cbnz	r0, daf42 <_Balloc+0x5a>
   daf12:	2101      	movs	r1, #1
   daf14:	fa01 f605 	lsl.w	r6, r1, r5
   daf18:	1d72      	adds	r2, r6, #5
   daf1a:	0092      	lsls	r2, r2, #2
   daf1c:	4620      	mov	r0, r4
   daf1e:	f000 fc22 	bl	db766 <_calloc_r>
   daf22:	b160      	cbz	r0, daf3e <_Balloc+0x56>
   daf24:	e9c0 5601 	strd	r5, r6, [r0, #4]
   daf28:	e00e      	b.n	daf48 <_Balloc+0x60>
   daf2a:	2221      	movs	r2, #33	; 0x21
   daf2c:	2104      	movs	r1, #4
   daf2e:	4620      	mov	r0, r4
   daf30:	f000 fc19 	bl	db766 <_calloc_r>
   daf34:	6a63      	ldr	r3, [r4, #36]	; 0x24
   daf36:	60f0      	str	r0, [r6, #12]
   daf38:	68db      	ldr	r3, [r3, #12]
   daf3a:	2b00      	cmp	r3, #0
   daf3c:	d1e4      	bne.n	daf08 <_Balloc+0x20>
   daf3e:	2000      	movs	r0, #0
   daf40:	bd70      	pop	{r4, r5, r6, pc}
   daf42:	6802      	ldr	r2, [r0, #0]
   daf44:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   daf48:	2300      	movs	r3, #0
   daf4a:	e9c0 3303 	strd	r3, r3, [r0, #12]
   daf4e:	e7f7      	b.n	daf40 <_Balloc+0x58>

000daf50 <_Bfree>:
   daf50:	b570      	push	{r4, r5, r6, lr}
   daf52:	6a46      	ldr	r6, [r0, #36]	; 0x24
   daf54:	4605      	mov	r5, r0
   daf56:	460c      	mov	r4, r1
   daf58:	b93e      	cbnz	r6, daf6a <_Bfree+0x1a>
   daf5a:	2010      	movs	r0, #16
   daf5c:	f7fb fcfa 	bl	d6954 <malloc>
   daf60:	e9c0 6601 	strd	r6, r6, [r0, #4]
   daf64:	6268      	str	r0, [r5, #36]	; 0x24
   daf66:	6006      	str	r6, [r0, #0]
   daf68:	60c6      	str	r6, [r0, #12]
   daf6a:	b13c      	cbz	r4, daf7c <_Bfree+0x2c>
   daf6c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   daf6e:	6862      	ldr	r2, [r4, #4]
   daf70:	68db      	ldr	r3, [r3, #12]
   daf72:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   daf76:	6021      	str	r1, [r4, #0]
   daf78:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   daf7c:	bd70      	pop	{r4, r5, r6, pc}

000daf7e <__multadd>:
   daf7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   daf82:	690e      	ldr	r6, [r1, #16]
   daf84:	4607      	mov	r7, r0
   daf86:	4698      	mov	r8, r3
   daf88:	460c      	mov	r4, r1
   daf8a:	f101 0014 	add.w	r0, r1, #20
   daf8e:	2300      	movs	r3, #0
   daf90:	6805      	ldr	r5, [r0, #0]
   daf92:	b2a9      	uxth	r1, r5
   daf94:	fb02 8101 	mla	r1, r2, r1, r8
   daf98:	ea4f 4c11 	mov.w	ip, r1, lsr #16
   daf9c:	0c2d      	lsrs	r5, r5, #16
   daf9e:	fb02 c505 	mla	r5, r2, r5, ip
   dafa2:	b289      	uxth	r1, r1
   dafa4:	3301      	adds	r3, #1
   dafa6:	eb01 4105 	add.w	r1, r1, r5, lsl #16
   dafaa:	429e      	cmp	r6, r3
   dafac:	f840 1b04 	str.w	r1, [r0], #4
   dafb0:	ea4f 4815 	mov.w	r8, r5, lsr #16
   dafb4:	dcec      	bgt.n	daf90 <__multadd+0x12>
   dafb6:	f1b8 0f00 	cmp.w	r8, #0
   dafba:	d01b      	beq.n	daff4 <__multadd+0x76>
   dafbc:	68a3      	ldr	r3, [r4, #8]
   dafbe:	42b3      	cmp	r3, r6
   dafc0:	dc12      	bgt.n	dafe8 <__multadd+0x6a>
   dafc2:	6861      	ldr	r1, [r4, #4]
   dafc4:	4638      	mov	r0, r7
   dafc6:	3101      	adds	r1, #1
   dafc8:	f7ff ff8e 	bl	daee8 <_Balloc>
   dafcc:	6922      	ldr	r2, [r4, #16]
   dafce:	3202      	adds	r2, #2
   dafd0:	f104 010c 	add.w	r1, r4, #12
   dafd4:	4605      	mov	r5, r0
   dafd6:	0092      	lsls	r2, r2, #2
   dafd8:	300c      	adds	r0, #12
   dafda:	f7fe fcd5 	bl	d9988 <memcpy>
   dafde:	4621      	mov	r1, r4
   dafe0:	4638      	mov	r0, r7
   dafe2:	f7ff ffb5 	bl	daf50 <_Bfree>
   dafe6:	462c      	mov	r4, r5
   dafe8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
   dafec:	3601      	adds	r6, #1
   dafee:	f8c3 8014 	str.w	r8, [r3, #20]
   daff2:	6126      	str	r6, [r4, #16]
   daff4:	4620      	mov	r0, r4
   daff6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000daffa <__s2b>:
   daffa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   daffe:	460c      	mov	r4, r1
   db000:	4615      	mov	r5, r2
   db002:	461f      	mov	r7, r3
   db004:	2209      	movs	r2, #9
   db006:	3308      	adds	r3, #8
   db008:	4606      	mov	r6, r0
   db00a:	fb93 f3f2 	sdiv	r3, r3, r2
   db00e:	2100      	movs	r1, #0
   db010:	2201      	movs	r2, #1
   db012:	429a      	cmp	r2, r3
   db014:	db20      	blt.n	db058 <__s2b+0x5e>
   db016:	4630      	mov	r0, r6
   db018:	f7ff ff66 	bl	daee8 <_Balloc>
   db01c:	9b08      	ldr	r3, [sp, #32]
   db01e:	6143      	str	r3, [r0, #20]
   db020:	2d09      	cmp	r5, #9
   db022:	f04f 0301 	mov.w	r3, #1
   db026:	6103      	str	r3, [r0, #16]
   db028:	dd19      	ble.n	db05e <__s2b+0x64>
   db02a:	f104 0909 	add.w	r9, r4, #9
   db02e:	46c8      	mov	r8, r9
   db030:	442c      	add	r4, r5
   db032:	f818 3b01 	ldrb.w	r3, [r8], #1
   db036:	4601      	mov	r1, r0
   db038:	3b30      	subs	r3, #48	; 0x30
   db03a:	220a      	movs	r2, #10
   db03c:	4630      	mov	r0, r6
   db03e:	f7ff ff9e 	bl	daf7e <__multadd>
   db042:	45a0      	cmp	r8, r4
   db044:	d1f5      	bne.n	db032 <__s2b+0x38>
   db046:	f1a5 0408 	sub.w	r4, r5, #8
   db04a:	444c      	add	r4, r9
   db04c:	1b2d      	subs	r5, r5, r4
   db04e:	1963      	adds	r3, r4, r5
   db050:	42bb      	cmp	r3, r7
   db052:	db07      	blt.n	db064 <__s2b+0x6a>
   db054:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   db058:	0052      	lsls	r2, r2, #1
   db05a:	3101      	adds	r1, #1
   db05c:	e7d9      	b.n	db012 <__s2b+0x18>
   db05e:	340a      	adds	r4, #10
   db060:	2509      	movs	r5, #9
   db062:	e7f3      	b.n	db04c <__s2b+0x52>
   db064:	f814 3b01 	ldrb.w	r3, [r4], #1
   db068:	4601      	mov	r1, r0
   db06a:	3b30      	subs	r3, #48	; 0x30
   db06c:	220a      	movs	r2, #10
   db06e:	4630      	mov	r0, r6
   db070:	f7ff ff85 	bl	daf7e <__multadd>
   db074:	e7eb      	b.n	db04e <__s2b+0x54>

000db076 <__hi0bits>:
   db076:	0c03      	lsrs	r3, r0, #16
   db078:	041b      	lsls	r3, r3, #16
   db07a:	b9d3      	cbnz	r3, db0b2 <__hi0bits+0x3c>
   db07c:	0400      	lsls	r0, r0, #16
   db07e:	2310      	movs	r3, #16
   db080:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   db084:	bf04      	itt	eq
   db086:	0200      	lsleq	r0, r0, #8
   db088:	3308      	addeq	r3, #8
   db08a:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   db08e:	bf04      	itt	eq
   db090:	0100      	lsleq	r0, r0, #4
   db092:	3304      	addeq	r3, #4
   db094:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   db098:	bf04      	itt	eq
   db09a:	0080      	lsleq	r0, r0, #2
   db09c:	3302      	addeq	r3, #2
   db09e:	2800      	cmp	r0, #0
   db0a0:	db05      	blt.n	db0ae <__hi0bits+0x38>
   db0a2:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   db0a6:	f103 0301 	add.w	r3, r3, #1
   db0aa:	bf08      	it	eq
   db0ac:	2320      	moveq	r3, #32
   db0ae:	4618      	mov	r0, r3
   db0b0:	4770      	bx	lr
   db0b2:	2300      	movs	r3, #0
   db0b4:	e7e4      	b.n	db080 <__hi0bits+0xa>

000db0b6 <__lo0bits>:
   db0b6:	6803      	ldr	r3, [r0, #0]
   db0b8:	f013 0207 	ands.w	r2, r3, #7
   db0bc:	4601      	mov	r1, r0
   db0be:	d00b      	beq.n	db0d8 <__lo0bits+0x22>
   db0c0:	07da      	lsls	r2, r3, #31
   db0c2:	d424      	bmi.n	db10e <__lo0bits+0x58>
   db0c4:	0798      	lsls	r0, r3, #30
   db0c6:	bf49      	itett	mi
   db0c8:	085b      	lsrmi	r3, r3, #1
   db0ca:	089b      	lsrpl	r3, r3, #2
   db0cc:	2001      	movmi	r0, #1
   db0ce:	600b      	strmi	r3, [r1, #0]
   db0d0:	bf5c      	itt	pl
   db0d2:	600b      	strpl	r3, [r1, #0]
   db0d4:	2002      	movpl	r0, #2
   db0d6:	4770      	bx	lr
   db0d8:	b298      	uxth	r0, r3
   db0da:	b9b0      	cbnz	r0, db10a <__lo0bits+0x54>
   db0dc:	0c1b      	lsrs	r3, r3, #16
   db0de:	2010      	movs	r0, #16
   db0e0:	f013 0fff 	tst.w	r3, #255	; 0xff
   db0e4:	bf04      	itt	eq
   db0e6:	0a1b      	lsreq	r3, r3, #8
   db0e8:	3008      	addeq	r0, #8
   db0ea:	071a      	lsls	r2, r3, #28
   db0ec:	bf04      	itt	eq
   db0ee:	091b      	lsreq	r3, r3, #4
   db0f0:	3004      	addeq	r0, #4
   db0f2:	079a      	lsls	r2, r3, #30
   db0f4:	bf04      	itt	eq
   db0f6:	089b      	lsreq	r3, r3, #2
   db0f8:	3002      	addeq	r0, #2
   db0fa:	07da      	lsls	r2, r3, #31
   db0fc:	d403      	bmi.n	db106 <__lo0bits+0x50>
   db0fe:	085b      	lsrs	r3, r3, #1
   db100:	f100 0001 	add.w	r0, r0, #1
   db104:	d005      	beq.n	db112 <__lo0bits+0x5c>
   db106:	600b      	str	r3, [r1, #0]
   db108:	4770      	bx	lr
   db10a:	4610      	mov	r0, r2
   db10c:	e7e8      	b.n	db0e0 <__lo0bits+0x2a>
   db10e:	2000      	movs	r0, #0
   db110:	4770      	bx	lr
   db112:	2020      	movs	r0, #32
   db114:	4770      	bx	lr

000db116 <__i2b>:
   db116:	b510      	push	{r4, lr}
   db118:	460c      	mov	r4, r1
   db11a:	2101      	movs	r1, #1
   db11c:	f7ff fee4 	bl	daee8 <_Balloc>
   db120:	2201      	movs	r2, #1
   db122:	6144      	str	r4, [r0, #20]
   db124:	6102      	str	r2, [r0, #16]
   db126:	bd10      	pop	{r4, pc}

000db128 <__multiply>:
   db128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   db12c:	4615      	mov	r5, r2
   db12e:	690a      	ldr	r2, [r1, #16]
   db130:	692b      	ldr	r3, [r5, #16]
   db132:	429a      	cmp	r2, r3
   db134:	bfb8      	it	lt
   db136:	460b      	movlt	r3, r1
   db138:	460c      	mov	r4, r1
   db13a:	bfbc      	itt	lt
   db13c:	462c      	movlt	r4, r5
   db13e:	461d      	movlt	r5, r3
   db140:	6927      	ldr	r7, [r4, #16]
   db142:	f8d5 9010 	ldr.w	r9, [r5, #16]
   db146:	68a3      	ldr	r3, [r4, #8]
   db148:	6861      	ldr	r1, [r4, #4]
   db14a:	eb07 0609 	add.w	r6, r7, r9
   db14e:	42b3      	cmp	r3, r6
   db150:	bfb8      	it	lt
   db152:	3101      	addlt	r1, #1
   db154:	b085      	sub	sp, #20
   db156:	f7ff fec7 	bl	daee8 <_Balloc>
   db15a:	f100 0114 	add.w	r1, r0, #20
   db15e:	eb01 0886 	add.w	r8, r1, r6, lsl #2
   db162:	460b      	mov	r3, r1
   db164:	2200      	movs	r2, #0
   db166:	4543      	cmp	r3, r8
   db168:	d31d      	bcc.n	db1a6 <__multiply+0x7e>
   db16a:	f104 0314 	add.w	r3, r4, #20
   db16e:	f105 0214 	add.w	r2, r5, #20
   db172:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   db176:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   db17a:	9302      	str	r3, [sp, #8]
   db17c:	1b3b      	subs	r3, r7, r4
   db17e:	3b15      	subs	r3, #21
   db180:	f023 0303 	bic.w	r3, r3, #3
   db184:	3304      	adds	r3, #4
   db186:	f104 0515 	add.w	r5, r4, #21
   db18a:	42af      	cmp	r7, r5
   db18c:	bf38      	it	cc
   db18e:	2304      	movcc	r3, #4
   db190:	9301      	str	r3, [sp, #4]
   db192:	9b02      	ldr	r3, [sp, #8]
   db194:	9203      	str	r2, [sp, #12]
   db196:	4293      	cmp	r3, r2
   db198:	d808      	bhi.n	db1ac <__multiply+0x84>
   db19a:	2e00      	cmp	r6, #0
   db19c:	dc5a      	bgt.n	db254 <__multiply+0x12c>
   db19e:	6106      	str	r6, [r0, #16]
   db1a0:	b005      	add	sp, #20
   db1a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   db1a6:	f843 2b04 	str.w	r2, [r3], #4
   db1aa:	e7dc      	b.n	db166 <__multiply+0x3e>
   db1ac:	f8b2 a000 	ldrh.w	sl, [r2]
   db1b0:	f1ba 0f00 	cmp.w	sl, #0
   db1b4:	d024      	beq.n	db200 <__multiply+0xd8>
   db1b6:	f104 0e14 	add.w	lr, r4, #20
   db1ba:	4689      	mov	r9, r1
   db1bc:	f04f 0c00 	mov.w	ip, #0
   db1c0:	f85e 5b04 	ldr.w	r5, [lr], #4
   db1c4:	f8d9 b000 	ldr.w	fp, [r9]
   db1c8:	b2ab      	uxth	r3, r5
   db1ca:	fa1f fb8b 	uxth.w	fp, fp
   db1ce:	fb0a b303 	mla	r3, sl, r3, fp
   db1d2:	ea4f 4b15 	mov.w	fp, r5, lsr #16
   db1d6:	f8d9 5000 	ldr.w	r5, [r9]
   db1da:	4463      	add	r3, ip
   db1dc:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   db1e0:	fb0a c50b 	mla	r5, sl, fp, ip
   db1e4:	eb05 4513 	add.w	r5, r5, r3, lsr #16
   db1e8:	b29b      	uxth	r3, r3
   db1ea:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   db1ee:	4577      	cmp	r7, lr
   db1f0:	f849 3b04 	str.w	r3, [r9], #4
   db1f4:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   db1f8:	d8e2      	bhi.n	db1c0 <__multiply+0x98>
   db1fa:	9b01      	ldr	r3, [sp, #4]
   db1fc:	f841 c003 	str.w	ip, [r1, r3]
   db200:	9b03      	ldr	r3, [sp, #12]
   db202:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   db206:	3204      	adds	r2, #4
   db208:	f1b9 0f00 	cmp.w	r9, #0
   db20c:	d020      	beq.n	db250 <__multiply+0x128>
   db20e:	680b      	ldr	r3, [r1, #0]
   db210:	f104 0c14 	add.w	ip, r4, #20
   db214:	468e      	mov	lr, r1
   db216:	f04f 0a00 	mov.w	sl, #0
   db21a:	f8bc 5000 	ldrh.w	r5, [ip]
   db21e:	f8be b002 	ldrh.w	fp, [lr, #2]
   db222:	fb09 b505 	mla	r5, r9, r5, fp
   db226:	44aa      	add	sl, r5
   db228:	b29b      	uxth	r3, r3
   db22a:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
   db22e:	f84e 3b04 	str.w	r3, [lr], #4
   db232:	f85c 3b04 	ldr.w	r3, [ip], #4
   db236:	f8be 5000 	ldrh.w	r5, [lr]
   db23a:	0c1b      	lsrs	r3, r3, #16
   db23c:	fb09 5303 	mla	r3, r9, r3, r5
   db240:	eb03 431a 	add.w	r3, r3, sl, lsr #16
   db244:	4567      	cmp	r7, ip
   db246:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   db24a:	d8e6      	bhi.n	db21a <__multiply+0xf2>
   db24c:	9d01      	ldr	r5, [sp, #4]
   db24e:	514b      	str	r3, [r1, r5]
   db250:	3104      	adds	r1, #4
   db252:	e79e      	b.n	db192 <__multiply+0x6a>
   db254:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   db258:	2b00      	cmp	r3, #0
   db25a:	d1a0      	bne.n	db19e <__multiply+0x76>
   db25c:	3e01      	subs	r6, #1
   db25e:	e79c      	b.n	db19a <__multiply+0x72>

000db260 <__pow5mult>:
   db260:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   db264:	4615      	mov	r5, r2
   db266:	f012 0203 	ands.w	r2, r2, #3
   db26a:	4606      	mov	r6, r0
   db26c:	460f      	mov	r7, r1
   db26e:	d007      	beq.n	db280 <__pow5mult+0x20>
   db270:	4c21      	ldr	r4, [pc, #132]	; (db2f8 <__pow5mult+0x98>)
   db272:	3a01      	subs	r2, #1
   db274:	2300      	movs	r3, #0
   db276:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   db27a:	f7ff fe80 	bl	daf7e <__multadd>
   db27e:	4607      	mov	r7, r0
   db280:	10ad      	asrs	r5, r5, #2
   db282:	d035      	beq.n	db2f0 <__pow5mult+0x90>
   db284:	6a74      	ldr	r4, [r6, #36]	; 0x24
   db286:	b93c      	cbnz	r4, db298 <__pow5mult+0x38>
   db288:	2010      	movs	r0, #16
   db28a:	f7fb fb63 	bl	d6954 <malloc>
   db28e:	e9c0 4401 	strd	r4, r4, [r0, #4]
   db292:	6270      	str	r0, [r6, #36]	; 0x24
   db294:	6004      	str	r4, [r0, #0]
   db296:	60c4      	str	r4, [r0, #12]
   db298:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   db29c:	f8d8 4008 	ldr.w	r4, [r8, #8]
   db2a0:	b94c      	cbnz	r4, db2b6 <__pow5mult+0x56>
   db2a2:	f240 2171 	movw	r1, #625	; 0x271
   db2a6:	4630      	mov	r0, r6
   db2a8:	f7ff ff35 	bl	db116 <__i2b>
   db2ac:	2300      	movs	r3, #0
   db2ae:	f8c8 0008 	str.w	r0, [r8, #8]
   db2b2:	4604      	mov	r4, r0
   db2b4:	6003      	str	r3, [r0, #0]
   db2b6:	f04f 0900 	mov.w	r9, #0
   db2ba:	07eb      	lsls	r3, r5, #31
   db2bc:	d50a      	bpl.n	db2d4 <__pow5mult+0x74>
   db2be:	4639      	mov	r1, r7
   db2c0:	4622      	mov	r2, r4
   db2c2:	4630      	mov	r0, r6
   db2c4:	f7ff ff30 	bl	db128 <__multiply>
   db2c8:	4639      	mov	r1, r7
   db2ca:	4680      	mov	r8, r0
   db2cc:	4630      	mov	r0, r6
   db2ce:	f7ff fe3f 	bl	daf50 <_Bfree>
   db2d2:	4647      	mov	r7, r8
   db2d4:	106d      	asrs	r5, r5, #1
   db2d6:	d00b      	beq.n	db2f0 <__pow5mult+0x90>
   db2d8:	6820      	ldr	r0, [r4, #0]
   db2da:	b938      	cbnz	r0, db2ec <__pow5mult+0x8c>
   db2dc:	4622      	mov	r2, r4
   db2de:	4621      	mov	r1, r4
   db2e0:	4630      	mov	r0, r6
   db2e2:	f7ff ff21 	bl	db128 <__multiply>
   db2e6:	6020      	str	r0, [r4, #0]
   db2e8:	f8c0 9000 	str.w	r9, [r0]
   db2ec:	4604      	mov	r4, r0
   db2ee:	e7e4      	b.n	db2ba <__pow5mult+0x5a>
   db2f0:	4638      	mov	r0, r7
   db2f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   db2f6:	bf00      	nop
   db2f8:	000dc3f8 	.word	0x000dc3f8

000db2fc <__lshift>:
   db2fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   db300:	460c      	mov	r4, r1
   db302:	6849      	ldr	r1, [r1, #4]
   db304:	6923      	ldr	r3, [r4, #16]
   db306:	eb03 1862 	add.w	r8, r3, r2, asr #5
   db30a:	68a3      	ldr	r3, [r4, #8]
   db30c:	4607      	mov	r7, r0
   db30e:	4691      	mov	r9, r2
   db310:	ea4f 1a62 	mov.w	sl, r2, asr #5
   db314:	f108 0601 	add.w	r6, r8, #1
   db318:	42b3      	cmp	r3, r6
   db31a:	db3f      	blt.n	db39c <__lshift+0xa0>
   db31c:	4638      	mov	r0, r7
   db31e:	f7ff fde3 	bl	daee8 <_Balloc>
   db322:	2300      	movs	r3, #0
   db324:	4605      	mov	r5, r0
   db326:	f100 0114 	add.w	r1, r0, #20
   db32a:	f100 0210 	add.w	r2, r0, #16
   db32e:	4618      	mov	r0, r3
   db330:	4553      	cmp	r3, sl
   db332:	db36      	blt.n	db3a2 <__lshift+0xa6>
   db334:	6920      	ldr	r0, [r4, #16]
   db336:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   db33a:	f104 0314 	add.w	r3, r4, #20
   db33e:	f019 091f 	ands.w	r9, r9, #31
   db342:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   db346:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   db34a:	d02e      	beq.n	db3aa <__lshift+0xae>
   db34c:	f1c9 0e20 	rsb	lr, r9, #32
   db350:	468a      	mov	sl, r1
   db352:	2200      	movs	r2, #0
   db354:	6818      	ldr	r0, [r3, #0]
   db356:	fa00 f009 	lsl.w	r0, r0, r9
   db35a:	4302      	orrs	r2, r0
   db35c:	f84a 2b04 	str.w	r2, [sl], #4
   db360:	f853 2b04 	ldr.w	r2, [r3], #4
   db364:	459c      	cmp	ip, r3
   db366:	fa22 f20e 	lsr.w	r2, r2, lr
   db36a:	d8f3      	bhi.n	db354 <__lshift+0x58>
   db36c:	ebac 0304 	sub.w	r3, ip, r4
   db370:	3b15      	subs	r3, #21
   db372:	f023 0303 	bic.w	r3, r3, #3
   db376:	3304      	adds	r3, #4
   db378:	f104 0015 	add.w	r0, r4, #21
   db37c:	4560      	cmp	r0, ip
   db37e:	bf88      	it	hi
   db380:	2304      	movhi	r3, #4
   db382:	50ca      	str	r2, [r1, r3]
   db384:	b10a      	cbz	r2, db38a <__lshift+0x8e>
   db386:	f108 0602 	add.w	r6, r8, #2
   db38a:	3e01      	subs	r6, #1
   db38c:	4638      	mov	r0, r7
   db38e:	612e      	str	r6, [r5, #16]
   db390:	4621      	mov	r1, r4
   db392:	f7ff fddd 	bl	daf50 <_Bfree>
   db396:	4628      	mov	r0, r5
   db398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   db39c:	3101      	adds	r1, #1
   db39e:	005b      	lsls	r3, r3, #1
   db3a0:	e7ba      	b.n	db318 <__lshift+0x1c>
   db3a2:	f842 0f04 	str.w	r0, [r2, #4]!
   db3a6:	3301      	adds	r3, #1
   db3a8:	e7c2      	b.n	db330 <__lshift+0x34>
   db3aa:	3904      	subs	r1, #4
   db3ac:	f853 2b04 	ldr.w	r2, [r3], #4
   db3b0:	f841 2f04 	str.w	r2, [r1, #4]!
   db3b4:	459c      	cmp	ip, r3
   db3b6:	d8f9      	bhi.n	db3ac <__lshift+0xb0>
   db3b8:	e7e7      	b.n	db38a <__lshift+0x8e>

000db3ba <__mcmp>:
   db3ba:	b530      	push	{r4, r5, lr}
   db3bc:	6902      	ldr	r2, [r0, #16]
   db3be:	690c      	ldr	r4, [r1, #16]
   db3c0:	1b12      	subs	r2, r2, r4
   db3c2:	d10e      	bne.n	db3e2 <__mcmp+0x28>
   db3c4:	f100 0314 	add.w	r3, r0, #20
   db3c8:	3114      	adds	r1, #20
   db3ca:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   db3ce:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   db3d2:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   db3d6:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   db3da:	42a5      	cmp	r5, r4
   db3dc:	d003      	beq.n	db3e6 <__mcmp+0x2c>
   db3de:	d305      	bcc.n	db3ec <__mcmp+0x32>
   db3e0:	2201      	movs	r2, #1
   db3e2:	4610      	mov	r0, r2
   db3e4:	bd30      	pop	{r4, r5, pc}
   db3e6:	4283      	cmp	r3, r0
   db3e8:	d3f3      	bcc.n	db3d2 <__mcmp+0x18>
   db3ea:	e7fa      	b.n	db3e2 <__mcmp+0x28>
   db3ec:	f04f 32ff 	mov.w	r2, #4294967295
   db3f0:	e7f7      	b.n	db3e2 <__mcmp+0x28>

000db3f2 <__mdiff>:
   db3f2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   db3f6:	460c      	mov	r4, r1
   db3f8:	4606      	mov	r6, r0
   db3fa:	4611      	mov	r1, r2
   db3fc:	4620      	mov	r0, r4
   db3fe:	4617      	mov	r7, r2
   db400:	f7ff ffdb 	bl	db3ba <__mcmp>
   db404:	1e05      	subs	r5, r0, #0
   db406:	d108      	bne.n	db41a <__mdiff+0x28>
   db408:	4629      	mov	r1, r5
   db40a:	4630      	mov	r0, r6
   db40c:	f7ff fd6c 	bl	daee8 <_Balloc>
   db410:	2301      	movs	r3, #1
   db412:	e9c0 3504 	strd	r3, r5, [r0, #16]
   db416:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   db41a:	bfa4      	itt	ge
   db41c:	463b      	movge	r3, r7
   db41e:	4627      	movge	r7, r4
   db420:	4630      	mov	r0, r6
   db422:	6879      	ldr	r1, [r7, #4]
   db424:	bfa6      	itte	ge
   db426:	461c      	movge	r4, r3
   db428:	2500      	movge	r5, #0
   db42a:	2501      	movlt	r5, #1
   db42c:	f7ff fd5c 	bl	daee8 <_Balloc>
   db430:	693e      	ldr	r6, [r7, #16]
   db432:	60c5      	str	r5, [r0, #12]
   db434:	6925      	ldr	r5, [r4, #16]
   db436:	f107 0114 	add.w	r1, r7, #20
   db43a:	f104 0914 	add.w	r9, r4, #20
   db43e:	f100 0e14 	add.w	lr, r0, #20
   db442:	f107 0210 	add.w	r2, r7, #16
   db446:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
   db44a:	eb09 0585 	add.w	r5, r9, r5, lsl #2
   db44e:	46f2      	mov	sl, lr
   db450:	2700      	movs	r7, #0
   db452:	f859 3b04 	ldr.w	r3, [r9], #4
   db456:	f852 bf04 	ldr.w	fp, [r2, #4]!
   db45a:	fa1f f883 	uxth.w	r8, r3
   db45e:	fa17 f78b 	uxtah	r7, r7, fp
   db462:	0c1b      	lsrs	r3, r3, #16
   db464:	eba7 0808 	sub.w	r8, r7, r8
   db468:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   db46c:	eb03 4328 	add.w	r3, r3, r8, asr #16
   db470:	fa1f f888 	uxth.w	r8, r8
   db474:	141f      	asrs	r7, r3, #16
   db476:	454d      	cmp	r5, r9
   db478:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   db47c:	f84a 3b04 	str.w	r3, [sl], #4
   db480:	d8e7      	bhi.n	db452 <__mdiff+0x60>
   db482:	1b2b      	subs	r3, r5, r4
   db484:	3b15      	subs	r3, #21
   db486:	f023 0303 	bic.w	r3, r3, #3
   db48a:	3304      	adds	r3, #4
   db48c:	3415      	adds	r4, #21
   db48e:	42a5      	cmp	r5, r4
   db490:	bf38      	it	cc
   db492:	2304      	movcc	r3, #4
   db494:	4419      	add	r1, r3
   db496:	4473      	add	r3, lr
   db498:	469e      	mov	lr, r3
   db49a:	460d      	mov	r5, r1
   db49c:	4565      	cmp	r5, ip
   db49e:	d30e      	bcc.n	db4be <__mdiff+0xcc>
   db4a0:	f10c 0203 	add.w	r2, ip, #3
   db4a4:	1a52      	subs	r2, r2, r1
   db4a6:	f022 0203 	bic.w	r2, r2, #3
   db4aa:	3903      	subs	r1, #3
   db4ac:	458c      	cmp	ip, r1
   db4ae:	bf38      	it	cc
   db4b0:	2200      	movcc	r2, #0
   db4b2:	441a      	add	r2, r3
   db4b4:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   db4b8:	b17b      	cbz	r3, db4da <__mdiff+0xe8>
   db4ba:	6106      	str	r6, [r0, #16]
   db4bc:	e7ab      	b.n	db416 <__mdiff+0x24>
   db4be:	f855 8b04 	ldr.w	r8, [r5], #4
   db4c2:	fa17 f488 	uxtah	r4, r7, r8
   db4c6:	1422      	asrs	r2, r4, #16
   db4c8:	eb02 4218 	add.w	r2, r2, r8, lsr #16
   db4cc:	b2a4      	uxth	r4, r4
   db4ce:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   db4d2:	f84e 4b04 	str.w	r4, [lr], #4
   db4d6:	1417      	asrs	r7, r2, #16
   db4d8:	e7e0      	b.n	db49c <__mdiff+0xaa>
   db4da:	3e01      	subs	r6, #1
   db4dc:	e7ea      	b.n	db4b4 <__mdiff+0xc2>
	...

000db4e0 <__ulp>:
   db4e0:	b082      	sub	sp, #8
   db4e2:	ed8d 0b00 	vstr	d0, [sp]
   db4e6:	9b01      	ldr	r3, [sp, #4]
   db4e8:	4912      	ldr	r1, [pc, #72]	; (db534 <__ulp+0x54>)
   db4ea:	4019      	ands	r1, r3
   db4ec:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   db4f0:	2900      	cmp	r1, #0
   db4f2:	dd05      	ble.n	db500 <__ulp+0x20>
   db4f4:	2200      	movs	r2, #0
   db4f6:	460b      	mov	r3, r1
   db4f8:	ec43 2b10 	vmov	d0, r2, r3
   db4fc:	b002      	add	sp, #8
   db4fe:	4770      	bx	lr
   db500:	4249      	negs	r1, r1
   db502:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   db506:	ea4f 5021 	mov.w	r0, r1, asr #20
   db50a:	f04f 0200 	mov.w	r2, #0
   db50e:	f04f 0300 	mov.w	r3, #0
   db512:	da04      	bge.n	db51e <__ulp+0x3e>
   db514:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   db518:	fa41 f300 	asr.w	r3, r1, r0
   db51c:	e7ec      	b.n	db4f8 <__ulp+0x18>
   db51e:	f1a0 0114 	sub.w	r1, r0, #20
   db522:	291e      	cmp	r1, #30
   db524:	bfda      	itte	le
   db526:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   db52a:	fa20 f101 	lsrle.w	r1, r0, r1
   db52e:	2101      	movgt	r1, #1
   db530:	460a      	mov	r2, r1
   db532:	e7e1      	b.n	db4f8 <__ulp+0x18>
   db534:	7ff00000 	.word	0x7ff00000

000db538 <__b2d>:
   db538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   db53a:	6905      	ldr	r5, [r0, #16]
   db53c:	f100 0714 	add.w	r7, r0, #20
   db540:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   db544:	1f2e      	subs	r6, r5, #4
   db546:	f855 4c04 	ldr.w	r4, [r5, #-4]
   db54a:	4620      	mov	r0, r4
   db54c:	f7ff fd93 	bl	db076 <__hi0bits>
   db550:	f1c0 0320 	rsb	r3, r0, #32
   db554:	280a      	cmp	r0, #10
   db556:	f8df c07c 	ldr.w	ip, [pc, #124]	; db5d4 <__b2d+0x9c>
   db55a:	600b      	str	r3, [r1, #0]
   db55c:	dc14      	bgt.n	db588 <__b2d+0x50>
   db55e:	f1c0 0e0b 	rsb	lr, r0, #11
   db562:	fa24 f10e 	lsr.w	r1, r4, lr
   db566:	42b7      	cmp	r7, r6
   db568:	ea41 030c 	orr.w	r3, r1, ip
   db56c:	bf34      	ite	cc
   db56e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   db572:	2100      	movcs	r1, #0
   db574:	3015      	adds	r0, #21
   db576:	fa04 f000 	lsl.w	r0, r4, r0
   db57a:	fa21 f10e 	lsr.w	r1, r1, lr
   db57e:	ea40 0201 	orr.w	r2, r0, r1
   db582:	ec43 2b10 	vmov	d0, r2, r3
   db586:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   db588:	42b7      	cmp	r7, r6
   db58a:	bf3a      	itte	cc
   db58c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   db590:	f1a5 0608 	subcc.w	r6, r5, #8
   db594:	2100      	movcs	r1, #0
   db596:	380b      	subs	r0, #11
   db598:	d017      	beq.n	db5ca <__b2d+0x92>
   db59a:	f1c0 0c20 	rsb	ip, r0, #32
   db59e:	fa04 f500 	lsl.w	r5, r4, r0
   db5a2:	42be      	cmp	r6, r7
   db5a4:	fa21 f40c 	lsr.w	r4, r1, ip
   db5a8:	ea45 0504 	orr.w	r5, r5, r4
   db5ac:	bf8c      	ite	hi
   db5ae:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   db5b2:	2400      	movls	r4, #0
   db5b4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   db5b8:	fa01 f000 	lsl.w	r0, r1, r0
   db5bc:	fa24 f40c 	lsr.w	r4, r4, ip
   db5c0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   db5c4:	ea40 0204 	orr.w	r2, r0, r4
   db5c8:	e7db      	b.n	db582 <__b2d+0x4a>
   db5ca:	ea44 030c 	orr.w	r3, r4, ip
   db5ce:	460a      	mov	r2, r1
   db5d0:	e7d7      	b.n	db582 <__b2d+0x4a>
   db5d2:	bf00      	nop
   db5d4:	3ff00000 	.word	0x3ff00000

000db5d8 <__d2b>:
   db5d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   db5dc:	4689      	mov	r9, r1
   db5de:	2101      	movs	r1, #1
   db5e0:	ec57 6b10 	vmov	r6, r7, d0
   db5e4:	4690      	mov	r8, r2
   db5e6:	f7ff fc7f 	bl	daee8 <_Balloc>
   db5ea:	f3c7 550a 	ubfx	r5, r7, #20, #11
   db5ee:	4604      	mov	r4, r0
   db5f0:	f3c7 0313 	ubfx	r3, r7, #0, #20
   db5f4:	bb35      	cbnz	r5, db644 <__d2b+0x6c>
   db5f6:	2e00      	cmp	r6, #0
   db5f8:	9301      	str	r3, [sp, #4]
   db5fa:	d028      	beq.n	db64e <__d2b+0x76>
   db5fc:	4668      	mov	r0, sp
   db5fe:	9600      	str	r6, [sp, #0]
   db600:	f7ff fd59 	bl	db0b6 <__lo0bits>
   db604:	9900      	ldr	r1, [sp, #0]
   db606:	b300      	cbz	r0, db64a <__d2b+0x72>
   db608:	9a01      	ldr	r2, [sp, #4]
   db60a:	f1c0 0320 	rsb	r3, r0, #32
   db60e:	fa02 f303 	lsl.w	r3, r2, r3
   db612:	430b      	orrs	r3, r1
   db614:	40c2      	lsrs	r2, r0
   db616:	6163      	str	r3, [r4, #20]
   db618:	9201      	str	r2, [sp, #4]
   db61a:	9b01      	ldr	r3, [sp, #4]
   db61c:	61a3      	str	r3, [r4, #24]
   db61e:	2b00      	cmp	r3, #0
   db620:	bf14      	ite	ne
   db622:	2202      	movne	r2, #2
   db624:	2201      	moveq	r2, #1
   db626:	6122      	str	r2, [r4, #16]
   db628:	b1d5      	cbz	r5, db660 <__d2b+0x88>
   db62a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   db62e:	4405      	add	r5, r0
   db630:	f8c9 5000 	str.w	r5, [r9]
   db634:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   db638:	f8c8 0000 	str.w	r0, [r8]
   db63c:	4620      	mov	r0, r4
   db63e:	b003      	add	sp, #12
   db640:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   db644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   db648:	e7d5      	b.n	db5f6 <__d2b+0x1e>
   db64a:	6161      	str	r1, [r4, #20]
   db64c:	e7e5      	b.n	db61a <__d2b+0x42>
   db64e:	a801      	add	r0, sp, #4
   db650:	f7ff fd31 	bl	db0b6 <__lo0bits>
   db654:	9b01      	ldr	r3, [sp, #4]
   db656:	6163      	str	r3, [r4, #20]
   db658:	2201      	movs	r2, #1
   db65a:	6122      	str	r2, [r4, #16]
   db65c:	3020      	adds	r0, #32
   db65e:	e7e3      	b.n	db628 <__d2b+0x50>
   db660:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   db664:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   db668:	f8c9 0000 	str.w	r0, [r9]
   db66c:	6918      	ldr	r0, [r3, #16]
   db66e:	f7ff fd02 	bl	db076 <__hi0bits>
   db672:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   db676:	e7df      	b.n	db638 <__d2b+0x60>

000db678 <__ratio>:
   db678:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   db67c:	4688      	mov	r8, r1
   db67e:	4669      	mov	r1, sp
   db680:	4681      	mov	r9, r0
   db682:	f7ff ff59 	bl	db538 <__b2d>
   db686:	a901      	add	r1, sp, #4
   db688:	4640      	mov	r0, r8
   db68a:	ec55 4b10 	vmov	r4, r5, d0
   db68e:	f7ff ff53 	bl	db538 <__b2d>
   db692:	f8d9 3010 	ldr.w	r3, [r9, #16]
   db696:	f8d8 2010 	ldr.w	r2, [r8, #16]
   db69a:	eba3 0c02 	sub.w	ip, r3, r2
   db69e:	e9dd 3200 	ldrd	r3, r2, [sp]
   db6a2:	1a9b      	subs	r3, r3, r2
   db6a4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   db6a8:	ec51 0b10 	vmov	r0, r1, d0
   db6ac:	2b00      	cmp	r3, #0
   db6ae:	bfd6      	itet	le
   db6b0:	460a      	movle	r2, r1
   db6b2:	462a      	movgt	r2, r5
   db6b4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   db6b8:	468b      	mov	fp, r1
   db6ba:	462f      	mov	r7, r5
   db6bc:	bfd4      	ite	le
   db6be:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   db6c2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   db6c6:	4620      	mov	r0, r4
   db6c8:	ee10 2a10 	vmov	r2, s0
   db6cc:	465b      	mov	r3, fp
   db6ce:	4639      	mov	r1, r7
   db6d0:	f7fd fdce 	bl	d9270 <__aeabi_ddiv>
   db6d4:	ec41 0b10 	vmov	d0, r0, r1
   db6d8:	b003      	add	sp, #12
   db6da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000db6de <__copybits>:
   db6de:	3901      	subs	r1, #1
   db6e0:	b570      	push	{r4, r5, r6, lr}
   db6e2:	1149      	asrs	r1, r1, #5
   db6e4:	6914      	ldr	r4, [r2, #16]
   db6e6:	3101      	adds	r1, #1
   db6e8:	f102 0314 	add.w	r3, r2, #20
   db6ec:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   db6f0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   db6f4:	1f05      	subs	r5, r0, #4
   db6f6:	42a3      	cmp	r3, r4
   db6f8:	d30c      	bcc.n	db714 <__copybits+0x36>
   db6fa:	1aa3      	subs	r3, r4, r2
   db6fc:	3b11      	subs	r3, #17
   db6fe:	f023 0303 	bic.w	r3, r3, #3
   db702:	3211      	adds	r2, #17
   db704:	42a2      	cmp	r2, r4
   db706:	bf88      	it	hi
   db708:	2300      	movhi	r3, #0
   db70a:	4418      	add	r0, r3
   db70c:	2300      	movs	r3, #0
   db70e:	4288      	cmp	r0, r1
   db710:	d305      	bcc.n	db71e <__copybits+0x40>
   db712:	bd70      	pop	{r4, r5, r6, pc}
   db714:	f853 6b04 	ldr.w	r6, [r3], #4
   db718:	f845 6f04 	str.w	r6, [r5, #4]!
   db71c:	e7eb      	b.n	db6f6 <__copybits+0x18>
   db71e:	f840 3b04 	str.w	r3, [r0], #4
   db722:	e7f4      	b.n	db70e <__copybits+0x30>

000db724 <__any_on>:
   db724:	f100 0214 	add.w	r2, r0, #20
   db728:	6900      	ldr	r0, [r0, #16]
   db72a:	114b      	asrs	r3, r1, #5
   db72c:	4298      	cmp	r0, r3
   db72e:	b510      	push	{r4, lr}
   db730:	db11      	blt.n	db756 <__any_on+0x32>
   db732:	dd0a      	ble.n	db74a <__any_on+0x26>
   db734:	f011 011f 	ands.w	r1, r1, #31
   db738:	d007      	beq.n	db74a <__any_on+0x26>
   db73a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   db73e:	fa24 f001 	lsr.w	r0, r4, r1
   db742:	fa00 f101 	lsl.w	r1, r0, r1
   db746:	428c      	cmp	r4, r1
   db748:	d10b      	bne.n	db762 <__any_on+0x3e>
   db74a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   db74e:	4293      	cmp	r3, r2
   db750:	d803      	bhi.n	db75a <__any_on+0x36>
   db752:	2000      	movs	r0, #0
   db754:	bd10      	pop	{r4, pc}
   db756:	4603      	mov	r3, r0
   db758:	e7f7      	b.n	db74a <__any_on+0x26>
   db75a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   db75e:	2900      	cmp	r1, #0
   db760:	d0f5      	beq.n	db74e <__any_on+0x2a>
   db762:	2001      	movs	r0, #1
   db764:	e7f6      	b.n	db754 <__any_on+0x30>

000db766 <_calloc_r>:
   db766:	b513      	push	{r0, r1, r4, lr}
   db768:	434a      	muls	r2, r1
   db76a:	4611      	mov	r1, r2
   db76c:	9201      	str	r2, [sp, #4]
   db76e:	f7fb f919 	bl	d69a4 <_malloc_r>
   db772:	4604      	mov	r4, r0
   db774:	b118      	cbz	r0, db77e <_calloc_r+0x18>
   db776:	9a01      	ldr	r2, [sp, #4]
   db778:	2100      	movs	r1, #0
   db77a:	f7fe f913 	bl	d99a4 <memset>
   db77e:	4620      	mov	r0, r4
   db780:	b002      	add	sp, #8
   db782:	bd10      	pop	{r4, pc}
   db784:	0000      	movs	r0, r0
	...

000db788 <nan>:
   db788:	ed9f 0b01 	vldr	d0, [pc, #4]	; db790 <nan+0x8>
   db78c:	4770      	bx	lr
   db78e:	bf00      	nop
   db790:	00000000 	.word	0x00000000
   db794:	7ff80000 	.word	0x7ff80000

000db798 <__ascii_wctomb>:
   db798:	b149      	cbz	r1, db7ae <__ascii_wctomb+0x16>
   db79a:	2aff      	cmp	r2, #255	; 0xff
   db79c:	bf85      	ittet	hi
   db79e:	238a      	movhi	r3, #138	; 0x8a
   db7a0:	6003      	strhi	r3, [r0, #0]
   db7a2:	700a      	strbls	r2, [r1, #0]
   db7a4:	f04f 30ff 	movhi.w	r0, #4294967295
   db7a8:	bf98      	it	ls
   db7aa:	2001      	movls	r0, #1
   db7ac:	4770      	bx	lr
   db7ae:	4608      	mov	r0, r1
   db7b0:	4770      	bx	lr
	...

000db7b4 <__aeabi_d2lz>:
   db7b4:	b538      	push	{r3, r4, r5, lr}
   db7b6:	2200      	movs	r2, #0
   db7b8:	2300      	movs	r3, #0
   db7ba:	4604      	mov	r4, r0
   db7bc:	460d      	mov	r5, r1
   db7be:	f7fd fe9f 	bl	d9500 <__aeabi_dcmplt>
   db7c2:	b928      	cbnz	r0, db7d0 <__aeabi_d2lz+0x1c>
   db7c4:	4620      	mov	r0, r4
   db7c6:	4629      	mov	r1, r5
   db7c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   db7cc:	f7fd bf48 	b.w	d9660 <__aeabi_d2ulz>
   db7d0:	4620      	mov	r0, r4
   db7d2:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   db7d6:	f7fd ff43 	bl	d9660 <__aeabi_d2ulz>
   db7da:	4240      	negs	r0, r0
   db7dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   db7e0:	bd38      	pop	{r3, r4, r5, pc}
   db7e2:	bf00      	nop

000db7e4 <dynalib_user>:
   db7e4:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   db7f4:	0000 0000 4552 4943 4942 4e45 4f44 4420     ....RECIBIENDO D
   db804:	5441 534f 2e20 2e2e 6900 696e 6963 7261     ATOS ....iniciar
   db814:	7000 6f72 6579 7463 006f 6162 6974 0072     .proyecto.batir.
   db824:	6143 656c 646e 7261 7473 7261 0074 6255     Calendarstart.Ub
   db834:	6469 746f 5773 6265 6f68 6b6f 6e00 7669     idotsWebhook.niv
   db844:	6c65 6761 6175 6e00 7669 6c65 6163 6566     elagua.nivelcafe
   db854:	6e00 7669 6c65 7a61 6375 7261 7000 7361     .nivelazucar.pas
   db864:	6974 6c6c 2061 6d61 7261 6c69 616c 7000     tilla amarilla.p
   db874:	7361 6974 6c6c 2061 7a61 6c75 7000 7361     astilla azul.pas
   db884:	6974 6c6c 2061 6c62 6e61 6163 7000 7361     tilla blanca.pas
   db894:	6974 6c6c 2061 616e 6172 6a6e 0061 6e49     tilla naranja.In
   db8a4:	6369 6169 3a72 0020 4120 616d 6972 6c6c     iciar: . Amarill
   db8b4:	3a6f 2000 7a41 6c75 003a 4220 616c 636e     o:. Azul:. Blanc
   db8c4:	3a6f 2000 614e 6172 6a6e 3a61 2000 4125     o:. Naranja:. %A
   db8d4:	7567 3a61 2000 4323 6661 3a65 2000 4123     gua:. #Cafe:. #A
   db8e4:	757a 6163 3a72 2000 6142 6974 3a72 2000     zucar:. Batir:. 
   db8f4:	6c41 7261 3a6d 3100 6e00 776f 7461 7265     Alarm:.1.nowater
   db904:	7700 6265 6f68 6b6f 4200 4642 2d46 6373     .webhook.BBFF-sc
   db914:	3864 386e 4479 3969 6d6f 5639 6778 3536     d8n8yDi9om9Vxg65
   db924:	4530 7553 324d 4736 4c65 3951 5500 6962     0ESuM26GeLQ9.Ubi
   db934:	6f64 7374 654d 7373 6761 0065 7441 6574     dotsMessage.Atte
   db944:	706d 6974 676e 7420 206f 6572 6f63 6e6e     mpting to reconn
   db954:	6365 0074 7254 6979 676e 7420 206f 6f63     ect.Trying to co
   db964:	6e6e 6365 2074 6f74 0020 2c20 6120 7474     nnect to . , att
   db974:	6d65 7470 6e20 6d75 6562 3a72 0020 4c7c     empt number: .|L
   db984:	7c56 5000 7961 6f6c 6461 6620 726f 7220     V|.Payload for r
   db994:	7165 6575 7473 003a 2d0a 2d2d 002d 6974     equest:..----.ti
   db9a4:	656d 756f 2c74 6320 756f 646c 6e20 746f     meout, could not
   db9b4:	7220 6165 2064 6e61 2079 6572 7073 6e6f      read any respon
   db9c4:	6573 6620 6f72 206d 6874 2065 6f68 7473     se from the host
   db9d4:	5300 7265 6576 2772 2073 6572 7073 6e6f     .Server's respon
   db9e4:	6573 003a 2d0a 2d2d 2d2d 2d2d 2d2d 002d     se:..----------.
   db9f4:	4f50 5453 4f00 004b 6f43 6c75 2064 6f6e     POST.OK.Could no
   dba04:	2074 6f63 6e6e 6365 2074 6f74 7420 6568     t connect to the
   dba14:	6820 736f 0074 564c 4500 5252 524f 6320      host.LV.ERROR c
   dba24:	756f 646c 6e20 746f 6320 6e6f 656e 7463     ould not connect
   dba34:	7420 206f 6874 2065 6573 7672 7265 6e00      to the server.n
   dba44:	6c75 006c 5245 4f52 0052 0000               ull.ERROR...

000dba50 <_ZTV6UbiTCP>:
	...
   dba58:	4dad 000d 4e51 000d 4ab5 000d 50cd 000d     .M..QN...J...P..
   dba68:	6f59 2075 7261 2065 6573 646e 6e69 2067     You are sending 
   dba78:	6f6d 6572 7420 6168 206e 6874 2065 616d     more than the ma
   dba88:	6978 756d 206d 666f 6320 6e6f 6573 7563     ximum of consecu
   dba98:	6974 6576 7620 7261 6169 6c62 7365 4500     tive variables.E
   dbaa8:	5252 524f 202c 6164 6174 7220 7465 6972     RROR, data retri
   dbab8:	7665 6c61 6920 2073 6e6f 796c 7320 7075     eval is only sup
   dbac8:	6f70 7472 6465 7520 6973 676e 5420 5043     ported using TCP
   dbad8:	6f20 2072 5448 5054 7020 6f72 6f74 6f63      or HTTP protoco
   dbae8:	736c 2500 3731 0067 007b 7325 2522 2273     ls.%17g.{.%s"%s"
   dbaf8:	7b3a 7622 6c61 6575 3a22 7325 2500 2c73     :{"value":%s.%s,
   dbb08:	7422 6d69 7365 6174 706d 3a22 6c25 0075     "timestamp":%lu.
   dbb18:	6425 6425 6425 2500 2573 0073 7325 3030     %d%d%d.%s%s.%s00
   dbb28:	0030 7325 222c 6f63 746e 7865 2274 203a     0.%s,"context": 
   dbb38:	257b 7d73 2500 2c73 7000 7961 6f6c 6461     {%s}.%s,.payload
   dbb48:	003a 6255 6469 746f 5073 7261 6974 6c63     :.UbidotsParticl
   dbb58:	2f65 2e33 0032 7325 507c 534f 7c54 7325     e/3.2.%s|POST|%s
   dbb68:	007c 7325 7325 253a 0073 7325 3e3d 2500     |.%s%s:%s.%s=>.%
   dbb78:	2473 7325 2500 4073 6c25 0075 7325 657c     s$%s.%s@%lu.%s|e
   dbb88:	646e 5300 6e65 6964 676e 6420 7461 2e61     nd.Sending data.
   dbb98:	2e2e 6900 646e 7375 7274 6169 2e6c 7061     ...industrial.ap
   dbba8:	2e69 6275 6469 746f 2e73 6f63 006d 7441     i.ubidots.com.At
   dbbb8:	6574 706d 2074 6966 696e 6873 6465 5000     tempt finished.P
   dbbc8:	534f 2054 612f 6970 762f 2e31 2f36 6564     OST /api/v1.6/de
   dbbd8:	6976 6563 2f73 2000 5448 5054 312f 312e     vices/. HTTP/1.1
   dbbe8:	0a0d 4800 736f 3a74 0020 7355 7265 412d     ...Host: .User-A
   dbbf8:	6567 746e 203a 5800 412d 7475 2d68 6f54     gent: .X-Auth-To
   dbc08:	656b 3a6e 0020 6f43 6e6e 6365 6974 6e6f     ken: .Connection
   dbc18:	203a 6c63 736f 0d65 000a 6f43 746e 6e65     : close...Conten
   dbc28:	2d74 7954 6570 203a 7061 6c70 6369 7461     t-Type: applicat
   dbc38:	6f69 2f6e 736a 6e6f 0a0d 4300 6e6f 6574     ion/json...Conte
   dbc48:	746e 4c2d 6e65 7467 3a68 0020 614d 696b     nt-Length: .Maki
   dbc58:	676e 7220 7165 6575 7473 7420 206f 6255     ng request to Ub
   dbc68:	6469 746f 3a73 000a 6177 7469 6e69 2067     idots:..waiting 
   dbc78:	6f66 2072 6573 7672 7265 6120 736e 6577     for server answe
   dbc88:	2072 2e2e 002e 550a 6962 6f64 7374 2027     r .....Ubidots' 
   dbc98:	6553 7672 7265 7220 7365 6f70 736e 3a65     Server response:
   dbca8:	000a 6f43 6c75 2064 6f6e 2074 6573 646e     ..Could not send
   dbcb8:	6420 7461 2061 6f74 7520 6962 6f64 7374      data to ubidots
   dbcc8:	7520 6973 676e 4820 5454 0050 4547 2054      using HTTP.GET 
   dbcd8:	612f 6970 762f 2e31 2f36 6564 6976 6563     /api/v1.6/device
   dbce8:	2f73 2f00 766c 4300 6e6f 6574 746e 542d     s/./lv.Content-T
   dbcf8:	7079 3a65 6120 7070 696c 6163 6974 6e6f     ype: application
   dbd08:	6a2f 6f73 0d6e 0d0a 000a 6f43 6e6e 6365     /json.....Connec
   dbd18:	6974 6e6f 4620 6961 656c 2064 6275 6469     tion Failed ubid
   dbd28:	746f 2073 202d 7254 2079 6741 6961 006e     ots - Try Again.

000dbd38 <_ZTV7UbiHTTP>:
	...
   dbd40:	5a89 000d 5cb9 000d 5835 000d 5839 000d     .Z...\..5X..9X..
   dbd50:	575b 7261 696e 676e 205d 6f43 6c75 2064     [Warning] Could 
   dbd60:	6f6e 2074 6f73 766c 2065 5049 4120 6464     not solve IP Add
   dbd70:	6572 7373 6f20 2066 6874 2065 6572 6f6d     ress of the remo
   dbd80:	6574 6820 736f 2c74 7720 7469 2068 6f79     te host, with yo
   dbd90:	7275 4420 534e 7320 7465 7075 202e 2020     ur DNS setup.   
   dbda0:	2020 2020 2020 2020 550a 6973 676e 6420             .Using d
   dbdb0:	6665 7561 746c 4920 646e 7375 7274 6169     efault Industria
   dbdc0:	206c 6255 6469 746f 2073 5049 203a 3631     l Ubidots IP: 16
   dbdd0:	2e39 3535 362e 2e31 3432 0033 5245 4f52     9.55.61.243.ERRO
   dbde0:	2052 6573 646e 6e69 2067 6176 756c 7365     R sending values
   dbdf0:	7720 7469 2068 4455 0050 0000                with UDP...

000dbdfc <_ZTV6UbiUDP>:
	...
   dbe04:	6319 000d 62a1 000d 62ad 000d 62b1 000d     .c...b...b...b..

000dbe14 <_ZTV11UbiParticle>:
	...
   dbe1c:	6409 000d 63e9 000d 63f5 000d 63f9 000d     .d...c...c...c..

000dbe2c <_ZTVN5spark13EthernetClassE>:
	...
   dbe34:	6a33 000d 6a29 000d 6a1f 000d 6a15 000d     3j..)j...j...j..
   dbe44:	6a09 000d 69fd 000d 69f1 000d 69e9 000d     .j...i...i...i..
   dbe54:	69df 000d 69d5 000d 8659 000d               .i...i..Y...

000dbe60 <_ZTV3UDP>:
	...
   dbe68:	51d5 000d 51f5 000d 6b85 000d 6cad 000d     .Q...Q...k...l..
   dbe78:	6b7d 000d 6b9d 000d 6bbb 000d 6bd5 000d     }k...k...k...k..
   dbe88:	6bf9 000d 6c91 000d 6f8f 000d 6d35 000d     .k...l...o..5m..
   dbe98:	6ead 000d 6b65 000d 7079 000d 6e35 000d     .n..ek..yp..5n..
   dbea8:	6d6d 000d 70a7 000d 6cd7 000d 6b73 000d     mm...p...l..sk..
   dbeb8:	6d15 000d 6b79 000d 6bd7 000d fff0 ffff     .m..yk...k......
   dbec8:	0000 0000 6bf1 000d                         .....k..

000dbed0 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   dbed8:	7061 0070 5925 252d 2d6d 6425 2554 3a48     app.%Y-%m-%dT%H:
   dbee8:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000dbef8 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   dbf00:	768d 000d 7693 000d 76d1 000d 76a1 000d     .v...v...v...v..
   dbf10:	768f 000d                                   .v..

000dbf14 <_ZTV9IPAddress>:
	...
   dbf1c:	7bd5 000d 7bc5 000d 7bc7 000d               .{...{...{..

000dbf28 <_ZTV9USBSerial>:
	...
   dbf30:	7cf1 000d 7d59 000d 7d2f 000d 7429 000d     .|..Y}../}..)t..
   dbf40:	7d21 000d 7cf3 000d 7d03 000d 7d53 000d     !}...|...}..S}..
   dbf50:	7d13 000d 7ced 000d                         .}...|..

000dbf58 <_ZTV11USARTSerial>:
	...
   dbf60:	7e4d 000d 7eb9 000d 7e91 000d 7429 000d     M~...~...~..)t..
   dbf70:	7e61 000d 7e7d 000d 7e6f 000d 7e8b 000d     a~..}~..o~...~..
   dbf80:	7e4f 000d 7e53 000d                         O~..S~..

000dbf88 <_ZTV7TwoWire>:
	...
   dbf90:	7f71 000d 7fbb 000d 7f93 000d 7f73 000d     q...........s...
   dbfa0:	7f9b 000d 7fa3 000d 7fab 000d 7fb3 000d     ................
   dbfb0:	6977 6972 676e 7200 6365 2076 7265 6f72     wiring.recv erro
   dbfc0:	2072 203d 6425 0000                         r = %d..

000dbfc8 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   dbfd0:	806f 000d 8091 000d 856f 000d 809f 000d     o.......o.......
   dbfe0:	8071 000d                                   q...

000dbfe4 <_ZTV9TCPClient>:
	...
   dbfec:	4ab9 000d 4aed 000d 7fed 000d 8007 000d     .J...J..........
   dbffc:	83f9 000d 816b 000d 813d 000d 8031 000d     ....k...=...1...
   dc00c:	8301 000d 81f5 000d 819f 000d 84ad 000d     ................
   dc01c:	8033 000d 8065 000d 8019 000d 80a3 000d     3...e...........
   dc02c:	811d 000d                                   ....

000dc030 <_ZTVN5spark9WiFiClassE>:
	...
   dc038:	85d3 000d 85c9 000d 85bf 000d 8575 000d     ............u...
   dc048:	85b3 000d 85a7 000d 859b 000d 8593 000d     ................
   dc058:	8589 000d 857f 000d 8659 000d               ........Y...

000dc064 <_ZTVN5spark12NetworkClassE>:
	...
   dc06c:	85f1 000d 85fb 000d 8605 000d 860f 000d     ................
   dc07c:	8619 000d 8625 000d 8631 000d 863d 000d     ....%...1...=...
   dc08c:	8645 000d 864f 000d 8659 000d               E...O...Y...

000dc098 <_ZSt7nothrow>:
	...

000dc099 <_ZTSSt19_Sp_make_shared_tag>:
   dc099:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   dc0a9:	6572 5f64 6174 0067 0000                     red_tag....

000dc0b4 <_ZTISt19_Sp_make_shared_tag>:
   dc0b4:	c0f4 000d c099 000d                         ........

000dc0bc <_ZTIN10__cxxabiv117__class_type_infoE>:
   dc0bc:	c154 000d c0c8 000d c178 000d               T.......x...

000dc0c8 <_ZTSN10__cxxabiv117__class_type_infoE>:
   dc0c8:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   dc0d8:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   dc0e8:	0045 0000                                   E...

000dc0ec <_ZTVN10__cxxabiv117__class_type_infoE>:
   dc0ec:	0000 0000 c0bc 000d 8acd 000d 8ae1 000d     ................
   dc0fc:	8c75 000d 8c75 000d 8b4b 000d 8a8d 000d     u...u...K.......
   dc10c:	8b33 000d 8af5 000d 8ac1 000d               3...........

000dc118 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   dc118:	c154 000d c124 000d c0bc 000d               T...$.......

000dc124 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   dc124:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   dc134:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   dc144:	666e 456f 0000 0000                         nfoE....

000dc14c <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   dc14c:	0000 0000 c118 000d 8b75 000d 8b89 000d     ........u.......
   dc15c:	8c75 000d 8c75 000d 8b4b 000d 8a8d 000d     u...u...K.......
   dc16c:	8c49 000d 8bd5 000d 8b9d 000d               I...........

000dc178 <_ZTISt9type_info>:
   dc178:	c0f4 000d c180 000d                         ........

000dc180 <_ZTSSt9type_info>:
   dc180:	7453 7439 7079 5f65 6e69 6f66 6e00 0066     St9type_info.nf.
   dc190:	6e69 7469 0079 6e61 0000 0000               inity.an....

000dc19c <fpi.7566>:
   dc19c:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   dc1ac:	0000 0000                                   ....

000dc1b0 <fpinan.7602>:
   dc1b0:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
	...

000dc1c8 <tinytens>:
   dc1c8:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   dc1d8:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   dc1e8:	6f43 64ac 0628 1168                         Co.d(.h.

000dc1f0 <_ctype_>:
   dc1f0:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   dc200:	2020 2020 2020 2020 2020 2020 2020 2020                     
   dc210:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   dc220:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   dc230:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   dc240:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   dc250:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   dc260:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   dc270:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000dc2f4 <_C_numeric_locale>:
   dc2f4:	b80b 000d bd11 000d e2f8 2003 0043 4f50     ........... C.PO
   dc304:	4953 0058                                   SIX.

000dc308 <__mprec_bigtens>:
   dc308:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   dc318:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   dc328:	bf3c 7f73 4fdd 7515                         <.s..O.u

000dc330 <__mprec_tens>:
   dc330:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   dc340:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   dc350:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   dc360:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   dc370:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   dc380:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   dc390:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   dc3a0:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   dc3b0:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   dc3c0:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   dc3d0:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   dc3e0:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   dc3f0:	9db4 79d9 7843 44ea                         ...yCx.D

000dc3f8 <p05.7490>:
   dc3f8:	0005 0000 0019 0000 007d 0000               ........}...

000dc404 <link_const_variable_data_end>:
   dc404:	000d4a5d 	.word	0x000d4a5d
   dc408:	000d51b1 	.word	0x000d51b1
   dc40c:	000d5745 	.word	0x000d5745
   dc410:	000d5e95 	.word	0x000d5e95
   dc414:	000d624d 	.word	0x000d624d
   dc418:	000d62e1 	.word	0x000d62e1
   dc41c:	000d6a3d 	.word	0x000d6a3d
   dc420:	000d6a85 	.word	0x000d6a85
   dc424:	000d7401 	.word	0x000d7401
   dc428:	000d74f1 	.word	0x000d74f1
   dc42c:	000d7501 	.word	0x000d7501
   dc430:	000d754d 	.word	0x000d754d
   dc434:	000d85dd 	.word	0x000d85dd
   dc438:	000d872d 	.word	0x000d872d

000dc43c <link_constructors_end>:
   dc43c:	00000000 	.word	0x00000000
